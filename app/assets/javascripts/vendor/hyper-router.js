/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/component/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $scope = self.$$scope;

      return Opal.cdecl($scope, 'VERSION', "0.12.3")
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/client_stubs"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$import', TMP_1 = function($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_1.$$arity = -1);
      Opal.defn(self, '$imports', TMP_2 = function $$imports($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_2.$$arity = -1);
      return (Opal.defn(self, '$import_tree', TMP_3 = function $$import_tree($a_rest) {
        var self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return nil;
      }, TMP_3.$$arity = -1), nil) && 'import_tree';
    })(Opal.get_singleton_class(self))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/context"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_variable_get', '$!', '$key?', '$[]', '$[]=', '$dup', '$instance_variable_set', '$each', '$run', '$new']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Context, self = $Context = $module($base, 'Context');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5;

      Opal.defs(self, '$set_var', TMP_1 = function $$set_var(ctx, var$, $kwargs) {
        var $a, $b, $c, self = this, force, $iter = TMP_1.$$p, $yield = $iter || nil, inst_value_b4 = nil;
        if (self.context == null) self.context = nil;

        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((force = $kwargs.$$smap['force']) == null) {
          force = nil
        }
        TMP_1.$$p = null;
        inst_value_b4 = ctx.$instance_variable_get(var$);
        if ((($a = ($b = ($c = self.context, $c !== false && $c !== nil && $c != null ?self.context['$[]'](ctx)['$key?'](var$)['$!']() : $c), $b !== false && $b !== nil && $b != null ?(((($c = force) !== false && $c !== nil && $c != null) ? $c : inst_value_b4['$!']())) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.context['$[]'](ctx)['$[]='](var$, ((($a = inst_value_b4 !== false && inst_value_b4 !== nil && inst_value_b4 != null) ? inst_value_b4.$dup() : inst_value_b4)))};
        return ((($a = inst_value_b4) !== false && $a !== nil && $a != null) ? $a : ctx.$instance_variable_set(var$, Opal.yieldX($yield, [])));
      }, TMP_1.$$arity = -3);

      Opal.defs(self, '$reset!', TMP_5 = function(reboot) {
        var $a, $b, TMP_2, $c, TMP_4, self = this;
        if (self.context == null) self.context = nil;

        if (reboot == null) {
          reboot = true;
        }
        if ((($a = self.context) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          ($a = ($b = self.context).$each, $a.$$p = (TMP_2 = function(ctx, vars){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (ctx == null) ctx = nil;if (vars == null) vars = nil;
          return ($c = ($d = vars).$each, $c.$$p = (TMP_3 = function(var$, init){var self = TMP_3.$$s || this;
if (var$ == null) var$ = nil;if (init == null) init = nil;
            return ctx.$instance_variable_set(var$, init)}, TMP_3.$$s = self, TMP_3.$$arity = 2, TMP_3), $c).call($d)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
          if (reboot !== false && reboot !== nil && reboot != null) {
            return (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')).$run()
            } else {
            return nil
          };
          } else {
          return self.context = ($a = ($c = $scope.get('Hash')).$new, $a.$$p = (TMP_4 = function(h, k){var self = TMP_4.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2([], {}))}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $a).call($c)
        };
      }, TMP_5.$$arity = -1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/on_client"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$==', '$!']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defs(self, '$on_client?', TMP_1 = function() {
      var self = this;

      if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
        return ((typeof Opal.global.document === 'undefined'))['$!']()};
    }, TMP_1.$$arity = 0)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop-config"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$==', '$require']);
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    self.$require("hyperloop/client_stubs");
    self.$require("hyperloop/context");
    return self.$require("hyperloop/on_client");}
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$alias_method', '$_pre_react_patch_initialize', '$to_proc']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    self.$alias_method("_pre_react_patch_initialize", "initialize");

    return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(defaults) {
      var $a, $b, $c, self = this, $iter = TMP_1.$$p, block = $iter || nil;

      TMP_1.$$p = null;
      if ((($a = (defaults===null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($b)
        } else {
        return ($a = ($c = self).$_pre_react_patch_initialize, $a.$$p = block.$to_proc(), $a).call($c, defaults)
      };
    }, TMP_1.$$arity = -1), nil) && 'initialize';
  })($scope.base, null)
};

/* Generated by Opal 0.10.5 */
Opal.modules["native"] = function(Opal) {
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  function $rb_ge(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs >= rhs : lhs['$>='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $klass = Opal.klass, $gvars = Opal.gvars;

  Opal.add_stubs(['$try_convert', '$native?', '$respond_to?', '$to_n', '$raise', '$inspect', '$Native', '$proc', '$map!', '$end_with?', '$define_method', '$[]', '$convert', '$call', '$to_proc', '$new', '$each', '$native_reader', '$native_writer', '$extend', '$is_a?', '$map', '$alias_method', '$to_a', '$_Array', '$include', '$method_missing', '$bind', '$instance_method', '$[]=', '$slice', '$-', '$length', '$enum_for', '$===', '$>=', '$<<', '$each_pair', '$_initialize', '$name', '$exiting_mid', '$native_module']);
  (function($base) {
    var $Native, self = $Native = $module($base, 'Native');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_19, TMP_20, TMP_21;

    Opal.defs(self, '$is_a?', TMP_1 = function(object, klass) {
      var self = this;

      
      try {
        return object instanceof self.$try_convert(klass);
      }
      catch (e) {
        return false;
      }
    ;
    }, TMP_1.$$arity = 2);

    Opal.defs(self, '$try_convert', TMP_2 = function $$try_convert(value, default$) {
      var self = this;

      if (default$ == null) {
        default$ = nil;
      }
      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        return default$;
      }
    ;
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$convert', TMP_3 = function $$convert(value) {
      var self = this;

      
      if (self['$native?'](value)) {
        return value;
      }
      else if (value['$respond_to?']("to_n")) {
        return value.$to_n();
      }
      else {
        self.$raise($scope.get('ArgumentError'), "" + (value.$inspect()) + " isn't native");
      }
    ;
    }, TMP_3.$$arity = 1);

    Opal.defs(self, '$call', TMP_4 = function $$call(obj, key, $a_rest) {
      var self = this, args, $iter = TMP_4.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 2;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 2; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 2] = arguments[$arg_idx];
      }
      TMP_4.$$p = null;
      
      var prop = obj[key];

      if (prop instanceof Function) {
        var converted = new Array(args.length);

        for (var i = 0, l = args.length; i < l; i++) {
          var item = args[i],
              conv = self.$try_convert(item);

          converted[i] = conv === nil ? item : conv;
        }

        if (block !== nil) {
          converted.push(block);
        }

        return self.$Native(prop.apply(obj, converted));
      }
      else {
        return self.$Native(prop);
      }
    ;
    }, TMP_4.$$arity = -3);

    Opal.defs(self, '$proc', TMP_5 = function $$proc() {
      var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil;

      TMP_5.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        self.$raise($scope.get('LocalJumpError'), "no block given")
      };
      return ($a = ($b = $scope.get('Kernel')).$proc, $a.$$p = (TMP_6 = function($c_rest){var self = TMP_6.$$s || this, args, $d, $e, TMP_7, instance = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
      ($d = ($e = args)['$map!'], $d.$$p = (TMP_7 = function(arg){var self = TMP_7.$$s || this;
if (arg == null) arg = nil;
        return self.$Native(arg)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $d).call($e);
        instance = self.$Native(this);
        
        // if global is current scope, run the block in the scope it was defined
        if (this === Opal.global) {
          return block.apply(self, args);
        }

        var self_ = block.$$s;
        block.$$s = null;

        try {
          return block.apply(instance, args);
        }
        finally {
          block.$$s = self_;
        }
      ;}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
    }, TMP_5.$$arity = 0);

    (function($base) {
      var $Helpers, self = $Helpers = $module($base, 'Helpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_14, TMP_17, TMP_18;

      Opal.defn(self, '$alias_native', TMP_11 = function $$alias_native(new$, $old, $kwargs) {
        var $a, $b, TMP_8, $c, TMP_9, $d, TMP_10, self = this, $post_args, as, old;

        $post_args = Opal.slice.call(arguments, 1, arguments.length);
        $kwargs = Opal.extract_kwargs($post_args);
        if ($kwargs == null || !$kwargs.$$is_hash) {
          if ($kwargs == null) {
            $kwargs = $hash2([], {});
          } else {
            throw Opal.ArgumentError.$new('expected kwargs');
          }
        }
        if ((as = $kwargs.$$smap['as']) == null) {
          as = nil
        }
        if (0 < $post_args.length) {
          old = $post_args.splice(0,1)[0];
        }
        if (old == null) {
          old = new$;
        }
        if ((($a = old['$end_with?']("=")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(value){var self = TMP_8.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          self["native"][old['$[]']($range(0, -2, false))] = $scope.get('Native').$convert(value);
            return value;}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b, new$)
        } else if (as !== false && as !== nil && as != null) {
          return ($a = ($c = self).$define_method, $a.$$p = (TMP_9 = function($d_rest){var self = TMP_9.$$s || this, block, args, $e, $f, $g, value = nil;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_9.$$p || nil, TMP_9.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          if ((($e = value = ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              return as.$new(value.$to_n())
              } else {
              return nil
            }}, TMP_9.$$s = self, TMP_9.$$arity = -1, TMP_9), $a).call($c, new$)
          } else {
          return ($a = ($d = self).$define_method, $a.$$p = (TMP_10 = function($e_rest){var self = TMP_10.$$s || this, block, args, $f, $g;
            if (self["native"] == null) self["native"] = nil;

            block = TMP_10.$$p || nil, TMP_10.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          return ($f = ($g = $scope.get('Native')).$call, $f.$$p = block.$to_proc(), $f).apply($g, [self["native"], old].concat(Opal.to_a(args)))}, TMP_10.$$s = self, TMP_10.$$arity = -1, TMP_10), $a).call($d, new$)
        };
      }, TMP_11.$$arity = -2);

      Opal.defn(self, '$native_reader', TMP_14 = function $$native_reader($a_rest) {
        var $b, $c, TMP_12, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_12 = function(name){var self = TMP_12.$$s || this, $a, $d, TMP_13;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;
            if (self["native"] == null) self["native"] = nil;

          return self.$Native(self["native"][name])}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($d, name)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $b).call($c);
      }, TMP_14.$$arity = -1);

      Opal.defn(self, '$native_writer', TMP_17 = function $$native_writer($a_rest) {
        var $b, $c, TMP_15, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = ($c = names).$each, $b.$$p = (TMP_15 = function(name){var self = TMP_15.$$s || this, $a, $d, TMP_16;
if (name == null) name = nil;
        return ($a = ($d = self).$define_method, $a.$$p = (TMP_16 = function(value){var self = TMP_16.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (value == null) value = nil;
          return self.$Native(self["native"][name] = value)}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $a).call($d, "" + (name) + "=")}, TMP_15.$$s = self, TMP_15.$$arity = 1, TMP_15), $b).call($c);
      }, TMP_17.$$arity = -1);

      Opal.defn(self, '$native_accessor', TMP_18 = function $$native_accessor($a_rest) {
        var $b, $c, self = this, names;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          names[$arg_idx - 0] = arguments[$arg_idx];
        }
        ($b = self).$native_reader.apply($b, Opal.to_a(names));
        return ($c = self).$native_writer.apply($c, Opal.to_a(names));
      }, TMP_18.$$arity = -1);
    })($scope.base);

    Opal.defs(self, '$included', TMP_19 = function $$included(klass) {
      var self = this;

      return klass.$extend($scope.get('Helpers'));
    }, TMP_19.$$arity = 1);

    Opal.defn(self, '$initialize', TMP_20 = function $$initialize(native$) {
      var $a, self = this;

      if ((($a = $scope.get('Kernel')['$native?'](native$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        $scope.get('Kernel').$raise($scope.get('ArgumentError'), "" + (native$.$inspect()) + " isn't native")
      };
      return self["native"] = native$;
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$to_n', TMP_21 = function $$to_n() {
      var self = this;
      if (self["native"] == null) self["native"] = nil;

      return self["native"];
    }, TMP_21.$$arity = 0);
  })($scope.base);
  (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_22, TMP_25, TMP_26;

    Opal.defn(self, '$native?', TMP_22 = function(value) {
      var self = this;

      return value == null || !value.$$class;
    }, TMP_22.$$arity = 1);

    Opal.defn(self, '$Native', TMP_25 = function $$Native(obj) {
      var $a, $b, TMP_23, $c, TMP_24, self = this;

      if ((($a = obj == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
      } else if ((($a = self['$native?'](obj)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('Native')).$$scope.get('Object')).$new(obj)
      } else if ((($a = obj['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = obj).$map, $a.$$p = (TMP_23 = function(o){var self = TMP_23.$$s || this;
if (o == null) o = nil;
        return self.$Native(o)}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b)
      } else if ((($a = obj['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = self).$proc, $a.$$p = (TMP_24 = function($d_rest){var self = TMP_24.$$s || this, block, args, $e, $f;

          block = TMP_24.$$p || nil, TMP_24.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        return self.$Native(($e = ($f = obj).$call, $e.$$p = block.$to_proc(), $e).apply($f, Opal.to_a(args)))}, TMP_24.$$s = self, TMP_24.$$arity = -1, TMP_24), $a).call($c)
        } else {
        return obj
      };
    }, TMP_25.$$arity = 1);

    self.$alias_method("_Array", "Array");

    Opal.defn(self, '$Array', TMP_26 = function $$Array(object, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_26.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_26.$$p = null;
      if ((($b = self['$native?'](object)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = (($scope.get('Native')).$$scope.get('Array'))).$new, $b.$$p = block.$to_proc(), $b).apply($c, [object].concat(Opal.to_a(args))).$to_a()};
      return self.$_Array(object);
    }, TMP_26.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_27, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_33, TMP_34, TMP_35, TMP_36, TMP_37, TMP_38, TMP_39, TMP_40, TMP_41;

    def["native"] = nil;
    self.$include(Opal.get('Native'));

    Opal.defn(self, '$==', TMP_27 = function(other) {
      var self = this;

      return self["native"] === $scope.get('Native').$try_convert(other);
    }, TMP_27.$$arity = 1);

    Opal.defn(self, '$has_key?', TMP_28 = function(name) {
      var self = this;

      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_28.$$arity = 1);

    Opal.alias(self, 'key?', 'has_key?');

    Opal.alias(self, 'include?', 'has_key?');

    Opal.alias(self, 'member?', 'has_key?');

    Opal.defn(self, '$each', TMP_29 = function $$each($a_rest) {
      var $b, self = this, args, $iter = TMP_29.$$p, $yield = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_29.$$p = null;
      if (($yield !== nil)) {
        
        for (var key in self["native"]) {
          Opal.yieldX($yield, [key, self["native"][key]])
        }
      ;
        return self;
        } else {
        return ($b = self).$method_missing.apply($b, ["each"].concat(Opal.to_a(args)))
      };
    }, TMP_29.$$arity = -1);

    Opal.defn(self, '$[]', TMP_30 = function(key) {
      var self = this;

      
      var prop = self["native"][key];

      if (prop instanceof Function) {
        return prop;
      }
      else {
        return Opal.get('Native').$call(self["native"], key)
      }
    ;
    }, TMP_30.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_31 = function(key, value) {
      var $a, self = this, native$ = nil;

      native$ = $scope.get('Native').$try_convert(value);
      if ((($a = native$ === nil) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][key] = value;
        } else {
        return self["native"][key] = native$;
      };
    }, TMP_31.$$arity = 2);

    Opal.defn(self, '$merge!', TMP_32 = function(other) {
      var self = this;

      
      other = $scope.get('Native').$convert(other);

      for (var prop in other) {
        self["native"][prop] = other[prop];
      }
    ;
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$respond_to?', TMP_33 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return $scope.get('Kernel').$instance_method("respond_to?").$bind(self).$call(name, include_all);
    }, TMP_33.$$arity = -2);

    Opal.defn(self, '$respond_to_missing?', TMP_34 = function(name, include_all) {
      var self = this;

      if (include_all == null) {
        include_all = false;
      }
      return Opal.hasOwnProperty.call(self["native"], name);
    }, TMP_34.$$arity = -2);

    Opal.defn(self, '$method_missing', TMP_35 = function $$method_missing(mid, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_35.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_35.$$p = null;
      
      if (mid.charAt(mid.length - 1) === '=') {
        return self['$[]='](mid.$slice(0, $rb_minus(mid.$length(), 1)), args['$[]'](0));
      }
      else {
        return ($b = ($c = Opal.get('Native')).$call, $b.$$p = block.$to_proc(), $b).apply($c, [self["native"], mid].concat(Opal.to_a(args)));
      }
    ;
    }, TMP_35.$$arity = -2);

    Opal.defn(self, '$nil?', TMP_36 = function() {
      var self = this;

      return false;
    }, TMP_36.$$arity = 0);

    Opal.defn(self, '$is_a?', TMP_37 = function(klass) {
      var self = this;

      return Opal.is_a(self, klass);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, 'kind_of?', 'is_a?');

    Opal.defn(self, '$instance_of?', TMP_38 = function(klass) {
      var self = this;

      return self.$$class === klass;
    }, TMP_38.$$arity = 1);

    Opal.defn(self, '$class', TMP_39 = function() {
      var self = this;

      return self.$$class;
    }, TMP_39.$$arity = 0);

    Opal.defn(self, '$to_a', TMP_40 = function $$to_a(options) {
      var $a, $b, self = this, $iter = TMP_40.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_40.$$p = null;
      return ($a = ($b = (($scope.get('Native')).$$scope.get('Array'))).$new, $a.$$p = block.$to_proc(), $a).call($b, self["native"], options).$to_a();
    }, TMP_40.$$arity = -1);

    return (Opal.defn(self, '$inspect', TMP_41 = function $$inspect() {
      var self = this;

      return "#<Native:" + (String(self["native"])) + ">";
    }, TMP_41.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), $scope.get('BasicObject'));
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_42, TMP_43, TMP_44, TMP_45, TMP_46, TMP_47, TMP_48;

    def.named = def["native"] = def.get = def.block = def.set = def.length = nil;
    self.$include($scope.get('Native'));

    self.$include($scope.get('Enumerable'));

    Opal.defn(self, '$initialize', TMP_42 = function $$initialize(native$, options) {
      var $a, $b, self = this, $iter = TMP_42.$$p, block = $iter || nil;

      if (options == null) {
        options = $hash2([], {});
      }
      TMP_42.$$p = null;
      ($a = ($b = self, Opal.find_super_dispatcher(self, 'initialize', TMP_42, false)), $a.$$p = null, $a).call($b, native$);
      self.get = ((($a = options['$[]']("get")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.named = options['$[]']("named");
      self.set = ((($a = options['$[]']("set")) !== false && $a !== nil && $a != null) ? $a : options['$[]']("access"));
      self.length = ((($a = options['$[]']("length")) !== false && $a !== nil && $a != null) ? $a : "length");
      self.block = block;
      if ((($a = self.$length() == null) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$raise($scope.get('ArgumentError'), "no length found on the array-like object")
        } else {
        return nil
      };
    }, TMP_42.$$arity = -2);

    Opal.defn(self, '$each', TMP_43 = function $$each() {
      var self = this, $iter = TMP_43.$$p, block = $iter || nil;

      TMP_43.$$p = null;
      if (block !== false && block !== nil && block != null) {
        } else {
        return self.$enum_for("each")
      };
      
      for (var i = 0, length = self.$length(); i < length; i++) {
        Opal.yield1(block, self['$[]'](i));
      }
    ;
      return self;
    }, TMP_43.$$arity = 0);

    Opal.defn(self, '$[]', TMP_44 = function(index) {
      var $a, self = this, result = nil, $case = nil;

      result = (function() {$case = index;if ($scope.get('String')['$===']($case) || $scope.get('Symbol')['$===']($case)) {if ((($a = self.named) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.named](index);
        } else {
        return self["native"][index];
      }}else if ($scope.get('Integer')['$===']($case)) {if ((($a = self.get) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.get](index);
        } else {
        return self["native"][index];
      }}else { return nil }})();
      if (result !== false && result !== nil && result != null) {
        if ((($a = self.block) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.block.$call(result)
          } else {
          return self.$Native(result)
        }
        } else {
        return nil
      };
    }, TMP_44.$$arity = 1);

    Opal.defn(self, '$[]=', TMP_45 = function(index, value) {
      var $a, self = this;

      if ((($a = self.set) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self["native"][self.set](index, $scope.get('Native').$convert(value));
        } else {
        return self["native"][index] = $scope.get('Native').$convert(value);
      };
    }, TMP_45.$$arity = 2);

    Opal.defn(self, '$last', TMP_46 = function $$last(count) {
      var $a, $b, self = this, index = nil, result = nil;

      if (count == null) {
        count = nil;
      }
      if (count !== false && count !== nil && count != null) {
        index = $rb_minus(self.$length(), 1);
        result = [];
        while ((($b = $rb_ge(index, 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        result['$<<'](self['$[]'](index));
        index = $rb_minus(index, 1);};
        return result;
        } else {
        return self['$[]']($rb_minus(self.$length(), 1))
      };
    }, TMP_46.$$arity = -1);

    Opal.defn(self, '$length', TMP_47 = function $$length() {
      var self = this;

      return self["native"][self.length];
    }, TMP_47.$$arity = 0);

    Opal.alias(self, 'to_ary', 'to_a');

    return (Opal.defn(self, '$inspect', TMP_48 = function $$inspect() {
      var self = this;

      return self.$to_a().$inspect();
    }, TMP_48.$$arity = 0), nil) && 'inspect';
  })($scope.get('Native'), null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_49;

    return (Opal.defn(self, '$to_n', TMP_49 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_49.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Proc(){};
    var self = $Proc = $klass($base, $super, 'Proc', $Proc);

    var def = self.$$proto, $scope = self.$$scope, TMP_50;

    return (Opal.defn(self, '$to_n', TMP_50 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_50.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_51;

    return (Opal.defn(self, '$to_n', TMP_51 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_51.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Regexp(){};
    var self = $Regexp = $klass($base, $super, 'Regexp', $Regexp);

    var def = self.$$proto, $scope = self.$$scope, TMP_52;

    return (Opal.defn(self, '$to_n', TMP_52 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_52.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $MatchData(){};
    var self = $MatchData = $klass($base, $super, 'MatchData', $MatchData);

    var def = self.$$proto, $scope = self.$$scope, TMP_53;

    def.matches = nil;
    return (Opal.defn(self, '$to_n', TMP_53 = function $$to_n() {
      var self = this;

      return self.matches;
    }, TMP_53.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Struct(){};
    var self = $Struct = $klass($base, $super, 'Struct', $Struct);

    var def = self.$$proto, $scope = self.$$scope, TMP_55;

    return (Opal.defn(self, '$to_n', TMP_55 = function $$to_n() {
      var $a, $b, TMP_54, self = this, result = nil;

      result = {};
      ($a = ($b = self).$each_pair, $a.$$p = (TMP_54 = function(name, value){var self = TMP_54.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
      return result[name] = $scope.get('Native').$try_convert(value, value);}, TMP_54.$$s = self, TMP_54.$$arity = 2, TMP_54), $a).call($b);
      return result;
    }, TMP_55.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_56;

    return (Opal.defn(self, '$to_n', TMP_56 = function $$to_n() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        var obj = self[i];

        result.push($scope.get('Native').$try_convert(obj, obj));
      }

      return result;
    
    }, TMP_56.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_57;

    return (Opal.defn(self, '$to_n', TMP_57 = function $$to_n() {
      var self = this;

      return self.valueOf();
    }, TMP_57.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_58;

    return (Opal.defn(self, '$to_n', TMP_58 = function $$to_n() {
      var self = this;

      return self;
    }, TMP_58.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_59;

    return (Opal.defn(self, '$to_n', TMP_59 = function $$to_n() {
      var self = this;

      return null;
    }, TMP_59.$$arity = 0), nil) && 'to_n'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_60, TMP_61;

    self.$alias_method("_initialize", "initialize");

    Opal.defn(self, '$initialize', TMP_60 = function $$initialize(defaults) {
      var $a, $b, self = this, $iter = TMP_60.$$p, block = $iter || nil;

      TMP_60.$$p = null;
      
      if (defaults != null && defaults.constructor === Object) {
        var smap = self.$$smap,
            keys = self.$$keys,
            key, value;

        for (key in defaults) {
          value = defaults[key];

          if (value && value.constructor === Object) {
            smap[key] = $scope.get('Hash').$new(value);
          } else if (value && value.$$is_array) {
            value = value.map(function(item) {
              if (item && item.constructor === Object) {
                return $scope.get('Hash').$new(item);
              }

              return item;
            });
            smap[key] = value
          } else {
            smap[key] = self.$Native(value);
          }

          keys.push(key);
        }

        return self;
      }

      return ($a = ($b = self).$_initialize, $a.$$p = block.$to_proc(), $a).call($b, defaults);
    
    }, TMP_60.$$arity = -1);

    return (Opal.defn(self, '$to_n', TMP_61 = function $$to_n() {
      var self = this;

      
      var result = {},
          keys = self.$$keys,
          smap = self.$$smap,
          key, value;

      for (var i = 0, length = keys.length; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = smap[key];
        } else {
          key = key.key;
          value = key.value;
        }

        result[key] = $scope.get('Native').$try_convert(value, value);
      }

      return result;
    
    }, TMP_61.$$arity = 0), nil) && 'to_n';
  })($scope.base, null);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_62;

    return (Opal.defn(self, '$native_module', TMP_62 = function $$native_module() {
      var self = this;

      return Opal.global[self.$name()] = self;
    }, TMP_62.$$arity = 0), nil) && 'native_module'
  })($scope.base, null);
  (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_63, TMP_64;

    Opal.defn(self, '$native_alias', TMP_63 = function $$native_alias(new_jsid, existing_mid) {
      var self = this;

      
      var aliased = self.$$proto['$' + existing_mid];
      if (!aliased) {
        self.$raise($scope.get('NameError').$new("undefined method `" + (existing_mid) + "' for class `" + (self.$inspect()) + "'", self.$exiting_mid()));
      }
      self.$$proto[new_jsid] = aliased;
    ;
    }, TMP_63.$$arity = 2);

    return (Opal.defn(self, '$native_class', TMP_64 = function $$native_class() {
      var self = this;

      self.$native_module();
      self["new"] = self.$new;
    }, TMP_64.$$arity = 0), nil) && 'native_class';
  })($scope.base, null);
  return $gvars.$ = $gvars.global = self.$Native(Opal.global);
};

/* Generated by Opal 0.10.5 */
Opal.modules["active_support/core_ext/object/try"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$empty?', '$respond_to?', '$first', '$try!', '$to_proc', '$zero?', '$arity', '$instance_eval', '$public_send']);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$try', TMP_1 = function($a_rest) {
      var $b, $c, self = this, a, $iter = TMP_1.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      if ((($b = ((($c = a['$empty?']()) !== false && $c !== nil && $c != null) ? $c : self['$respond_to?'](a.$first()))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        return ($b = ($c = self)['$try!'], $b.$$p = b.$to_proc(), $b).apply($c, Opal.to_a(a))
        } else {
        return nil
      };
    }, TMP_1.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_2 = function($a_rest) {
      var $b, $c, $d, self = this, a, $iter = TMP_2.$$p, b = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      a = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        a[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_2.$$p = null;
      if ((($b = ($c = a['$empty?'](), $c !== false && $c !== nil && $c != null ?(b !== nil) : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
        if ((($b = b.$arity()['$zero?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$instance_eval, $b.$$p = b.$to_proc(), $b).call($c)
          } else {
          return Opal.yield1(b, self);
        }
        } else {
        return ($b = ($d = self).$public_send, $b.$$p = b.$to_proc(), $b).apply($d, Opal.to_a(a))
      };
    }, TMP_2.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
  return (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_3, TMP_4;

    Opal.defn(self, '$try', TMP_3 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_3.$$arity = -1);

    return (Opal.defn(self, '$try!', TMP_4 = function($a_rest) {
      var self = this, args;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      return nil;
    }, TMP_4.$$arity = -1), nil) && 'try!';
  })($scope.base, null);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/tags"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$+', '$render', '$to_proc', '$each', '$define_method', '$==', '$count', '$is_a?', '$first', '$p', '$!=', '$alias_method', '$upcase', '$const_set', '$downcase', '$=~', '$include?', '$create_element', '$find_component', '$method_missing', '$find_name_and_parent', '$new', '$build_only', '$extend', '$private', '$name', '$split', '$>', '$length', '$last', '$[]', '$inject', '$const_get', '$lookup_const', '$!', '$method_defined?', '$raise', '$reverse', '$to_s', '$class', '$detect', '$const_defined?']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $Tags, self = $Tags = $module($base, 'Tags');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, $b, TMP_2, TMP_4, TMP_5, TMP_12, TMP_15;

        Opal.cdecl($scope, 'HTML_TAGS', $rb_plus(["a", "abbr", "address", "area", "article", "aside", "audio", "b", "base", "bdi", "bdo", "big", "blockquote", "body", "br", "button", "canvas", "caption", "cite", "code", "col", "colgroup", "data", "datalist", "dd", "del", "details", "dfn", "dialog", "div", "dl", "dt", "em", "embed", "fieldset", "figcaption", "figure", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hr", "html", "i", "iframe", "img", "input", "ins", "kbd", "keygen", "label", "legend", "li", "link", "main", "map", "mark", "menu", "menuitem", "meta", "meter", "nav", "noscript", "object", "ol", "optgroup", "option", "output", "p", "param", "picture", "pre", "progress", "q", "rp", "rt", "ruby", "s", "samp", "script", "section", "select", "small", "source", "span", "strong", "style", "sub", "summary", "sup", "table", "tbody", "td", "textarea", "tfoot", "th", "thead", "time", "title", "tr", "track", "u", "ul", "var", "video", "wbr"], ["circle", "clipPath", "defs", "ellipse", "g", "line", "linearGradient", "mask", "path", "pattern", "polygon", "polyline", "radialGradient", "rect", "stop", "svg", "text", "tspan"]));

        Opal.defn(self, '$present', TMP_1 = function $$present(component, $a_rest) {
          var $b, $c, self = this, params, $iter = TMP_1.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)));
        }, TMP_1.$$arity = -2);

        ($a = ($b = $scope.get('HTML_TAGS')).$each, $a.$$p = (TMP_2 = function(tag){var self = TMP_2.$$s || this, $c, $d, TMP_3;
if (tag == null) tag = nil;
        ($c = ($d = self).$define_method, $c.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, children, params, $f, $g, $h, $i;

            children = TMP_3.$$p || nil, TMP_3.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            params = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              params[$arg_idx - 0] = arguments[$arg_idx];
            }
          if (tag['$==']("p")) {
              if ((($f = ((($g = ((($h = children) !== false && $h !== nil && $h != null) ? $h : params.$count()['$=='](0))) !== false && $g !== nil && $g != null) ? $g : ((($h = params.$count()['$=='](1)) ? params.$first()['$is_a?']($scope.get('Hash')) : params.$count()['$=='](1))))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = children.$to_proc(), $f).apply($g, [tag].concat(Opal.to_a(params)))
                } else {
                return ($f = $scope.get('Kernel')).$p.apply($f, Opal.to_a(params))
              }
              } else {
              return ($h = ($i = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $h.$$p = children.$to_proc(), $h).apply($i, [tag].concat(Opal.to_a(params)))
            }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $c).call($d, tag);
          if ((($c = tag['$!=']("div")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            self.$alias_method(tag.$upcase(), tag);
            return self.$const_set(tag.$upcase(), tag);
            } else {
            return self.$alias_method(tag.$upcase(), tag)
          };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b);

        Opal.defs(self, '$html_tag_class_for', TMP_4 = function $$html_tag_class_for(tag) {
          var $a, $b, self = this, downcased_tag = nil;

          downcased_tag = tag.$downcase();
          if ((($a = ($b = tag['$=~'](/[A-Z]+/), $b !== false && $b !== nil && $b != null ?$scope.get('HTML_TAGS')['$include?'](downcased_tag) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $scope.get('Object').$const_set(tag, $scope.get('React').$create_element(downcased_tag))
            } else {
            return nil
          };
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$method_missing', TMP_5 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, self = this, params, $iter = TMP_5.$$p, children = $iter || nil, component = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          params = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            params[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_5.$$p = null;
          component = self.$find_component(name);
          if (component !== false && component !== nil && component != null) {
            return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).apply($c, [component].concat(Opal.to_a(params)))};
          return ($b = ($d = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($d, [name].concat(Opal.to_a(params)));
        }, TMP_5.$$arity = -2);

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_9, TMP_11;

          Opal.defn(self, '$included', TMP_9 = function $$included(component) {
            var $a, $b, TMP_6, self = this, name = nil, parent = nil, tag_names_module = nil;

            $b = self.$find_name_and_parent(component), $a = Opal.to_ary($b), name = ($a[0] == null ? nil : $a[0]), parent = ($a[1] == null ? nil : $a[1]), $b;
            tag_names_module = ($a = ($b = $scope.get('Module')).$new, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this, $c, $d, TMP_7, $e, TMP_8;

            ($c = ($d = self).$define_method, $c.$$p = (TMP_7 = function($e_rest){var self = TMP_7.$$s || this, children, params, $f, $g;

                children = TMP_7.$$p || nil, TMP_7.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($f = ($g = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = children.$to_proc(), $f).apply($g, [component].concat(Opal.to_a(params)))}, TMP_7.$$s = self, TMP_7.$$arity = -1, TMP_7), $c).call($d, name);
              return ($c = ($e = self).$define_method, $c.$$p = (TMP_8 = function($f_rest){var self = TMP_8.$$s || this, children, params, $g, $h;

                children = TMP_8.$$p || nil, TMP_8.$$p = null;
                var $args_len = arguments.length, $rest_len = $args_len - 0;
                if ($rest_len < 0) { $rest_len = 0; }
                params = new Array($rest_len);
                for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                  params[$arg_idx - 0] = arguments[$arg_idx];
                }
              return ($g = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$build_only, $g.$$p = children.$to_proc(), $g).apply($h, [component].concat(Opal.to_a(params)))}, TMP_8.$$s = self, TMP_8.$$arity = -1, TMP_8), $c).call($e, "" + (name) + "_as_node");}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($b);
            return parent.$extend(tag_names_module);
          }, TMP_9.$$arity = 1);
          self.$private();
          return (Opal.defn(self, '$find_name_and_parent', TMP_11 = function $$find_name_and_parent(component) {
            var $a, $b, TMP_10, self = this, split_name = nil;

            split_name = ($a = component.$name(), $a !== false && $a !== nil && $a != null ?component.$name().$split("::") : $a);
            if ((($a = (($b = split_name !== false && split_name !== nil && split_name != null) ? $rb_gt(split_name.$length(), 1) : split_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return [split_name.$last(), ($a = ($b = split_name).$inject, $a.$$p = (TMP_10 = function(a, e){var self = TMP_10.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
              return $rb_plus(a, [a.$last().$const_get(e)])}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $a).call($b, [$scope.get('Module')])['$[]'](-2)]
              } else {
              return nil
            };
          }, TMP_11.$$arity = 1), nil) && 'find_name_and_parent';
        })(Opal.get_singleton_class(self));

        self.$private();

        Opal.defn(self, '$find_component', TMP_12 = function $$find_component(name) {
          var $a, $b, self = this, component = nil;

          component = self.$lookup_const(name);
          if ((($a = (($b = component !== false && component !== nil && component != null) ? component['$method_defined?']("render")['$!']() : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$raise("" + (name) + " does not appear to be a react component.")};
          return component;
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$lookup_const', TMP_15 = function $$lookup_const(name) {
          var $a, $b, TMP_13, $c, TMP_14, self = this, scopes = nil, scope = nil;

          if ((($a = name['$=~'](/^[A-Z]/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          scopes = ($a = ($b = self.$class().$name().$to_s().$split("::")).$inject, $a.$$p = (TMP_13 = function(nesting, next_const){var self = TMP_13.$$s || this;
if (nesting == null) nesting = nil;if (next_const == null) next_const = nil;
          return $rb_plus(nesting, [nesting.$last().$const_get(next_const)])}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $a).call($b, [$scope.get('Module')]).$reverse();
          scope = ($a = ($c = scopes).$detect, $a.$$p = (TMP_14 = function(s){var self = TMP_14.$$s || this;
if (s == null) s = nil;
          return s['$const_defined?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($c);
          if (scope !== false && scope !== nil && scope != null) {
            return scope.$const_get(name)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$==', '$to_s', '$deprecation_warning', '$include']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Base(){};
        var self = $Base = $klass($base, $super, 'Base', $Base);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          if (child.$to_s()['$==']("React::Component::HyperTestDummy")) {
            } else {
            (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(child, "The class name React::Component::Base has been deprecated.  Use Hyperloop::Component instead.")
          };
          return child.$include($scope.get('ComponentNoNotice'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/top_level"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$+', '$create_element', '$to_proc', '$!', '$Native', '$to_n', '$raise', '$include', '$class', '$kind_of?', '$build']);
  self.$require("native");
  self.$require("active_support/core_ext/object/try");
  self.$require("react/component/tags");
  self.$require("react/component/base");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9, TMP_12, TMP_13;

    Opal.cdecl($scope, 'ATTRIBUTES', $rb_plus(["accept", "acceptCharset", "accessKey", "action", "allowFullScreen", "allowTransparency", "alt", "async", "autoComplete", "autoPlay", "cellPadding", "cellSpacing", "charSet", "checked", "classID", "className", "cols", "colSpan", "content", "contentEditable", "contextMenu", "controls", "coords", "crossOrigin", "data", "dateTime", "defer", "dir", "disabled", "download", "draggable", "encType", "form", "formAction", "formEncType", "formMethod", "formNoValidate", "formTarget", "frameBorder", "height", "hidden", "href", "hrefLang", "htmlFor", "httpEquiv", "icon", "id", "label", "lang", "list", "loop", "manifest", "marginHeight", "marginWidth", "max", "maxLength", "media", "mediaGroup", "method", "min", "multiple", "muted", "name", "noValidate", "open", "pattern", "placeholder", "poster", "preload", "radioGroup", "readOnly", "rel", "required", "role", "rows", "rowSpan", "sandbox", "scope", "scrolling", "seamless", "selected", "shape", "size", "sizes", "span", "spellCheck", "src", "srcDoc", "srcSet", "start", "step", "style", "tabIndex", "target", "title", "type", "useMap", "value", "width", "wmode", "dangerouslySetInnerHTML"], ["clipPath", "cx", "cy", "d", "dx", "dy", "fill", "fillOpacity", "fontFamily", "fontSize", "fx", "fy", "gradientTransform", "gradientUnits", "markerEnd", "markerMid", "markerStart", "offset", "opacity", "patternContentUnits", "patternUnits", "points", "preserveAspectRatio", "r", "rx", "ry", "spreadMethod", "stopColor", "stopOpacity", "stroke", "strokeDasharray", "strokeLinecap", "strokeOpacity", "strokeWidth", "textAnchor", "transform", "version", "viewBox", "x1", "x2", "x", "xlinkActuate", "xlinkArcrole", "xlinkHref", "xlinkRole", "xlinkShow", "xlinkTitle", "xlinkType", "xmlBase", "xmlLang", "xmlSpace", "y1", "y2", "y"]));

    Opal.cdecl($scope, 'HASH_ATTRIBUTES', ["data", "aria"]);

    Opal.cdecl($scope, 'HTML_TAGS', (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS')));

    Opal.defs(self, '$html_tag?', TMP_1 = function(name) {
      var self = this, tags = nil;

      tags = $scope.get('HTML_TAGS');
      
      for(var i = 0; i < tags.length; i++) {
        if(tags[i] === name)
          return true;
      }
      return false;
    
    }, TMP_1.$$arity = 1);

    Opal.defs(self, '$html_attr?', TMP_2 = function(name) {
      var self = this, attrs = nil;

      attrs = $scope.get('ATTRIBUTES');
      
      for(var i = 0; i < attrs.length; i++) {
        if(attrs[i] === name)
          return true;
      }
      return false;
    
    }, TMP_2.$$arity = 1);

    Opal.defs(self, '$create_element', TMP_3 = function $$create_element(type, properties) {
      var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

      if (properties == null) {
        properties = $hash2([], {});
      }
      TMP_3.$$p = null;
      return ($a = ($b = (($scope.get('React')).$$scope.get('API'))).$create_element, $a.$$p = block.$to_proc(), $a).call($b, type, properties);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$render', TMP_4 = function $$render(element, container) {
      var $a, self = this, $iter = TMP_4.$$p, $yield = $iter || nil, component = nil;

      TMP_4.$$p = null;
      
        console.error(
          "Warning: Using deprecated behavior of `React.render`,",
          "require \"react/top_level_render\" to get the correct behavior."
        );
    
      container = container.$$class ? container[0] : container;
      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(ReactDOM.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        component = self.$Native(React.render(element.$to_n(), container, function(){(function() {if (($yield !== nil)) {
          return Opal.yieldX($yield, []);
          } else {
          return nil
        }; return nil; })()}))
        } else {
        self.$raise("render is not defined.  In React >= v15 you must import it with ReactDOM")
      };
      component.$class().$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
      return component;
    }, TMP_4.$$arity = 2);

    Opal.defs(self, '$is_valid_element', TMP_5 = function $$is_valid_element(element) {
      var $a, self = this;

       console.error("Warning: `is_valid_element` is deprecated in favor of `is_valid_element?`."); 
      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil && $a != null ?React.isValidElement(element.$to_n()) : $a);
    }, TMP_5.$$arity = 1);

    Opal.defs(self, '$is_valid_element?', TMP_6 = function(element) {
      var $a, self = this;

      return ($a = element['$kind_of?']((($scope.get('React')).$$scope.get('Element'))), $a !== false && $a !== nil && $a != null ?React.isValidElement(element.$to_n()) : $a);
    }, TMP_6.$$arity = 1);

    Opal.defs(self, '$render_to_string', TMP_9 = function $$render_to_string(element) {
      var $a, $b, TMP_7, $c, TMP_8, self = this;

       console.error("Warning: `React.render_to_string` is deprecated in favor of `React::Server.render_to_string`."); 
      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

        return ReactDOMServer.renderToString(element.$to_n());}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

        return React.renderToString(element.$to_n());}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c)
        } else {
        return self.$raise("renderToString is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_9.$$arity = 1);

    Opal.defs(self, '$render_to_static_markup', TMP_12 = function $$render_to_static_markup(element) {
      var $a, $b, TMP_10, $c, TMP_11, self = this;

       console.error("Warning: `React.render_to_static_markup` is deprecated in favor of `React::Server.render_to_static_markup`."); 
      if ((($a = ((typeof ReactDOMServer === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

        return ReactDOMServer.renderToStaticMarkup(element.$to_n());}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($b)
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$build, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

        return React.renderToStaticMarkup(element.$to_n());}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($c)
        } else {
        return self.$raise("renderToStaticMarkup is not defined.  In React >= v15 you must import it with ReactDOMServer")
      };
    }, TMP_12.$$arity = 1);

    Opal.defs(self, '$unmount_component_at_node', TMP_13 = function $$unmount_component_at_node(node) {
      var $a, self = this;

      if ((($a = ((typeof ReactDOM === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ReactDOM.unmountComponentAtNode(node.$$class ? node[0] : node);
      } else if ((($a = ((typeof React.renderToString === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return React.unmountComponentAtNode(node.$$class ? node[0] : node);
        } else {
        return self.$raise("unmountComponentAtNode is not defined.  In React >= v15 you must import it with ReactDOM")
      };
    }, TMP_13.$$arity = 1);
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/observable"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$tap', '$call', '$send', '$to_proc', '$include?', '$respond_to?', '$lambda']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Observable(){};
      var self = $Observable = $klass($base, $super, 'Observable', $Observable);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_7;

      def.value = def.on_change = nil;
      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(value, on_change) {
        var $a, self = this, $iter = TMP_1.$$p, block = $iter || nil;

        if (on_change == null) {
          on_change = nil;
        }
        TMP_1.$$p = null;
        self.value = value;
        return self.on_change = ((($a = on_change) !== false && $a !== nil && $a != null) ? $a : block);
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$method_missing', TMP_2 = function $$method_missing(method_sym, $a_rest) {
        var $b, $c, TMP_3, $d, $e, self = this, args, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        return ($b = ($c = ($d = ($e = self.value).$send, $d.$$p = block.$to_proc(), $d).apply($e, [method_sym].concat(Opal.to_a(args)))).$tap, $b.$$p = (TMP_3 = function(result){var self = TMP_3.$$s || this;
          if (self.on_change == null) self.on_change = nil;
          if (self.value == null) self.value = nil;
if (result == null) result = nil;
        return self.on_change.$call(self.value)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
      }, TMP_2.$$arity = -2);

      Opal.defn(self, '$respond_to?', TMP_4 = function(method, $a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = ["call", "to_proc"]['$include?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return true
          } else {
          return ($b = self.value)['$respond_to?'].apply($b, [method].concat(Opal.to_a(args)))
        };
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$call', TMP_5 = function $$call(new_value) {
        var self = this;

        self.on_change.$call(new_value);
        return self.value = new_value;
      }, TMP_5.$$arity = 1);

      return (Opal.defn(self, '$to_proc', TMP_7 = function $$to_proc() {
        var $a, $b, TMP_6, self = this;

        return ($a = ($b = self).$lambda, $a.$$p = (TMP_6 = function(arg){var self = TMP_6.$$s || this;
          if (self.value == null) self.value = nil;
          if (self.on_change == null) self.on_change = nil;

          if (arg == null) {
            arg = self.value;
          }
        return self.on_change.$call(arg)}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($b);
      }, TMP_7.$$arity = 0), nil) && 'to_proc';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/validator"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$attr_accessor', '$attr_reader', '$private', '$new', '$build', '$to_proc', '$instance_eval', '$[]=', '$define_rule', '$allow_undefined_props=', '$reject', '$[]', '$rules', '$errors=', '$allow_undefined_props?', '$validate_undefined', '$coerce_native_hash_values', '$defined_props', '$validate_required', '$each', '$validate_types', '$validate_allowed', '$errors', '$inject', '$select', '$include?', '$keys', '$!', '$define_param', '$props_wrapper', '$is_a?', '$type_check', '$>', '$length', '$validate_value_array', '$nil?', '$respond_to?', '$_react_param_conversion', '$<<', '$-', '$each_with_index', '$Native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Validator(){};
      var self = $Validator = $klass($base, $super, 'Validator', $Validator);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_18, TMP_19, TMP_20, TMP_21, TMP_22, TMP_24, TMP_26, TMP_28, TMP_30;

      def.allow_undefined_props = def.rules = def.errors = nil;
      self.$attr_accessor("errors");

      self.$attr_reader("props_wrapper");

      self.$private("errors", "props_wrapper");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(props_wrapper) {
        var self = this;

        if (props_wrapper == null) {
          props_wrapper = $scope.get('Class').$new((($scope.get('Component')).$$scope.get('PropsWrapper')));
        }
        return self.props_wrapper = props_wrapper;
      }, TMP_1.$$arity = -1);

      Opal.defs(self, '$build', TMP_2 = function $$build() {
        var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

        TMP_2.$$p = null;
        return ($a = ($b = self.$new()).$build, $a.$$p = block.$to_proc(), $a).call($b);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$build', TMP_3 = function $$build() {
        var $a, $b, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        ($a = ($b = self).$instance_eval, $a.$$p = block.$to_proc(), $a).call($b);
        return self;
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$requires', TMP_4 = function $$requires(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", true);
        return self.$define_rule(name, options);
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$optional', TMP_5 = function $$optional(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        options['$[]=']("required", false);
        return self.$define_rule(name, options);
      }, TMP_5.$$arity = -2);

      Opal.defn(self, '$allow_undefined_props=', TMP_6 = function(allow) {
        var self = this;

        return self.allow_undefined_props = allow;
      }, TMP_6.$$arity = 1);

      Opal.defn(self, '$undefined_props', TMP_8 = function $$undefined_props(props) {
        var $a, $b, TMP_7, self = this;

        (($a = [true]), $b = self, $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
        return ($a = ($b = props).$reject, $a.$$p = (TMP_7 = function(name, value){var self = TMP_7.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        return self.$rules()['$[]'](name)}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $a).call($b);
      }, TMP_8.$$arity = 1);

      Opal.defn(self, '$validate', TMP_10 = function $$validate(props) {
        var $a, $b, TMP_9, self = this;

        (($a = [[]]), $b = self, $b['$errors='].apply($b, $a), $a[$a.length-1]);
        if ((($a = self['$allow_undefined_props?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$validate_undefined(props)
        };
        props = self.$coerce_native_hash_values(self.$defined_props(props));
        self.$validate_required(props);
        ($a = ($b = props).$each, $a.$$p = (TMP_9 = function(name, value){var self = TMP_9.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
        self.$validate_types(name, value);
          return self.$validate_allowed(name, value);}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $a).call($b);
        return self.$errors();
      }, TMP_10.$$arity = 1);

      Opal.defn(self, '$default_props', TMP_13 = function $$default_props() {
        var $a, $b, TMP_11, $c, $d, TMP_12, self = this;

        return ($a = ($b = ($c = ($d = self.$rules()).$select, $c.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return value.$keys()['$include?']("default")}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $c).call($d)).$inject, $a.$$p = (TMP_11 = function(memo, $c){var self = TMP_11.$$s || this, $c_args, k, v;

          if ($c == null) {
            $c = nil;
          }
          $c = Opal.to_ary($c);
          $c_args = Opal.slice.call($c, 0, $c.length);
          k = $c_args.splice(0,1)[0];
          if (k == null) {
            k = nil;
          }
          v = $c_args.splice(0,1)[0];
          if (v == null) {
            v = nil;
          }if (memo == null) memo = nil;
        memo['$[]='](k, v['$[]']("default"));
          return memo;}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11.$$has_top_level_mlhs_arg = true, TMP_11), $a).call($b, $hash2([], {}));
      }, TMP_13.$$arity = 0);

      self.$private();

      Opal.defn(self, '$defined_props', TMP_15 = function $$defined_props(props) {
        var $a, $b, TMP_14, self = this;

        return ($a = ($b = props).$select, $a.$$p = (TMP_14 = function(name){var self = TMP_14.$$s || this;
if (name == null) name = nil;
        return self.$rules().$keys()['$include?'](name)}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      }, TMP_15.$$arity = 1);

      Opal.defn(self, '$allow_undefined_props?', TMP_16 = function() {
        var self = this;

        return self.allow_undefined_props['$!']()['$!']();
      }, TMP_16.$$arity = 0);

      Opal.defn(self, '$rules', TMP_17 = function $$rules() {
        var $a, self = this;

        return ((($a = self.rules) !== false && $a !== nil && $a != null) ? $a : self.rules = $hash2(["children"], {"children": $hash2(["required"], {"required": false})}));
      }, TMP_17.$$arity = 0);

      Opal.defn(self, '$define_rule', TMP_18 = function $$define_rule(name, options) {
        var self = this;

        if (options == null) {
          options = $hash2([], {});
        }
        self.$rules()['$[]='](name, self.$coerce_native_hash_values(options));
        return self.$props_wrapper().$define_param(name, options['$[]']("type"));
      }, TMP_18.$$arity = -2);

      Opal.defn(self, '$errors', TMP_19 = function $$errors() {
        var $a, self = this;

        return ((($a = self.errors) !== false && $a !== nil && $a != null) ? $a : self.errors = []);
      }, TMP_19.$$arity = 0);

      Opal.defn(self, '$validate_types', TMP_20 = function $$validate_types(prop_name, value) {
        var $a, self = this, klass = nil, allow_nil = nil;

        if ((($a = klass = self.$rules()['$[]'](prop_name)['$[]']("type")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = klass['$is_a?']($scope.get('Array'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, klass, allow_nil);
        } else if ((($a = $rb_gt(klass.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$validate_value_array(prop_name, value)
          } else {
          allow_nil = self.$rules()['$[]'](prop_name)['$[]']("allow_nil")['$!']()['$!']();
          return self.$type_check("`" + (prop_name) + "`", value, $scope.get('Array'), allow_nil);
        };
      }, TMP_20.$$arity = 2);

      Opal.defn(self, '$type_check', TMP_21 = function $$type_check(prop_name, value, klass, allow_nil) {
        var $a, $b, self = this;

        if ((($a = (($b = allow_nil !== false && allow_nil !== nil && allow_nil != null) ? value['$nil?']() : allow_nil)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = value['$is_a?'](klass)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if ((($a = ($b = klass['$respond_to?']("_react_param_conversion"), $b !== false && $b !== nil && $b != null ?klass.$_react_param_conversion(value, "validate_only") : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Provided prop " + (prop_name) + " could not be converted to " + (klass));
      }, TMP_21.$$arity = 4);

      Opal.defn(self, '$validate_allowed', TMP_22 = function $$validate_allowed(prop_name, value) {
        var $a, self = this, values = nil;

        if ((($a = values = self.$rules()['$[]'](prop_name)['$[]']("values")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return nil
        };
        if ((($a = values['$include?'](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        return self.$errors()['$<<']("Value `" + (value) + "` for prop `" + (prop_name) + "` is not an allowed value");
      }, TMP_22.$$arity = 2);

      Opal.defn(self, '$validate_required', TMP_24 = function $$validate_required(props) {
        var $a, $b, TMP_23, self = this;

        return ($a = ($b = ($rb_minus(self.$rules().$keys(), props.$keys()))).$each, $a.$$p = (TMP_23 = function(name){var self = TMP_23.$$s || this, $c;
if (name == null) name = nil;
        if ((($c = self.$rules()['$[]'](name)['$[]']("required")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          };
          return self.$errors()['$<<']("Required prop `" + (name) + "` was not specified");}, TMP_23.$$s = self, TMP_23.$$arity = 1, TMP_23), $a).call($b);
      }, TMP_24.$$arity = 1);

      Opal.defn(self, '$validate_undefined', TMP_26 = function $$validate_undefined(props) {
        var $a, $b, TMP_25, self = this;

        return ($a = ($b = ($rb_minus(props.$keys(), self.$rules().$keys()))).$each, $a.$$p = (TMP_25 = function(prop_name){var self = TMP_25.$$s || this;
if (prop_name == null) prop_name = nil;
        return self.$errors()['$<<']("Provided prop `" + (prop_name) + "` not specified in spec")}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $a).call($b);
      }, TMP_26.$$arity = 1);

      Opal.defn(self, '$validate_value_array', TMP_28 = function $$validate_value_array(name, value) {
        var $a, $b, TMP_27, self = this, klass = nil, allow_nil = nil;

        try {
          klass = self.$rules()['$[]'](name)['$[]']("type");
          allow_nil = self.$rules()['$[]'](name)['$[]']("allow_nil")['$!']()['$!']();
          return ($a = ($b = value).$each_with_index, $a.$$p = (TMP_27 = function(item, index){var self = TMP_27.$$s || this;
if (item == null) item = nil;if (index == null) index = nil;
          return self.$type_check("`" + (name) + "`[" + (index) + "]", self.$Native(item), klass['$[]'](0), allow_nil)}, TMP_27.$$s = self, TMP_27.$$arity = 2, TMP_27), $a).call($b);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('NoMethodError')])) {
            try {
              return self.$errors()['$<<']("Provided prop `" + (name) + "` was not an Array")
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_28.$$arity = 2);

      return (Opal.defn(self, '$coerce_native_hash_values', TMP_30 = function $$coerce_native_hash_values(hash) {
        var $a, $b, TMP_29, self = this;

        return ($a = ($b = hash).$each, $a.$$p = (TMP_29 = function(key, value){var self = TMP_29.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
        return hash['$[]='](key, self.$Native(value))}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
      }, TMP_30.$$arity = 1), nil) && 'coerce_native_hash_values';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/ext/string"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  return (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$event_camelize', TMP_1 = function $$event_camelize() {
      var self = this;

      return self.replace(/(^|_)([^_]+)/g, function(match, pre, word, index) {
      var capitalize = true;
      return capitalize ? word.substr(0,1).toUpperCase()+word.substr(1) : word;
    });
    }, TMP_1.$$arity = 0), nil) && 'event_camelize'
  })($scope.base, null)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/ext/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$map']);
  return (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$shallow_to_n', TMP_2 = function $$shallow_to_n() {
      var $a, $b, TMP_1, self = this, hash = nil;

      hash = {};
      ($a = ($b = self).$map, $a.$$p = (TMP_1 = function(key, value){var self = TMP_1.$$s || this;
if (key == null) key = nil;if (value == null) value = nil;
      return hash[key] = value;}, TMP_1.$$s = self, TMP_1.$$arity = 2, TMP_1), $a).call($b);
      return hash;
    }, TMP_2.$$arity = 0), nil) && 'shallow_to_n'
  })($scope.base, null)
};

/* Generated by Opal 0.10.5 */
Opal.modules["active_support/core_ext/kernel/singleton_class"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$class_eval', '$to_proc', '$singleton_class']);
  return (function($base) {
    var $Kernel, self = $Kernel = $module($base, 'Kernel');

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    Opal.defn(self, '$class_eval', TMP_1 = function $$class_eval($a_rest) {
      var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 0] = arguments[$arg_idx];
      }
      TMP_1.$$p = null;
      return ($b = ($c = self.$singleton_class()).$class_eval, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args));
    }, TMP_1.$$arity = -1)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["active_support/core_ext/module/remove_method"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$method_defined?', '$private_method_defined?', '$undef_method', '$remove_possible_method', '$define_method', '$to_proc']);
  return (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

    Opal.defn(self, '$remove_possible_method', TMP_1 = function $$remove_possible_method(method) {
      var $a, $b, self = this;

      if ((($a = ((($b = self['$method_defined?'](method)) !== false && $b !== nil && $b != null) ? $b : self['$private_method_defined?'](method))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$undef_method(method)
        } else {
        return nil
      };
    }, TMP_1.$$arity = 1);

    return (Opal.defn(self, '$redefine_method', TMP_2 = function $$redefine_method(method) {
      var $a, $b, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      TMP_2.$$p = null;
      self.$remove_possible_method(method);
      return ($a = ($b = self).$define_method, $a.$$p = block.$to_proc(), $a).call($b, method);
    }, TMP_2.$$arity = 1), nil) && 'redefine_method';
  })($scope.base, null)
};

/* Generated by Opal 0.10.5 */
Opal.modules["active_support/core_ext/array/extract_options"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$instance_of?', '$is_a?', '$last', '$extractable_options?', '$pop']);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_1;

    return (Opal.defn(self, '$extractable_options?', TMP_1 = function() {
      var self = this;

      return self['$instance_of?']($scope.get('Hash'));
    }, TMP_1.$$arity = 0), nil) && 'extractable_options?'
  })($scope.base, null);
  return (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_2;

    return (Opal.defn(self, '$extract_options!', TMP_2 = function() {
      var $a, $b, self = this;

      if ((($a = ($b = self.$last()['$is_a?']($scope.get('Hash')), $b !== false && $b !== nil && $b != null ?self.$last()['$extractable_options?']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$pop()
        } else {
        return $hash2([], {})
      };
    }, TMP_2.$$arity = 0), nil) && 'extract_options!'
  })($scope.base, null);
};

/* Generated by Opal 0.10.5 */
Opal.modules["active_support/core_ext/class/attribute"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$extract_options!', '$fetch', '$each', '$define_singleton_method', '$!', '$public_send', '$class_eval', '$remove_possible_method', '$define_method', '$singleton_class', '$singleton_class?', '$instance_variable_defined?', '$instance_variable_get', '$send', '$class', '$attr_writer', '$private', '$respond_to?', '$!=', '$first', '$ancestors']);
  self.$require("active_support/core_ext/kernel/singleton_class");
  self.$require("active_support/core_ext/module/remove_method");
  self.$require("active_support/core_ext/array/extract_options");
  return (function($base, $super) {
    function $Class(){};
    var self = $Class = $klass($base, $super, 'Class', $Class);

    var def = self.$$proto, $scope = self.$$scope, TMP_11, $a, TMP_12;

    Opal.defn(self, '$class_attribute', TMP_11 = function $$class_attribute($a_rest) {
      var $b, $c, TMP_1, self = this, attrs, options = nil, instance_reader = nil, instance_writer = nil, instance_predicate = nil;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      attrs = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        attrs[$arg_idx - 0] = arguments[$arg_idx];
      }
      options = attrs['$extract_options!']();
      instance_reader = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_reader", true) : $b);
      instance_writer = ($b = options.$fetch("instance_accessor", true), $b !== false && $b !== nil && $b != null ?options.$fetch("instance_writer", true) : $b);
      instance_predicate = options.$fetch("instance_predicate", true);
      return ($b = ($c = attrs).$each, $b.$$p = (TMP_1 = function(name){var self = TMP_1.$$s || this, $a, $d, TMP_2, $e, TMP_3, $f, TMP_4, $g, TMP_9, $h, TMP_10, ivar = nil;
if (name == null) name = nil;
      ($a = ($d = self).$define_singleton_method, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return nil}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($d, name);
        if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
          ($a = ($e = self).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$public_send(name)['$!']()['$!']()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($e, "" + (name) + "?")};
        ivar = "@" + (name);
        ($a = ($f = self).$define_singleton_method, $a.$$p = (TMP_4 = function(val){var self = TMP_4.$$s || this, $g, $h, TMP_5, $i, TMP_7;
if (val == null) val = nil;
        ($g = ($h = self.$singleton_class()).$class_eval, $g.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $i, $j, TMP_6;

          self.$remove_possible_method(name);
            return ($i = ($j = self).$define_method, $i.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return val}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $i).call($j, name);}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $g).call($h);
          if ((($g = self['$singleton_class?']()) !== nil && $g != null && (!$g.$$is_boolean || $g == true))) {
            ($g = ($i = self).$class_eval, $g.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this, $j, $k, TMP_8;

            self.$remove_possible_method(name);
              return ($j = ($k = self).$define_method, $j.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $l;

              if ((($l = self['$instance_variable_defined?'](ivar)) !== nil && $l != null && (!$l.$$is_boolean || $l == true))) {
                  return self.$instance_variable_get(ivar)
                  } else {
                  return self.$singleton_class().$send(name)
                }}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $j).call($k, name);}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $g).call($i)};
          return val;}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $a).call($f, "" + (name) + "=");
        if (instance_reader !== false && instance_reader !== nil && instance_reader != null) {
          self.$remove_possible_method(name);
          ($a = ($g = self).$define_method, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $h;

          if ((($h = self['$instance_variable_defined?'](ivar)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
              return self.$instance_variable_get(ivar)
              } else {
              return self.$class().$public_send(name)
            }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($g, name);
          if (instance_predicate !== false && instance_predicate !== nil && instance_predicate != null) {
            ($a = ($h = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this;

            return self.$public_send(name)['$!']()['$!']()}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($h, "" + (name) + "?")};};
        if (instance_writer !== false && instance_writer !== nil && instance_writer != null) {
          return self.$attr_writer(name)
          } else {
          return nil
        };}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $b).call($c);
    }, TMP_11.$$arity = -1);

    self.$private();

    if ((($a = self['$respond_to?']("singleton_class?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (Opal.defn(self, '$singleton_class?', TMP_12 = function() {
        var $a, self = this;

        return ((($a = true) !== false && $a !== nil && $a != null) ? $a : self.$ancestors().$first()['$!='](self));
      }, TMP_12.$$arity = 0), nil) && 'singleton_class?'
    };
  })($scope.base, null);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/callbacks"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$each', '$is_a?', '$instance_exec', '$to_proc', '$send', '$callbacks_for', '$class', '$define_singleton_method', '$set_var', '$concat', '$push', '$+', '$respond_to?', '$superclass']);
  self.$require("hyperloop-config");
  (($scope.get('Hyperloop')).$$scope.get('Context'));
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Callbacks, self = $Callbacks = $module($base, 'Callbacks');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$run_callback', TMP_3 = function $$run_callback(name, $a_rest) {
        var $b, $c, TMP_2, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        return ($b = ($c = self.$class().$callbacks_for(name)).$each, $b.$$p = (TMP_2 = function(callback){var self = TMP_2.$$s || this, $a, $d;
if (callback == null) callback = nil;
        if ((($a = callback['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($d = self).$instance_exec, $a.$$p = callback.$to_proc(), $a).apply($d, Opal.to_a(args))
            } else {
            return ($a = self).$send.apply($a, [callback].concat(Opal.to_a(args)))
          }}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_3.$$arity = -2);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_8;

        Opal.defn(self, '$define_callback', TMP_7 = function $$define_callback(callback_name) {
          var $a, $b, TMP_4, $c, TMP_6, self = this, $iter = TMP_7.$$p, $yield = $iter || nil, wrapper_name = nil;

          TMP_7.$$p = null;
          wrapper_name = "_" + (callback_name) + "_callbacks";
          ($a = ($b = self).$define_singleton_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, $d, TMP_5;

          return ($c = ($d = (($scope.get('Hyperloop')).$$scope.get('Context'))).$set_var, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return []}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d, self, "@" + (wrapper_name), $hash2(["force"], {"force": true}))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b, wrapper_name);
          return ($a = ($c = self).$define_singleton_method, $a.$$p = (TMP_6 = function($d_rest){var self = TMP_6.$$s || this, block, args;

            block = TMP_6.$$p || nil, TMP_6.$$p = null;
            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          self.$send(wrapper_name).$concat(args);
            if ((block !== nil)) {
              return self.$send(wrapper_name).$push(block)
              } else {
              return nil
            };}, TMP_6.$$s = self, TMP_6.$$arity = -1, TMP_6), $a).call($c, callback_name);
        }, TMP_7.$$arity = 1);

        Opal.defn(self, '$callbacks_for', TMP_8 = function $$callbacks_for(callback_name) {
          var $a, self = this, wrapper_name = nil;

          wrapper_name = "_" + (callback_name) + "_callbacks";
          return $rb_plus((function() {if ((($a = self.$superclass()['$respond_to?']("callbacks_for")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$superclass().$callbacks_for(callback_name)
            } else {
            return []
          }; return nil; })(), self.$send(wrapper_name));
        }, TMP_8.$$arity = 1);
      })($scope.base);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/rendering_context"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$!', '$remove_nodes_from_args', '$build', '$waiting_on_resources', '$waiting_on_resources=', '$run_child_block', '$to_proc', '$nil?', '$dup', '$tap', '$detect', '$respond_to?', '$is_a?', '$last', '$create_element', '$span', '$to_s', '$<<', '$delete', '$include?', '$[]=', '$index', '$[]', '$each', '$as_node', '$try', '$empty?', '$!=', '$raise_render_error', '$==', '$count', '$improper_render', '$>', '$class', '$raise', '$define_method', '$unshift', '$send', '$render']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $RenderingContext(){};
      var self = $RenderingContext = $klass($base, $super, 'RenderingContext', $RenderingContext);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_8, TMP_9, TMP_10, TMP_11, TMP_13, TMP_14, TMP_15, TMP_16;

        self.$attr_accessor("waiting_on_resources");
        Opal.defn(self, '$render', TMP_1 = function $$render(name, $a_rest) {
          var $b, $c, TMP_2, $d, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, was_outer_most = nil, element = nil;
          if (self.not_outer_most == null) self.not_outer_most = nil;
          if (self.buffer == null) self.buffer = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          try {
          was_outer_most = self.not_outer_most['$!']();
          self.not_outer_most = true;
          self.$remove_nodes_from_args(args);
          if ((($b = self.buffer) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ((($b = self.buffer) !== false && $b !== nil && $b != null) ? $b : self.buffer = [])
          };
          if (block !== false && block !== nil && block != null) {
            element = ($b = ($c = self).$build, $b.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this, $a, $d, $e, TMP_3, $f, $g, TMP_5, TMP_6, $h, TMP_7, saved_waiting_on_resources = nil, buffer = nil;
              if (self.buffer == null) self.buffer = nil;

            saved_waiting_on_resources = self.$waiting_on_resources();
              (($a = [nil]), $d = self, $d['$waiting_on_resources='].apply($d, $a), $a[$a.length-1]);
              ($a = ($d = self).$run_child_block, $a.$$p = block.$to_proc(), $a).call($d, name['$nil?']());
              if (name !== false && name !== nil && name != null) {
                buffer = self.buffer.$dup();
                return ($a = ($e = ($f = ($g = $scope.get('React')).$create_element, $f.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

                return buffer}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $f).apply($g, [name].concat(Opal.to_a(args)))).$tap, $a.$$p = (TMP_3 = function(element){var self = TMP_3.$$s || this, $f, $g, $h, $i, $j, TMP_4;
if (element == null) element = nil;
                (($f = [((($h = saved_waiting_on_resources) !== false && $h !== nil && $h != null) ? $h : ($i = ($j = buffer).$detect, $i.$$p = (TMP_4 = function(e){var self = TMP_4.$$s || this, $k;
if (e == null) e = nil;
                  if ((($k = e['$respond_to?']("waiting_on_resources")) !== nil && $k != null && (!$k.$$is_boolean || $k == true))) {
                      return e.$waiting_on_resources()
                      } else {
                      return nil
                    }}, TMP_4.$$s = self, TMP_4.$$arity = 1, TMP_4), $i).call($j)['$!']()['$!']())]), $g = element, $g['$waiting_on_resources='].apply($g, $f), $f[$f.length-1]);
                  return ($f = element, ((($g = $f.$waiting_on_resources()) !== false && $g !== nil && $g != null) ? $g : $f['$waiting_on_resources='](($h = buffer.$last()['$is_a?']($scope.get('String')), $h !== false && $h !== nil && $h != null ?self.$waiting_on_resources() : $h))));}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($e);
              } else if ((($a = self.buffer.$last()['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($f = self.buffer.$last()).$tap, $a.$$p = (TMP_6 = function(element){var self = TMP_6.$$s || this, $h, $i;
if (element == null) element = nil;
                return ($h = element, ((($i = $h.$waiting_on_resources()) !== false && $i !== nil && $i != null) ? $i : $h['$waiting_on_resources='](saved_waiting_on_resources)))}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($f)
                } else {
                return ($a = ($h = self.buffer.$last().$to_s().$span()).$tap, $a.$$p = (TMP_7 = function(element){var self = TMP_7.$$s || this, $i, $j;
if (element == null) element = nil;
                return (($i = [saved_waiting_on_resources]), $j = element, $j['$waiting_on_resources='].apply($j, $i), $i[$i.length-1])}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($h)
              };}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $b).call($c)
          } else if ((($b = name['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            element = name
            } else {
            element = ($b = $scope.get('React')).$create_element.apply($b, [name].concat(Opal.to_a(args)));
            (($d = [self.$waiting_on_resources()]), $e = element, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          };
          self.buffer['$<<'](element);
          (($d = [nil]), $e = self, $e['$waiting_on_resources='].apply($e, $d), $d[$d.length-1]);
          return element;
          } finally {
            if (was_outer_most !== false && was_outer_most !== nil && was_outer_most != null) {
              self.not_outer_most = self.buffer = nil}
          };
        }, TMP_1.$$arity = -2);
        Opal.defn(self, '$build', TMP_8 = function $$build() {
          var self = this, $iter = TMP_8.$$p, $yield = $iter || nil, current = nil, return_val = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_8.$$p = null;
          current = self.buffer;
          self.buffer = [];
          return_val = Opal.yield1($yield, self.buffer);
          self.buffer = current;
          return return_val;
        }, TMP_8.$$arity = 0);
        Opal.defn(self, '$as_node', TMP_9 = function $$as_node(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          self.buffer.$delete(element);
          return element;
        }, TMP_9.$$arity = 1);
        Opal.alias(self, 'delete', 'as_node');
        Opal.defn(self, '$rendered?', TMP_10 = function(element) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$include?'](element);
        }, TMP_10.$$arity = 1);
        Opal.defn(self, '$replace', TMP_11 = function $$replace(e1, e2) {
          var self = this;
          if (self.buffer == null) self.buffer = nil;

          return self.buffer['$[]='](self.buffer.$index(e1), e2);
        }, TMP_11.$$arity = 2);
        Opal.defn(self, '$remove_nodes_from_args', TMP_13 = function $$remove_nodes_from_args(args) {
          var $a, $b, TMP_12, self = this;

          if ((($a = ($b = args['$[]'](0), $b !== false && $b !== nil && $b != null ?args['$[]'](0)['$is_a?']($scope.get('Hash')) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = args['$[]'](0)).$each, $a.$$p = (TMP_12 = function(key, value){var self = TMP_12.$$s || this, $c;
if (key == null) key = nil;if (value == null) value = nil;
            try {
                if ((($c = value['$is_a?']($scope.get('Element'))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                  return value.$as_node()
                  } else {
                  return nil
                }
              } catch ($err) {
                if (Opal.rescue($err, [$scope.get('Exception')])) {
                  try {
                    return nil
                  } finally { Opal.pop_exception() }
                } else { throw $err; }
              }}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $a).call($b)
            } else {
            return nil
          };
        }, TMP_13.$$arity = 1);
        Opal.defn(self, '$run_child_block', TMP_14 = function $$run_child_block(is_outer_scope) {
          var $a, $b, $c, self = this, $iter = TMP_14.$$p, $yield = $iter || nil, result = nil;
          if (self.buffer == null) self.buffer = nil;

          TMP_14.$$p = null;
          result = Opal.yieldX($yield, []);
          if ((($a = result.$try(((($b = "acts_as_string?") !== false && $b !== nil && $b != null) ? $b : result['$is_a?']($scope.get('String'))))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            result = result.$to_s().$span()};
          if ((($a = ((($b = result['$is_a?']($scope.get('String'))) !== false && $b !== nil && $b != null) ? $b : (($c = result['$is_a?']((($scope.get('React')).$$scope.get('Element'))), $c !== false && $c !== nil && $c != null ?self.buffer['$empty?']() : $c)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.buffer['$<<'](result)};
          if ((($a = (($b = is_outer_scope !== false && is_outer_scope !== nil && is_outer_scope != null) ? self.buffer['$!=']([result]) : is_outer_scope)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$raise_render_error(result)
            } else {
            return nil
          };
        }, TMP_14.$$arity = 1);
        Opal.defn(self, '$raise_render_error', TMP_15 = function $$raise_render_error(result) {
          var $a, self = this;
          if (self.buffer == null) self.buffer = nil;

          if (self.buffer.$count()['$=='](1)) {
            self.$improper_render("A different element was returned than was generated within the DSL.", "Possibly improper use of Element#delete.")};
          if ((($a = $rb_gt(self.buffer.$count(), 1)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead " + (self.buffer.$count()) + " elements were generated.", "Do you want to wrap your elements in a div?")};
          if ((($a = result.$try("reactrb_component?")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$improper_render("Instead the component " + (result) + " was returned.", "Did you mean " + (result) + "()?")};
          return self.$improper_render("Instead the " + (result.$class()) + " " + (result) + " was returned.", "You may need to convert this to a string.");
        }, TMP_15.$$arity = 1);
        return (Opal.defn(self, '$improper_render', TMP_16 = function $$improper_render(message, solution) {
          var self = this;

          return self.$raise("a component's render method must generate and return exactly 1 element or a string.\n" + ("    " + (message) + "  " + (solution)));
        }, TMP_16.$$arity = 2), nil) && 'improper_render';
      })(Opal.get_singleton_class(self))
    })($scope.base, null);

    (function($base, $super) {
      function $Object(){};
      var self = $Object = $klass($base, $super, 'Object', $Object);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_17, TMP_20, TMP_23;

      ($a = ($b = ["span", "td", "th", "while_loading"]).$each, $a.$$p = (TMP_17 = function(tag){var self = TMP_17.$$s || this, $c, $d, TMP_18;
if (tag == null) tag = nil;
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_18 = function($e_rest){var self = TMP_18.$$s || this, block, args, $f, $g, $h, TMP_19;

          block = TMP_18.$$p || nil, TMP_18.$$p = null;
          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
        args.$unshift(tag);
          if ((($f = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
            return ($f = ($g = self).$send, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))};
          return ($f = ($h = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $f.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this;

          return self.$to_s()}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $f).apply($h, Opal.to_a(args));}, TMP_18.$$s = self, TMP_18.$$arity = -1, TMP_18), $c).call($d, tag)}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);

      Opal.defn(self, '$para', TMP_20 = function $$para($a_rest) {
        var $b, $c, $d, TMP_21, self = this, args, $iter = TMP_20.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_20.$$p = null;
        args.$unshift("p");
        if ((($b = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self).$send, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args))};
        return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this;

        return self.$to_s()}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $b).apply($d, Opal.to_a(args));
      }, TMP_20.$$arity = -1);

      return (Opal.defn(self, '$br', TMP_23 = function $$br() {
        var $a, $b, TMP_22, self = this;

        if ((($a = self['$is_a?']((($scope.get('React')).$$scope.get('Component')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return self.$send("br")};
        return ($a = ($b = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $a.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this;

        (($scope.get('React')).$$scope.get('RenderingContext')).$render(self.$to_s());
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render("br");}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $a).call($b, "span");
      }, TMP_23.$$arity = 0), nil) && 'br';
    })(Opal.Object, null);
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["set"] = function(Opal) {
  function $rb_lt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs < rhs : lhs['$<'](rhs);
  }
  function $rb_le(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs <= rhs : lhs['$<='](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass, $module = Opal.module;

  Opal.add_stubs(['$include', '$new', '$nil?', '$===', '$raise', '$each', '$add', '$call', '$merge', '$class', '$respond_to?', '$subtract', '$dup', '$join', '$to_a', '$equal?', '$instance_of?', '$==', '$instance_variable_get', '$is_a?', '$size', '$all?', '$include?', '$[]=', '$enum_for', '$[]', '$<<', '$replace', '$delete', '$select', '$each_key', '$to_proc', '$empty?', '$eql?', '$instance_eval', '$clear', '$<', '$<=', '$keys']);
  (function($base, $super) {
    function $Set(){};
    var self = $Set = $klass($base, $super, 'Set', $Set);

    var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_8, TMP_9, TMP_10, TMP_13, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_22, TMP_24, TMP_25, TMP_26, TMP_28, TMP_29, TMP_30, TMP_32, TMP_33, TMP_35, TMP_37, TMP_39, TMP_41, TMP_42;

    def.hash = nil;
    self.$include($scope.get('Enumerable'));

    Opal.defs(self, '$[]', TMP_1 = function($a_rest) {
      var self = this, ary;

      var $args_len = arguments.length, $rest_len = $args_len - 0;
      if ($rest_len < 0) { $rest_len = 0; }
      ary = new Array($rest_len);
      for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
        ary[$arg_idx - 0] = arguments[$arg_idx];
      }
      return self.$new(ary);
    }, TMP_1.$$arity = -1);

    Opal.defn(self, '$initialize', TMP_2 = function $$initialize(enum$) {
      var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil;

      if (enum$ == null) {
        enum$ = nil;
      }
      TMP_2.$$p = null;
      self.hash = $scope.get('Hash').$new();
      if ((($a = enum$['$nil?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil};
      if ((($a = $scope.get('Enumerable')['$==='](enum$)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      if (block !== false && block !== nil && block != null) {
        return ($a = ($b = enum$).$each, $a.$$p = (TMP_3 = function(item){var self = TMP_3.$$s || this;
if (item == null) item = nil;
        return self.$add(block.$call(item))}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b)
        } else {
        return self.$merge(enum$)
      };
    }, TMP_2.$$arity = -1);

    Opal.defn(self, '$dup', TMP_4 = function $$dup() {
      var self = this, result = nil;

      result = self.$class().$new();
      return result.$merge(self);
    }, TMP_4.$$arity = 0);

    Opal.defn(self, '$-', TMP_5 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$subtract(enum$);
    }, TMP_5.$$arity = 1);

    Opal.alias(self, 'difference', '-');

    Opal.defn(self, '$inspect', TMP_6 = function $$inspect() {
      var self = this;

      return "#<Set: {" + (self.$to_a().$join(",")) + "}>";
    }, TMP_6.$$arity = 0);

    Opal.defn(self, '$==', TMP_8 = function(other) {
      var $a, $b, TMP_7, self = this;

      if ((($a = self['$equal?'](other)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return true
      } else if ((($a = other['$instance_of?'](self.$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.hash['$=='](other.$instance_variable_get("@hash"))
      } else if ((($a = ($b = other['$is_a?']($scope.get('Set')), $b !== false && $b !== nil && $b != null ?self.$size()['$=='](other.$size()) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return ($a = ($b = other)['$all?'], $a.$$p = (TMP_7 = function(o){var self = TMP_7.$$s || this;
          if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
        return self.hash['$include?'](o)}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b)
        } else {
        return false
      };
    }, TMP_8.$$arity = 1);

    Opal.defn(self, '$add', TMP_9 = function $$add(o) {
      var self = this;

      self.hash['$[]='](o, true);
      return self;
    }, TMP_9.$$arity = 1);

    Opal.alias(self, '<<', 'add');

    Opal.defn(self, '$classify', TMP_10 = function $$classify() {
      var $a, $b, TMP_11, $c, TMP_12, self = this, $iter = TMP_10.$$p, block = $iter || nil, result = nil;

      TMP_10.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("classify")
      };
      result = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_11 = function(h, k){var self = TMP_11.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
      return h['$[]='](k, self.$class().$new())}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $a).call($b);
      ($a = ($c = self).$each, $a.$$p = (TMP_12 = function(item){var self = TMP_12.$$s || this;
if (item == null) item = nil;
      return result['$[]'](Opal.yield1(block, item)).$add(item)}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $a).call($c);
      return result;
    }, TMP_10.$$arity = 0);

    Opal.defn(self, '$collect!', TMP_13 = function() {
      var $a, $b, TMP_14, self = this, $iter = TMP_13.$$p, block = $iter || nil, result = nil;

      TMP_13.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("collect!")
      };
      result = self.$class().$new();
      ($a = ($b = self).$each, $a.$$p = (TMP_14 = function(item){var self = TMP_14.$$s || this;
if (item == null) item = nil;
      return result['$<<'](Opal.yield1(block, item))}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
      return self.$replace(result);
    }, TMP_13.$$arity = 0);

    Opal.alias(self, 'map!', 'collect!');

    Opal.defn(self, '$delete', TMP_15 = function(o) {
      var self = this;

      self.hash.$delete(o);
      return self;
    }, TMP_15.$$arity = 1);

    Opal.defn(self, '$delete?', TMP_16 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        self.$delete(o);
        return self;
        } else {
        return nil
      };
    }, TMP_16.$$arity = 1);

    Opal.defn(self, '$delete_if', TMP_17 = function $$delete_if() {try {

      var $a, $b, TMP_18, $c, $d, TMP_19, self = this, $iter = TMP_17.$$p, $yield = $iter || nil;

      TMP_17.$$p = null;
      ((($a = ($yield !== nil)) !== false && $a !== nil && $a != null) ? $a : Opal.ret(self.$enum_for("delete_if")));
      ($a = ($b = ($c = ($d = self).$select, $c.$$p = (TMP_19 = function(o){var self = TMP_19.$$s || this;
if (o == null) o = nil;
      return Opal.yield1($yield, o);}, TMP_19.$$s = self, TMP_19.$$arity = 1, TMP_19), $c).call($d)).$each, $a.$$p = (TMP_18 = function(o){var self = TMP_18.$$s || this;
        if (self.hash == null) self.hash = nil;
if (o == null) o = nil;
      return self.hash.$delete(o)}, TMP_18.$$s = self, TMP_18.$$arity = 1, TMP_18), $a).call($b);
      return self;
      } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
    }, TMP_17.$$arity = 0);

    Opal.defn(self, '$add?', TMP_20 = function(o) {
      var $a, self = this;

      if ((($a = self['$include?'](o)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return self.$add(o)
      };
    }, TMP_20.$$arity = 1);

    Opal.defn(self, '$each', TMP_21 = function $$each() {
      var $a, $b, self = this, $iter = TMP_21.$$p, block = $iter || nil;

      TMP_21.$$p = null;
      if ((block !== nil)) {
        } else {
        return self.$enum_for("each")
      };
      ($a = ($b = self.hash).$each_key, $a.$$p = block.$to_proc(), $a).call($b);
      return self;
    }, TMP_21.$$arity = 0);

    Opal.defn(self, '$empty?', TMP_22 = function() {
      var self = this;

      return self.hash['$empty?']();
    }, TMP_22.$$arity = 0);

    Opal.defn(self, '$eql?', TMP_24 = function(other) {
      var $a, $b, TMP_23, self = this;

      return self.hash['$eql?'](($a = ($b = other).$instance_eval, $a.$$p = (TMP_23 = function(){var self = TMP_23.$$s || this;
        if (self.hash == null) self.hash = nil;

      return self.hash}, TMP_23.$$s = self, TMP_23.$$arity = 0, TMP_23), $a).call($b));
    }, TMP_24.$$arity = 1);

    Opal.defn(self, '$clear', TMP_25 = function $$clear() {
      var self = this;

      self.hash.$clear();
      return self;
    }, TMP_25.$$arity = 0);

    Opal.defn(self, '$include?', TMP_26 = function(o) {
      var self = this;

      return self.hash['$include?'](o);
    }, TMP_26.$$arity = 1);

    Opal.alias(self, 'member?', 'include?');

    Opal.defn(self, '$merge', TMP_28 = function $$merge(enum$) {
      var $a, $b, TMP_27, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_27 = function(item){var self = TMP_27.$$s || this;
if (item == null) item = nil;
      return self.$add(item)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $a).call($b);
      return self;
    }, TMP_28.$$arity = 1);

    Opal.defn(self, '$replace', TMP_29 = function $$replace(enum$) {
      var self = this;

      self.$clear();
      self.$merge(enum$);
      return self;
    }, TMP_29.$$arity = 1);

    Opal.defn(self, '$size', TMP_30 = function $$size() {
      var self = this;

      return self.hash.$size();
    }, TMP_30.$$arity = 0);

    Opal.alias(self, 'length', 'size');

    Opal.defn(self, '$subtract', TMP_32 = function $$subtract(enum$) {
      var $a, $b, TMP_31, self = this;

      ($a = ($b = enum$).$each, $a.$$p = (TMP_31 = function(item){var self = TMP_31.$$s || this;
if (item == null) item = nil;
      return self.$delete(item)}, TMP_31.$$s = self, TMP_31.$$arity = 1, TMP_31), $a).call($b);
      return self;
    }, TMP_32.$$arity = 1);

    Opal.defn(self, '$|', TMP_33 = function(enum$) {
      var $a, self = this;

      if ((($a = enum$['$respond_to?']("each")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        self.$raise($scope.get('ArgumentError'), "value must be enumerable")
      };
      return self.$dup().$merge(enum$);
    }, TMP_33.$$arity = 1);

    Opal.defn(self, '$superset?', TMP_35 = function(set) {
      var $a, $b, TMP_34, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_34 = function(o){var self = TMP_34.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_34.$$s = self, TMP_34.$$arity = 1, TMP_34), $a).call($b);
    }, TMP_35.$$arity = 1);

    Opal.alias(self, '>=', 'superset?');

    Opal.defn(self, '$proper_superset?', TMP_37 = function(set) {
      var $a, $b, TMP_36, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(self.$size(), set.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = set)['$all?'], $a.$$p = (TMP_36 = function(o){var self = TMP_36.$$s || this;
if (o == null) o = nil;
      return self['$include?'](o)}, TMP_36.$$s = self, TMP_36.$$arity = 1, TMP_36), $a).call($b);
    }, TMP_37.$$arity = 1);

    Opal.alias(self, '>', 'proper_superset?');

    Opal.defn(self, '$subset?', TMP_39 = function(set) {
      var $a, $b, TMP_38, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_lt(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_38 = function(o){var self = TMP_38.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_38.$$s = self, TMP_38.$$arity = 1, TMP_38), $a).call($b);
    }, TMP_39.$$arity = 1);

    Opal.alias(self, '<=', 'subset?');

    Opal.defn(self, '$proper_subset?', TMP_41 = function(set) {
      var $a, $b, TMP_40, self = this;

      ((($a = set['$is_a?']($scope.get('Set'))) !== false && $a !== nil && $a != null) ? $a : self.$raise($scope.get('ArgumentError'), "value must be a set"));
      if ((($a = $rb_le(set.$size(), self.$size())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return false};
      return ($a = ($b = self)['$all?'], $a.$$p = (TMP_40 = function(o){var self = TMP_40.$$s || this;
if (o == null) o = nil;
      return set['$include?'](o)}, TMP_40.$$s = self, TMP_40.$$arity = 1, TMP_40), $a).call($b);
    }, TMP_41.$$arity = 1);

    Opal.alias(self, '<', 'proper_subset?');

    Opal.alias(self, '+', '|');

    Opal.alias(self, 'union', '|');

    return (Opal.defn(self, '$to_a', TMP_42 = function $$to_a() {
      var self = this;

      return self.hash.$keys();
    }, TMP_42.$$arity = 0), nil) && 'to_a';
  })($scope.base, null);
  return (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_43;

    Opal.defn(self, '$to_set', TMP_43 = function $$to_set(klass, $a_rest) {
      var $b, $c, self = this, args, $iter = TMP_43.$$p, block = $iter || nil;

      if (klass == null) {
        klass = $scope.get('Set');
      }
      var $args_len = arguments.length, $rest_len = $args_len - 1;
      if ($rest_len < 0) { $rest_len = 0; }
      args = new Array($rest_len);
      for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
        args[$arg_idx - 1] = arguments[$arg_idx];
      }
      TMP_43.$$p = null;
      return ($b = ($c = klass).$new, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)));
    }, TMP_43.$$arity = -1)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$attr_accessor', '$>', '$count', '$define_state_methods', '$to_proc', '$class_state_wrapper', '$__state_wrapper', '$singleton_class', '$new', '$class_mutator_wrapper']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5;

      self.$attr_accessor("__shared_states", "__class_states", "__instance_states");

      Opal.defn(self, '$state', TMP_1 = function $$state($a_rest) {
        var $b, $c, self = this, args, $iter = TMP_1.$$p, block = $iter || nil;
        if (self.state == null) self.state = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        if ((($b = $rb_gt(args.$count(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ($b = ($c = self.$singleton_class().$__state_wrapper().$class_state_wrapper()).$define_state_methods, $b.$$p = block.$to_proc(), $b).apply($c, [self].concat(Opal.to_a(args)))
          } else {
          return ((($b = self.state) !== false && $b !== nil && $b != null) ? $b : self.state = self.$singleton_class().$__state_wrapper().$class_state_wrapper().$new(self))
        };
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$mutate', TMP_2 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return ((($a = self.mutate) !== false && $a !== nil && $a != null) ? $a : self.mutate = self.$singleton_class().$__state_wrapper().$class_mutator_wrapper().$new(self));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$__shared_states', TMP_3 = function $$__shared_states() {
        var $a, self = this;
        if (self.__shared_states == null) self.__shared_states = nil;

        return ((($a = self.__shared_states) !== false && $a !== nil && $a != null) ? $a : self.__shared_states = []);
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$__class_states', TMP_4 = function $$__class_states() {
        var $a, self = this;
        if (self.__class_states == null) self.__class_states = nil;

        return ((($a = self.__class_states) !== false && $a !== nil && $a != null) ? $a : self.__class_states = []);
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$__instance_states', TMP_5 = function $$__instance_states() {
        var $a, self = this;
        if (self.__instance_states == null) self.__instance_states = nil;

        return ((($a = self.__instance_states) !== false && $a !== nil && $a != null) ? $a : self.__instance_states = []);
      }, TMP_5.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/dispatch_receiver"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_accessor', '$format_callback', '$empty?', '$raise', '$each', '$on_dispatch', '$call', '$private', '$is_a?', '$last', '$pop', '$lambda', '$send', '$to_s']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $DispatchReceiver, self = $DispatchReceiver = $module($base, 'DispatchReceiver');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_5;

      (function($base, $super) {
        function $InvalidOperationError(){};
        var self = $InvalidOperationError = $klass($base, $super, 'InvalidOperationError', $InvalidOperationError);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, $scope.get('StandardError'));

      self.$attr_accessor("params");

      Opal.defn(self, '$receives', TMP_1 = function $$receives($a_rest) {
        var $b, $c, TMP_2, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, callback = nil, message = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_1.$$p = null;
        callback = self.$format_callback(args);
        if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          message = "At least one operation must be passed in to the 'receives' macro";
          self.$raise($scope.get('InvalidOperationError'), message);};
        return ($b = ($c = args).$each, $b.$$p = (TMP_2 = function(operation){var self = TMP_2.$$s || this, $a, $d, TMP_3;
if (operation == null) operation = nil;
        return ($a = ($d = operation).$on_dispatch, $a.$$p = (TMP_3 = function(params){var self = TMP_3.$$s || this;
if (params == null) params = nil;
          self.params = params;
            if (callback !== false && callback !== nil && callback != null) {
              callback.$call()};
            if (block !== false && block !== nil && block != null) {
              return Opal.yield1(block, params);
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($d)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $b).call($c);
      }, TMP_1.$$arity = -1);

      self.$private();

      Opal.defn(self, '$format_callback', TMP_5 = function $$format_callback(args) {
        var $a, $b, TMP_4, self = this, method_name = nil;

        if ((($a = args.$last()['$is_a?']($scope.get('Symbol'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          method_name = args.$pop();
          return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return self.$send((method_name.$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b);
        } else if ((($a = args.$last()['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return args.$pop()
          } else {
          return nil
        };
      }, TMP_5.$$arity = 1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/instance_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$each', '$==', '$[]', '$initializer_value', '$__send__', '$mutate', '$to_s', '$instance_eval', '$to_proc', '$__instance_states', '$class', '$new', '$instance_state_wrapper', '$__state_wrapper', '$singleton_class', '$instance_mutator_wrapper', '$private', '$>', '$arity', '$call']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5;

      Opal.defn(self, '$init_store', TMP_2 = function $$init_store() {
        var $a, $b, TMP_1, self = this;

        return ($a = ($b = self.$class().$__instance_states()).$each, $a.$$p = (TMP_1 = function(instance_state){var self = TMP_1.$$s || this, $c, $d, proc_value = nil, block_value = nil;
if (instance_state == null) instance_state = nil;
        if (instance_state['$[]'](1)['$[]']("scope")['$==']("shared")) {
            return nil;};
          proc_value = self.$initializer_value(instance_state['$[]'](1)['$[]']("initializer"));
          self.$mutate().$__send__((instance_state['$[]'](0).$to_s()), proc_value);
          if ((($c = instance_state['$[]'](1)['$[]']("block")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            return nil;
          };
          block_value = ($c = ($d = self).$instance_eval, $c.$$p = instance_state['$[]'](1)['$[]']("block").$to_proc(), $c).call($d);
          return self.$mutate().$__send__((instance_state['$[]'](0).$to_s()), block_value);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b);
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$state', TMP_3 = function $$state() {
        var $a, self = this;
        if (self.state == null) self.state = nil;

        return ((($a = self.state) !== false && $a !== nil && $a != null) ? $a : self.state = self.$class().$singleton_class().$__state_wrapper().$instance_state_wrapper().$new(self));
      }, TMP_3.$$arity = 0);

      Opal.defn(self, '$mutate', TMP_4 = function $$mutate() {
        var $a, self = this;
        if (self.mutate == null) self.mutate = nil;

        return ((($a = self.mutate) !== false && $a !== nil && $a != null) ? $a : self.mutate = self.$class().$singleton_class().$__state_wrapper().$instance_mutator_wrapper().$new(self));
      }, TMP_4.$$arity = 0);

      self.$private();

      Opal.defn(self, '$initializer_value', TMP_5 = function $$initializer_value(initializer) {
        var $a, self = this;

        if ((($a = $rb_gt(initializer.$arity(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return initializer.$call(self)
          } else {
          return initializer.$call()
        };
      }, TMP_5.$$arity = 1);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/mutator_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$define_method', '$==', '$[]', '$__from__', '$state', '$get_state', '$to_s', '$>', '$count', '$set_state', '$new', '$initialize_values?', '$initialize_values', '$include?', '$initializer_proc', '$receives', '$__send__', '$mutate', '$call', '$private', '$arity', '$lambda', '$attr_accessor', '$allocate', '$__from__=', '$add_method', '$to_proc']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $MutatorWrapper(){};
      var self = $MutatorWrapper = $klass($base, $super, 'MutatorWrapper', $MutatorWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_3, TMP_4, TMP_7, TMP_10;

        Opal.defn(self, '$add_method', TMP_3 = function $$add_method(klass, method_name, opts) {
          var $a, $b, TMP_1, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function($c_rest){var self = TMP_1.$$s || this, args, $d, $e, TMP_2, from = nil, current_value = nil;

            var $args_len = arguments.length, $rest_len = $args_len - 0;
            if ($rest_len < 0) { $rest_len = 0; }
            args = new Array($rest_len);
            for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
              args[$arg_idx - 0] = arguments[$arg_idx];
            }
          from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.$__from__()
            }; return nil; })();
            current_value = (($scope.get('React')).$$scope.get('State')).$get_state(from, method_name.$to_s());
            if ((($d = $rb_gt(args.$count(), 0)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), args['$[]'](0));
              return current_value;
              } else {
              (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), current_value);
              return ($d = ($e = (($scope.get('React')).$$scope.get('Observable'))).$new, $d.$$p = (TMP_2 = function(update){var self = TMP_2.$$s || this;
if (update == null) update = nil;
              return (($scope.get('React')).$$scope.get('State')).$set_state(from, method_name.$to_s(), update)}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $d).call($e, current_value);
            };}, TMP_1.$$s = self, TMP_1.$$arity = -1, TMP_1), $a).call($b, (method_name.$to_s()));
          if ((($a = self['$initialize_values?'](opts)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$initialize_values(klass, method_name, opts)
            } else {
            return nil
          };
        }, TMP_3.$$arity = -3);
        Opal.defn(self, '$initialize_values?', TMP_4 = function(opts) {
          var $a, $b, self = this;

          return ($a = ["class", "shared"]['$include?'](opts['$[]']("scope")), $a !== false && $a !== nil && $a != null ?(((($b = opts['$[]']("initializer")) !== false && $b !== nil && $b != null) ? $b : opts['$[]']("block"))) : $a);
        }, TMP_4.$$arity = 1);
        Opal.defn(self, '$initialize_values', TMP_7 = function $$initialize_values(klass, name, opts) {
          var $a, $b, TMP_5, $c, TMP_6, self = this, initializer = nil;

          if ((($a = opts['$[]']("initializer")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            initializer = self.$initializer_proc(opts['$[]']("initializer"), klass, name)};
          if ((($a = (($b = initializer !== false && initializer !== nil && initializer != null) ? opts['$[]']("block") : initializer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = klass).$receives, $a.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), opts['$[]']("block").$call())}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $a).call($b, (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')), initializer)
          } else if (initializer !== false && initializer !== nil && initializer != null) {
            return klass.$receives((((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')), initializer)
          } else if ((($a = opts['$[]']("block")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = klass).$receives, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), opts['$[]']("block").$call())}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 3);
        self.$private();
        return (Opal.defn(self, '$initializer_proc', TMP_10 = function $$initializer_proc(initializer, klass, name) {
          var $a, $b, TMP_8, $c, TMP_9, self = this;

          if ((($a = $rb_gt(initializer.$arity(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = self).$lambda, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), initializer.$call(klass))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b)
            } else {
            return ($a = ($c = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return klass.$mutate().$__send__((name.$to_s()), initializer.$call())}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($c)
          };
        }, TMP_10.$$arity = 3), nil) && 'initializer_proc';
      })(Opal.get_singleton_class(self));

      self.$attr_accessor("__from__");

      Opal.defs(self, '$new', TMP_11 = function(from) {
        var $a, $b, self = this, instance = nil;

        instance = self.$allocate();
        (($a = [from]), $b = instance, $b['$__from__='].apply($b, $a), $a[$a.length-1]);
        return instance;
      }, TMP_11.$$arity = 1);

      return (Opal.defn(self, '$method_missing', TMP_12 = function $$method_missing(name, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_12.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_12.$$p = null;
        ((function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self
        })(Opal.get_singleton_class(self))).$add_method(nil, name);
        return ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
      }, TMP_12.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/state_wrapper/argument_validator"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$parse_arguments', '$to_proc', '$[]', '$[]=', '$default_scope', '$validate_initializer', '$==', '$private', '$raise', '$is_a?', '$first', '$include?', '$to_sym', '$keys', '$invalid_option', '$shift', '$dup_or_return_intial_value', '$class', '$lambda', '$send', '$to_s', '$dup']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $ArgumentValidator, self = $ArgumentValidator = $module($base, 'ArgumentValidator');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_8, TMP_10;

        (function($base, $super) {
          function $InvalidOptionError(){};
          var self = $InvalidOptionError = $klass($base, $super, 'InvalidOptionError', $InvalidOptionError);

          var def = self.$$proto, $scope = self.$$scope;

          return nil;
        })($scope.base, $scope.get('StandardError'));

        Opal.defn(self, '$validate_args!', TMP_1 = function(klass, $a_rest) {
          var $b, $c, $d, $e, self = this, args, $iter = TMP_1.$$p, block = $iter || nil, name = nil, initial_value = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_1.$$p = null;
          $c = ($d = ($e = self).$parse_arguments, $d.$$p = block.$to_proc(), $d).apply($e, Opal.to_a(args)), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), initial_value = ($b[1] == null ? nil : $b[1]), opts = ($b[2] == null ? nil : $b[2]), $c;
          ($b = "scope", $c = opts, ((($d = $c['$[]']($b)) !== false && $d !== nil && $d != null) ? $d : $c['$[]=']($b, self.$default_scope(klass))));
          opts['$[]=']("initializer", self.$validate_initializer(initial_value, klass, opts));
          if (block !== false && block !== nil && block != null) {
            opts['$[]=']("block", block)};
          if ((($b = opts['$[]']("reader")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            opts['$[]=']("reader", (function() {if (opts['$[]']("reader")['$=='](true)) {
              return name
              } else {
              return opts['$[]']("reader")
            }; return nil; })())};
          return [name, opts];
        }, TMP_1.$$arity = -2);

        self.$private();

        Opal.defn(self, '$invalid_option', TMP_2 = function $$invalid_option(message) {
          var self = this;

          return self.$raise($scope.get('InvalidOptionError'), message);
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$parse_arguments', TMP_3 = function $$parse_arguments($a_rest) {
          var $b, $c, self = this, args, message = nil, name = nil, initial_value = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = args.$first()['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            if ((($b = ["reader", "initializer", "scope"]['$include?'](args.$first().$keys().$first().$to_sym())) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
              message = "The name of the state must be specified first as " + "either 'state :name' or 'state name: nil'";
              self.$invalid_option(message);};
            $c = args['$[]'](0).$shift(), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), initial_value = ($b[1] == null ? nil : $b[1]), $c;
            } else {
            name = args.$shift()
          };
          return [name, initial_value, ((($b = args['$[]'](0)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}))];
        }, TMP_3.$$arity = -1);

        Opal.defn(self, '$validate_initializer', TMP_8 = function $$validate_initializer(initial_value, klass, opts) {
          var $a, $b, TMP_4, $c, TMP_5, $d, TMP_6, $e, TMP_7, self = this, method_name = nil;

          if (initial_value !== false && initial_value !== nil && initial_value != null) {
            return self.$dup_or_return_intial_value(initial_value)
          } else if ((($a = opts['$[]']("initializer")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = [$scope.get('Symbol'), $scope.get('String')]['$include?'](opts['$[]']("initializer").$class())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              method_name = opts['$[]']("initializer");
              if ((($a = ["class", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
                return ($a = ($b = self).$lambda, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

                return klass.$send((method_name.$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)
                } else {
                return ($a = ($c = self).$lambda, $a.$$p = (TMP_5 = function(instance){var self = TMP_5.$$s || this;
if (instance == null) instance = nil;
                return instance.$send((method_name.$to_s()))}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($c)
              };
            } else if ((($a = opts['$[]']("initializer")['$is_a?']($scope.get('Proc'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return opts['$[]']("initializer")
              } else {
              self.$invalid_option("'state' option 'initialize' must either be a Symbol or a Proc");
              return ($a = ($d = self).$lambda, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

              return nil}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($d);
            }
            } else {
            return ($a = ($e = self).$lambda, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return nil}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($e)
          };
        }, TMP_8.$$arity = 3);

        Opal.defn(self, '$dup_or_return_intial_value', TMP_10 = function $$dup_or_return_intial_value(value) {
          var $a, $b, TMP_9, self = this;

          value = (function() { try {
            return value.$dup()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return value
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})();
          return ($a = ($b = self).$lambda, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

          return value}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
        }, TMP_10.$$arity = 1);
      })($scope.base)
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/state_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $gvars = Opal.gvars;

  Opal.add_stubs(['$extend', '$attr_reader', '$==', '$add_class_instance_vars', '$new', '$empty?', '$validate_args!', '$to_proc', '$add_readers', '$add_error_methods', '$state', '$singleton_class', '$add_methods', '$remove_methods', '$<<', '$send', '$to_s', '$[]', '$include?', '$class_eval', '$define_method', '$__send__', '$define_singleton_method', '$each', '$add_method', '$instance_variable_get', '$__from__', '$get_state', '$respond_to?', '$wrappers', '$class_state_wrapper', '$__state_wrapper', '$attr_accessor', '$allocate', '$__from__=']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_17, TMP_18;

      self.$extend($scope.get('ArgumentValidator'));

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_3, TMP_7, TMP_10, TMP_11, TMP_13, TMP_15, TMP_16;

        self.$attr_reader("instance_state_wrapper", "class_state_wrapper", "instance_mutator_wrapper", "class_mutator_wrapper", "wrappers");
        Opal.defn(self, '$inherited', TMP_1 = function $$inherited(subclass) {
          var self = this;

          if (self['$==']($scope.get('StateWrapper'))) {
            return subclass.$add_class_instance_vars(subclass)
            } else {
            return nil
          };
        }, TMP_1.$$arity = 1);
        Opal.defn(self, '$add_class_instance_vars', TMP_2 = function $$add_class_instance_vars(subclass) {
          var self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;
          if (self.instance_state_wrapper == null) self.instance_state_wrapper = nil;
          if (self.instance_mutator_wrapper == null) self.instance_mutator_wrapper = nil;
          if (self.class_state_wrapper == null) self.class_state_wrapper = nil;
          if (self.class_mutator_wrapper == null) self.class_mutator_wrapper = nil;

          self.shared_state_wrapper = subclass;
          self.instance_state_wrapper = $scope.get('Class').$new(self.shared_state_wrapper);
          self.class_state_wrapper = $scope.get('Class').$new(self.shared_state_wrapper);
          self.shared_mutator_wrapper = $scope.get('Class').$new($scope.get('MutatorWrapper'));
          self.instance_mutator_wrapper = $scope.get('Class').$new(self.shared_mutator_wrapper);
          self.class_mutator_wrapper = $scope.get('Class').$new(self.shared_mutator_wrapper);
          return self.wrappers = [self.instance_state_wrapper, self.instance_mutator_wrapper, self.class_state_wrapper, self.class_mutator_wrapper];
        }, TMP_2.$$arity = 1);
        Opal.defn(self, '$define_state_methods', TMP_3 = function $$define_state_methods(klass, $a_rest) {
          var $b, $c, $d, $e, self = this, args, $iter = TMP_3.$$p, block = $iter || nil, name = nil, opts = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_3.$$p = null;
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self};
          $c = ($d = ($e = self)['$validate_args!'], $d.$$p = block.$to_proc(), $d).apply($e, [klass].concat(Opal.to_a(args))), $b = Opal.to_ary($c), name = ($b[0] == null ? nil : $b[0]), opts = ($b[1] == null ? nil : $b[1]), $c;
          self.$add_readers(klass, name, opts);
          klass.$singleton_class().$state().$add_error_methods(name, opts);
          klass.$singleton_class().$state().$add_methods(klass, name, opts);
          klass.$singleton_class().$state().$remove_methods(name, opts);
          return klass.$send(("__" + opts['$[]']("scope").$to_s() + "_states"))['$<<']([name, opts]);
        }, TMP_3.$$arity = -2);
        Opal.defn(self, '$add_readers', TMP_7 = function $$add_readers(klass, name, opts) {
          var $a, $b, TMP_4, $c, TMP_6, self = this;

          if ((($a = opts['$[]']("reader")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            return nil
          };
          if ((($a = ["instance", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ($a = ($b = klass).$class_eval, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $c, $d, TMP_5;

            return ($c = ($d = self).$define_method, $c.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this;

              return self.$state().$__send__((name.$to_s()))}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $c).call($d, (opts['$[]']("reader").$to_s()))}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($b)};
          if ((($a = ["class", "shared"]['$include?'](opts['$[]']("scope"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($c = klass).$define_singleton_method, $a.$$p = (TMP_6 = function(){var self = TMP_6.$$s || this;

            return self.$state().$__send__((name.$to_s()))}, TMP_6.$$s = self, TMP_6.$$arity = 0, TMP_6), $a).call($c, (opts['$[]']("reader").$to_s()))
            } else {
            return nil
          };
        }, TMP_7.$$arity = 3);
        Opal.defn(self, '$add_error_methods', TMP_10 = function $$add_error_methods(name, opts) {
          var $a, $b, TMP_8, self = this;
          if (self.shared_state_wrapper == null) self.shared_state_wrapper = nil;
          if (self.shared_mutator_wrapper == null) self.shared_mutator_wrapper = nil;

          if (opts['$[]']("scope")['$==']("shared")) {
            return nil};
          return ($a = ($b = [self.shared_state_wrapper, self.shared_mutator_wrapper]).$each, $a.$$p = (TMP_8 = function(klass){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (klass == null) klass = nil;
          return ($c = ($d = klass).$define_singleton_method, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            return "nope!"}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($d, (name.$to_s()))}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($b);
        }, TMP_10.$$arity = 2);
        Opal.defn(self, '$add_methods', TMP_11 = function $$add_methods(klass, name, opts) {
          var self = this;

          self.$instance_variable_get("@" + (opts['$[]']("scope")) + "_state_wrapper").$add_method(klass, name, opts);
          return self.$instance_variable_get("@" + (opts['$[]']("scope")) + "_mutator_wrapper").$add_method(klass, name, opts);
        }, TMP_11.$$arity = 3);
        Opal.defn(self, '$add_method', TMP_13 = function $$add_method(klass, method_name, opts) {
          var $a, $b, TMP_12, self = this;

          if (opts == null) {
            opts = $hash2([], {});
          }
          return ($a = ($b = self).$define_method, $a.$$p = (TMP_12 = function(){var self = TMP_12.$$s || this, from = nil;
            if (self.__from__ == null) self.__from__ = nil;

          from = (function() {if (opts['$[]']("scope")['$==']("shared")) {
              return klass.$state().$__from__()
              } else {
              return self.__from__
            }; return nil; })();
            return (($scope.get('React')).$$scope.get('State')).$get_state(from, method_name.$to_s());}, TMP_12.$$s = self, TMP_12.$$arity = 0, TMP_12), $a).call($b, (method_name.$to_s()));
        }, TMP_13.$$arity = -3);
        Opal.defn(self, '$remove_methods', TMP_15 = function $$remove_methods(name, opts) {
          var $a, $b, TMP_14, self = this;

          if (opts['$[]']("scope")['$==']("shared")) {
            } else {
            return nil
          };
          return ($a = ($b = self.$wrappers()).$each, $a.$$p = (TMP_14 = function(wrapper){var self = TMP_14.$$s || this, $c;
if (wrapper == null) wrapper = nil;
          if ((($c = wrapper['$respond_to?']((name.$to_s()))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return wrapper.$send("remove_method", (name.$to_s()))
              } else {
              return nil
            }}, TMP_14.$$s = self, TMP_14.$$arity = 1, TMP_14), $a).call($b);
        }, TMP_15.$$arity = 2);
        return (Opal.defn(self, '$default_scope', TMP_16 = function $$default_scope(klass) {
          var self = this;

          if (self['$=='](klass.$singleton_class().$__state_wrapper().$class_state_wrapper())) {
            return "instance"
            } else {
            return "class"
          };
        }, TMP_16.$$arity = 1), nil) && 'default_scope';
      })(Opal.get_singleton_class(self));

      self.$attr_accessor("__from__");

      Opal.defs(self, '$new', TMP_17 = function(from) {
        var $a, $b, self = this, instance = nil;

        instance = self.$allocate();
        (($a = [from]), $b = instance, $b['$__from__='].apply($b, $a), $a[$a.length-1]);
        return instance;
      }, TMP_17.$$arity = 1);

      return (Opal.defn(self, '$method_missing', TMP_18 = function $$method_missing(name, $a_rest) {
        var $b, $c, self = this, args, $iter = TMP_18.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        TMP_18.$$p = null;
        $gvars.method_missing = [name].concat(Opal.to_a(args));
        ((function(self) {
          var $scope = self.$$scope, def = self.$$proto;

          return self
        })(Opal.get_singleton_class(self))).$add_method(nil, name);
        return ($b = ($c = self).$__send__, $b.$$p = block.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)));
      }, TMP_18.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.2.3")
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/store"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$init_store']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1;

        return (Opal.defn(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          return child.$include($scope.get('Mixin'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })(Opal.get_singleton_class(self));

      return (Opal.defn(self, '$initialize', TMP_2 = function $$initialize() {
        var self = this;

        return self.$init_store();
      }, TMP_2.$$arity = 0), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/application/boot"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$method_defined?', '$<<', '$receivers', '$set_var', '$attr_reader', '$new', '$each', '$call']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Operation(){};
      var self = $Operation = $klass($base, $super, 'Operation', $Operation);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, $a, TMP_1, TMP_3;

        if ((($a = self['$method_defined?']("on_dispatch")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          Opal.defn(self, '$on_dispatch', TMP_1 = function $$on_dispatch() {
            var self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            return self.$receivers()['$<<'](block);
          }, TMP_1.$$arity = 0)
        };
        if ((($a = self['$method_defined?']("receivers")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          return (Opal.defn(self, '$receivers', TMP_3 = function $$receivers() {
            var $a, $b, TMP_2, self = this;

            return ($a = ($b = (($scope.get('Hyperloop')).$$scope.get('Context'))).$set_var, $a.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

            return []}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $a).call($b, self, "@receivers", $hash2(["force"], {"force": true}));
          }, TMP_3.$$arity = 0), nil) && 'receivers'
        };
      })(Opal.get_singleton_class(self))
    })($scope.base, null);

    (function($base, $super) {
      function $Application(){};
      var self = $Application = $klass($base, $super, 'Application', $Application);

      var def = self.$$proto, $scope = self.$$scope, $a;

      if ((($a = ($scope.Boot != null)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return nil
        } else {
        return (function($base, $super) {
          function $Boot(){};
          var self = $Boot = $klass($base, $super, 'Boot', $Boot);

          var def = self.$$proto, $scope = self.$$scope, TMP_6;

          (function($base, $super) {
            function $ReactDummyParams(){};
            var self = $ReactDummyParams = $klass($base, $super, 'ReactDummyParams', $ReactDummyParams);

            var def = self.$$proto, $scope = self.$$scope, TMP_4;

            self.$attr_reader("context");

            return (Opal.defn(self, '$initialize', TMP_4 = function $$initialize(context) {
              var self = this;

              return self.context = context;
            }, TMP_4.$$arity = 1), nil) && 'initialize';
          })($scope.base, null);

          return (Opal.defs(self, '$run', TMP_6 = function $$run($kwargs) {
            var $a, $b, TMP_5, self = this, context, params = nil;

            if ($kwargs == null || !$kwargs.$$is_hash) {
              if ($kwargs == null) {
                $kwargs = $hash2([], {});
              } else {
                throw Opal.ArgumentError.$new('expected kwargs');
              }
            }
            if ((context = $kwargs.$$smap['context']) == null) {
              context = nil
            }
            params = $scope.get('ReactDummyParams').$new(context);
            return ($a = ($b = self.$receivers()).$each, $a.$$p = (TMP_5 = function(receiver){var self = TMP_5.$$s || this;
if (receiver == null) receiver = nil;
            return receiver.$call(params)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
          }, TMP_6.$$arity = -1), nil) && 'run';
        })($scope.base, $scope.get('Operation'))
      }
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/store/mixin"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$extend', '$define_singleton_method', '$new', '$singleton_class', '$define_state_methods', '$to_proc', '$__state_wrapper']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Store(){};
      var self = $Store = $klass($base, $super, 'Store', $Store);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $scope = self.$$scope;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_3;

          return (Opal.defn(self, '$included', TMP_3 = function $$included(base) {
            var $a, $b, TMP_1, $c, TMP_2, self = this;

            base.$include((($scope.get('HyperStore')).$$scope.get('InstanceMethods')));
            base.$extend((($scope.get('HyperStore')).$$scope.get('ClassMethods')));
            base.$extend((($scope.get('HyperStore')).$$scope.get('DispatchReceiver')));
            ($a = ($b = base.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c;
              if (self.__state_wrapper == null) self.__state_wrapper = nil;

            return ((($c = self.__state_wrapper) !== false && $c !== nil && $c != null) ? $c : self.__state_wrapper = $scope.get('Class').$new((($scope.get('HyperStore')).$$scope.get('StateWrapper'))))}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "__state_wrapper");
            return ($a = ($c = base.$singleton_class()).$define_singleton_method, $a.$$p = (TMP_2 = function($d_rest){var self = TMP_2.$$s || this, block, args, $e, $f;

              block = TMP_2.$$p || nil, TMP_2.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($e = ($f = self.$__state_wrapper()).$define_state_methods, $e.$$p = block.$to_proc(), $e).apply($f, [base].concat(Opal.to_a(args)))}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($c, "state");
          }, TMP_3.$$arity = 1), nil) && 'included'
        })(Opal.get_singleton_class(self))
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/state"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  function $rb_minus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs - rhs : lhs['$-'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$on_client?', '$attr_reader', '$!', '$empty?', '$[]', '$observers_by_name', '$respond_to?', '$each', '$include?', '$[]=', '$+', '$==', '$dup', '$merge!', '$states', '$new_observers', '$<<', '$new', '$after', '$set_state2', '$update_react_js_state', '$notify_observers', '$raise', '$delete', '$current_observers', '$to_f', '$now', '$class', '$name', '$to_s', '$object_id', '$-', '$max', '$define_method', '$instance_variable_get', '$instance_variable_set']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $State(){};
      var self = $State = $klass($base, $super, 'State', $State);

      var def = self.$$proto, $scope = self.$$scope;

      Opal.cdecl($scope, 'ALWAYS_UPDATE_STATE_AFTER_RENDER', $scope.get('Hyperloop')['$on_client?']());

      self.rendering_level = 0;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_16, TMP_18, TMP_21, TMP_22, TMP_23, TMP_28, TMP_31, TMP_32, TMP_34, $a, $b, TMP_35;

        self.$attr_reader("current_observer");
        Opal.defn(self, '$has_observers?', TMP_1 = function(object, name) {
          var self = this;

          return self.$observers_by_name()['$[]'](object)['$[]'](name)['$empty?']()['$!']();
        }, TMP_1.$$arity = 2);
        Opal.defn(self, '$bulk_update', TMP_2 = function $$bulk_update() {
          var self = this, $iter = TMP_2.$$p, $yield = $iter || nil, saved_bulk_update_flag = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;

          TMP_2.$$p = null;
          try {
          saved_bulk_update_flag = self.bulk_update_flag;
          self.bulk_update_flag = true;
          return Opal.yieldX($yield, []);;
          } finally {
            self.bulk_update_flag = saved_bulk_update_flag
          };
        }, TMP_2.$$arity = 0);
        Opal.defn(self, '$set_state2', TMP_4 = function $$set_state2(object, name, value, updates, exclusions) {
          var $a, $b, TMP_3, $c, self = this, object_needs_notification = nil;

          if (exclusions == null) {
            exclusions = nil;
          }
          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_3 = function(observer){var self = TMP_3.$$s || this, $c, $d;
if (observer == null) observer = nil;
          if ((($c = (($d = exclusions !== false && exclusions !== nil && exclusions != null) ? exclusions['$include?'](observer) : exclusions)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return nil;};
            ($c = observer, $d = updates, $d['$[]=']($c, $rb_plus($d['$[]']($c), [object, name, value])));
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return ($a = object, $c = updates, $c['$[]=']($a, $rb_plus($c['$[]']($a), [nil, name, value])))
            } else {
            return nil
          };
        }, TMP_4.$$arity = -5);
        Opal.defn(self, '$initialize_states', TMP_5 = function $$initialize_states(object, initial_values) {
          var $a, self = this;

          return self.$states()['$[]'](object)['$merge!'](((($a = initial_values) !== false && $a !== nil && $a != null) ? $a : $hash2([], {})));
        }, TMP_5.$$arity = 2);
        Opal.defn(self, '$get_state', TMP_6 = function $$get_state(object, name, current_observer) {
          var $a, $b, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if ((($a = (($b = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name)['$!']() : current_observer)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.$new_observers()['$[]'](current_observer)['$[]'](object)['$<<'](name)};
          if ((($a = ($b = self.delayed_updates, $b !== false && $b !== nil && $b != null ?self.delayed_updates['$[]'](object)['$[]'](name) : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.delayed_updates['$[]'](object)['$[]'](name)['$[]'](1)['$<<'](current_observer)};
          return self.$states()['$[]'](object)['$[]'](name);
        }, TMP_6.$$arity = -3);
        Opal.defn(self, '$set_state', TMP_16 = function $$set_state(object, name, value, delay) {
          var $a, $b, $c, TMP_7, $d, TMP_8, TMP_14, $e, TMP_15, self = this, updates = nil;
          if (self.bulk_update_flag == null) self.bulk_update_flag = nil;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (delay == null) {
            delay = $scope.get('ALWAYS_UPDATE_STATE_AFTER_RENDER');
          }
          self.$states()['$[]'](object)['$[]='](name, value);
          if ((($a = ((($b = delay) !== false && $b !== nil && $b != null) ? $b : self.bulk_update_flag)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            ((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_7 = function(h, k){var self = TMP_7.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, $hash2([], {}))}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $b).call($c));
            self.delayed_updates['$[]'](object)['$[]='](name, [value, $scope.get('Set').$new()]);
            ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($d = self).$after, $b.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $e, $f, TMP_9, $g, TMP_10, $h, TMP_11, $i, TMP_13, delayed_updates = nil, updates = nil;
              if (self.delayed_updates == null) self.delayed_updates = nil;

            delayed_updates = self.delayed_updates;
              self.delayed_updates = ($e = ($f = $scope.get('Hash')).$new, $e.$$p = (TMP_9 = function(h, k){var self = TMP_9.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, $hash2([], {}))}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $e).call($f);
              self.delayed_updater = nil;
              updates = ($e = ($g = $scope.get('Hash')).$new, $e.$$p = (TMP_10 = function(hash, key){var self = TMP_10.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
              return hash['$[]='](key, $scope.get('Array').$new())}, TMP_10.$$s = self, TMP_10.$$arity = 2, TMP_10), $e).call($g);
              ($e = ($h = delayed_updates).$each, $e.$$p = (TMP_11 = function(object, name_hash){var self = TMP_11.$$s || this, $i, $j, TMP_12;
if (object == null) object = nil;if (name_hash == null) name_hash = nil;
              return ($i = ($j = name_hash).$each, $i.$$p = (TMP_12 = function(name, value_and_set){var self = TMP_12.$$s || this;
if (name == null) name = nil;if (value_and_set == null) value_and_set = nil;
                return self.$set_state2(object, name, value_and_set['$[]'](0), updates, value_and_set['$[]'](1))}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $i).call($j)}, TMP_11.$$s = self, TMP_11.$$arity = 2, TMP_11), $e).call($h);
              return ($e = ($i = updates).$each, $e.$$p = (TMP_13 = function(observer, args){var self = TMP_13.$$s || this, $j;
if (observer == null) observer = nil;if (args == null) args = nil;
              return ($j = observer).$update_react_js_state.apply($j, Opal.to_a(args))}, TMP_13.$$s = self, TMP_13.$$arity = 2, TMP_13), $e).call($i);}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $b).call($d, 0.001));
          } else if (self.rendering_level['$=='](0)) {
            updates = ($a = ($b = $scope.get('Hash')).$new, $a.$$p = (TMP_14 = function(hash, key){var self = TMP_14.$$s || this;
if (hash == null) hash = nil;if (key == null) key = nil;
            return hash['$[]='](key, $scope.get('Array').$new())}, TMP_14.$$s = self, TMP_14.$$arity = 2, TMP_14), $a).call($b);
            self.$set_state2(object, name, value, updates);
            ($a = ($e = updates).$each, $a.$$p = (TMP_15 = function(observer, args){var self = TMP_15.$$s || this, $f;
if (observer == null) observer = nil;if (args == null) args = nil;
            return ($f = observer).$update_react_js_state.apply($f, Opal.to_a(args))}, TMP_15.$$s = self, TMP_15.$$arity = 2, TMP_15), $a).call($e);};
          return value;
        }, TMP_16.$$arity = -4);
        Opal.defn(self, '$notify_observers', TMP_18 = function $$notify_observers(object, name, value) {
          var $a, $b, TMP_17, self = this, object_needs_notification = nil;

          object_needs_notification = object['$respond_to?']("update_react_js_state");
          ($a = ($b = self.$observers_by_name()['$[]'](object)['$[]'](name).$dup()).$each, $a.$$p = (TMP_17 = function(observer){var self = TMP_17.$$s || this;
if (observer == null) observer = nil;
          observer.$update_react_js_state(object, name, value);
            if (object['$=='](observer)) {
              return object_needs_notification = false
              } else {
              return nil
            };}, TMP_17.$$s = self, TMP_17.$$arity = 1, TMP_17), $a).call($b);
          if (object_needs_notification !== false && object_needs_notification !== nil && object_needs_notification != null) {
            return object.$update_react_js_state(nil, name, value)
            } else {
            return nil
          };
        }, TMP_18.$$arity = 3);
        Opal.defn(self, '$notify_observers_after_thread_completes', TMP_21 = function $$notify_observers_after_thread_completes(object, name, value) {
          var $a, $b, $c, TMP_19, self = this;
          if (self.delayed_updates == null) self.delayed_updates = nil;
          if (self.delayed_updater == null) self.delayed_updater = nil;

          (((($a = self.delayed_updates) !== false && $a !== nil && $a != null) ? $a : self.delayed_updates = []))['$<<']([object, name, value]);
          return ((($a = self.delayed_updater) !== false && $a !== nil && $a != null) ? $a : self.delayed_updater = ($b = ($c = self).$after, $b.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $d, $e, TMP_20, delayed_updates = nil;
            if (self.delayed_updates == null) self.delayed_updates = nil;

          delayed_updates = self.delayed_updates;
            self.delayed_updates = [];
            self.delayed_updater = nil;
            return ($d = ($e = delayed_updates).$each, $d.$$p = (TMP_20 = function(args){var self = TMP_20.$$s || this, $f;
if (args == null) args = nil;
            return ($f = self).$notify_observers.apply($f, Opal.to_a(args))}, TMP_20.$$s = self, TMP_20.$$arity = 1, TMP_20), $d).call($e);}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $b).call($c, 0));
        }, TMP_21.$$arity = 3);
        Opal.defn(self, '$will_be_observing?', TMP_22 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$new_observers()['$[]'](current_observer)['$[]'](object)['$include?'](name) : current_observer);
        }, TMP_22.$$arity = 3);
        Opal.defn(self, '$is_observing?', TMP_23 = function(object, name, current_observer) {
          var $a, self = this;

          return (($a = current_observer !== false && current_observer !== nil && current_observer != null) ? self.$observers_by_name()['$[]'](object)['$[]'](name)['$include?'](current_observer) : current_observer);
        }, TMP_23.$$arity = 3);
        Opal.defn(self, '$update_states_to_observe', TMP_28 = function $$update_states_to_observe(current_observer) {
          var $a, $b, TMP_24, $c, TMP_26, self = this, observers = nil;
          if (self.current_observer == null) self.current_observer = nil;

          if (current_observer == null) {
            current_observer = self.current_observer;
          }
          if (current_observer !== false && current_observer !== nil && current_observer != null) {
            } else {
            self.$raise("update_states_to_observer called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](current_observer)).$each, $a.$$p = (TMP_24 = function(object, names){var self = TMP_24.$$s || this, $c, $d, TMP_25;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(current_observer)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $c).call($d)}, TMP_24.$$s = self, TMP_24.$$arity = 2, TMP_24), $a).call($b);
          observers = self.$current_observers()['$[]='](current_observer, self.$new_observers()['$[]'](current_observer));
          self.$new_observers().$delete(current_observer);
          return ($a = ($c = observers).$each, $a.$$p = (TMP_26 = function(object, names){var self = TMP_26.$$s || this, $d, $e, TMP_27;
if (object == null) object = nil;if (names == null) names = nil;
          return ($d = ($e = names).$each, $d.$$p = (TMP_27 = function(name){var self = TMP_27.$$s || this;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name)['$<<'](current_observer)}, TMP_27.$$s = self, TMP_27.$$arity = 1, TMP_27), $d).call($e)}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $a).call($c);
        }, TMP_28.$$arity = -1);
        Opal.defn(self, '$remove', TMP_31 = function $$remove() {
          var $a, $b, TMP_29, self = this;
          if (self.current_observer == null) self.current_observer = nil;

          if ((($a = self.current_observer) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("remove called outside of watch block")
          };
          ($a = ($b = self.$current_observers()['$[]'](self.current_observer)).$each, $a.$$p = (TMP_29 = function(object, names){var self = TMP_29.$$s || this, $c, $d, TMP_30;
if (object == null) object = nil;if (names == null) names = nil;
          return ($c = ($d = names).$each, $c.$$p = (TMP_30 = function(name){var self = TMP_30.$$s || this;
              if (self.current_observer == null) self.current_observer = nil;
if (name == null) name = nil;
            return self.$observers_by_name()['$[]'](object)['$[]'](name).$delete(self.current_observer)}, TMP_30.$$s = self, TMP_30.$$arity = 1, TMP_30), $c).call($d)}, TMP_29.$$s = self, TMP_29.$$arity = 2, TMP_29), $a).call($b);
          return self.$current_observers().$delete(self.current_observer);
        }, TMP_31.$$arity = 0);
        Opal.defn(self, '$set_state_context_to', TMP_32 = function $$set_state_context_to(observer, rendering) {
          var $a, self = this, $iter = TMP_32.$$p, $yield = $iter || nil, start_time = nil, observer_name = nil, saved_current_observer = nil, return_value = nil;
          if (self.nesting_level == null) self.nesting_level = nil;
          if (self.current_observer == null) self.current_observer = nil;
          if (self.rendering_level == null) self.rendering_level = nil;

          if (rendering == null) {
            rendering = nil;
          }
          TMP_32.$$p = null;
          try {
          if ((($a = typeof Opal.global.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            self.nesting_level = $rb_plus((((($a = self.nesting_level) !== false && $a !== nil && $a != null) ? $a : 0)), 1);
            start_time = $scope.get('Time').$now().$to_f();
            observer_name = (function() {
            try {return ((function() {if ((($a = observer.$class()['$respond_to?']("name")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return observer.$class().$name()
              } else {
              return observer.$to_s()
            }; return nil; })()) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return "object:" + (observer.$object_id())
              } else { throw $err; } }})();};
          saved_current_observer = self.current_observer;
          self.current_observer = observer;
          if (rendering !== false && rendering !== nil && rendering != null) {
            self.rendering_level = $rb_plus(self.rendering_level, 1)};
          return_value = Opal.yieldX($yield, []);
          return return_value;
          } finally {
            self.current_observer = saved_current_observer;
            if (rendering !== false && rendering !== nil && rendering != null) {
              self.rendering_level = $rb_minus(self.rendering_level, 1)};
            if ((($a = typeof Opal.global.reactive_ruby_timing !== 'undefined') !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.nesting_level = [0, $rb_minus(self.nesting_level, 1)].$max()};
            return_value;
          };
        }, TMP_32.$$arity = -2);
        Opal.defn(self, '$states', TMP_34 = function $$states() {
          var $a, $b, $c, TMP_33, self = this;
          if (self.states == null) self.states = nil;

          return ((($a = self.states) !== false && $a !== nil && $a != null) ? $a : self.states = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_33 = function(h, k){var self = TMP_33.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, $hash2([], {}))}, TMP_33.$$s = self, TMP_33.$$arity = 2, TMP_33), $b).call($c));
        }, TMP_34.$$arity = 0);
        return ($a = ($b = ["new_observers", "current_observers", "observers_by_name"]).$each, $a.$$p = (TMP_35 = function(method_name){var self = TMP_35.$$s || this, $c, $d, TMP_36;
if (method_name == null) method_name = nil;
        return ($c = ($d = self).$define_method, $c.$$p = (TMP_36 = function(){var self = TMP_36.$$s || this, $e, $f, $g, TMP_37;

          return ((($e = self.$instance_variable_get("@" + (method_name))) !== false && $e !== nil && $e != null) ? $e : self.$instance_variable_set("@" + (method_name), ($f = ($g = $scope.get('Hash')).$new, $f.$$p = (TMP_37 = function(h, k){var self = TMP_37.$$s || this, $h, $i, TMP_38;
if (h == null) h = nil;if (k == null) k = nil;
            return h['$[]='](k, ($h = ($i = $scope.get('Hash')).$new, $h.$$p = (TMP_38 = function(h, k){var self = TMP_38.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
              return h['$[]='](k, [])}, TMP_38.$$s = self, TMP_38.$$arity = 2, TMP_38), $h).call($i))}, TMP_37.$$s = self, TMP_37.$$arity = 2, TMP_37), $f).call($g)))}, TMP_36.$$s = self, TMP_36.$$arity = 0, TMP_36), $c).call($d, method_name)}, TMP_35.$$s = self, TMP_35.$$arity = 1, TMP_35), $a).call($b);
      })(Opal.get_singleton_class(self));
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-store"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$!=']);
  self.$require("set");
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-store");
  (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $BaseStoreClass(){};
      var self = $BaseStoreClass = $klass($base, $super, 'BaseStoreClass', $BaseStoreClass);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('BasicObject'))
  })($scope.base);
  self.$require("hyper-store/class_methods");
  self.$require("hyper-store/dispatch_receiver");
  self.$require("hyper-store/instance_methods");
  self.$require("hyper-store/mutator_wrapper");
  self.$require("hyper-store/state_wrapper/argument_validator");
  self.$require("hyper-store/state_wrapper");
  self.$require("hyper-store/version");
  self.$require("hyperloop/store");
  self.$require("hyperloop/application/boot");
  self.$require("hyperloop/store/mixin");
  self.$require("react/state");
  if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    return nil
  };
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/state_wrapper"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$instance_variable_get', '$__from__', '$=~', '$respond_to?', '$deprecation_warning', '$gsub', '$__send__', '$mutate', '$pre_component_method_missing']);
  return (function($base) {
    var $HyperStore, self = $HyperStore = $module($base, 'HyperStore');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $StateWrapper(){};
      var self = $StateWrapper = $klass($base, $super, 'StateWrapper', $StateWrapper);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      Opal.defn(self, '$[]', TMP_1 = function(state) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] || nil;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$[]=', TMP_2 = function(state, new_value) {
        var self = this;

        return self.$__from__().$instance_variable_get("@native").state[state] = new_value;
      }, TMP_2.$$arity = 2);

      Opal.alias(self, 'pre_component_method_missing', 'method_missing');

      return (Opal.defn(self, '$method_missing', TMP_3 = function $$method_missing(method, $a_rest) {
        var $b, $c, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 1;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 1] = arguments[$arg_idx];
        }
        if ((($b = ($c = method['$=~'](/\!$/), $c !== false && $c !== nil && $c != null ?self.$__from__()['$respond_to?']("deprecation_warning") : $c)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          self.$__from__().$deprecation_warning("The mutator 'state." + (method) + "' has been deprecated.  Use 'mutate." + (method.$gsub(/\!$/, "")) + "' instead.");
          return ($b = self.$__from__().$mutate()).$__send__.apply($b, [method.$gsub(/\!$/, "")].concat(Opal.to_a(args)));
          } else {
          return ($c = self).$pre_component_method_missing.apply($c, [method].concat(Opal.to_a(args)))
        };
      }, TMP_3.$$arity = -2), nil) && 'method_missing';
    })($scope.base, $scope.get('BaseStoreClass'))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/api"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$!', '$set_or_replace_state_or_prop', '$to_proc', '$private', '$raise', '$shallow_to_n', '$call']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $API, self = $API = $module($base, 'API');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8;

        Opal.defn(self, '$dom_node', TMP_1 = function $$dom_node() {
          var $a, self = this;

          if ((($a = ((typeof ReactDOM === 'undefined' || typeof ReactDOM.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ReactDOM.findDOMNode(self.native);
          } else if ((($a = ((typeof React.findDOMNode === 'undefined'))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return React.findDOMNode(self.native);
            } else {
            return self.native.getDOMNode;
          };
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$mounted?', TMP_2 = function() {
          var self = this;

          return self.native.isMounted();
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$force_update!', TMP_3 = function() {
          var self = this;

          return self.native.forceUpdate();
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$set_props', TMP_4 = function $$set_props(prop) {
          var $a, $b, self = this, $iter = TMP_4.$$p, block = $iter || nil;

          TMP_4.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "setProps");
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$set_props!', TMP_5 = function(prop) {
          var $a, $b, self = this, $iter = TMP_5.$$p, block = $iter || nil;

          TMP_5.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, prop, "replaceProps");
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$set_state', TMP_6 = function $$set_state(state) {
          var $a, $b, self = this, $iter = TMP_6.$$p, block = $iter || nil;

          TMP_6.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "setState");
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$set_state!', TMP_7 = function(state) {
          var $a, $b, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          TMP_7.$$p = null;
          return ($a = ($b = self).$set_or_replace_state_or_prop, $a.$$p = block.$to_proc(), $a).call($b, state, "replaceState");
        }, TMP_7.$$arity = 1);

        self.$private();

        Opal.defn(self, '$set_or_replace_state_or_prop', TMP_8 = function $$set_or_replace_state_or_prop(state_or_prop, method) {
          var $a, self = this, $iter = TMP_8.$$p, block = $iter || nil;
          if (self["native"] == null) self["native"] = nil;

          TMP_8.$$p = null;
          if ((($a = self["native"]) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            self.$raise("No native ReactComponent associated")
          };
          
          self["native"][method](state_or_prop.$shallow_to_n(), function(){
            (function() {if (block !== false && block !== nil && block != null) {
            return block.$call()
            } else {
            return nil
          }; return nil; })()
          });
        ;
        }, TMP_8.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$deprecation_warning', '$==', '$[]', '$message', '$backtrace', '$>', '$length', '$!', '$append_backtrace', '$join', '$raise', '$<<', '$each', '$is_a?', '$type', '$define_method', '$render', '$instance_eval', '$to_proc', '$empty?', '$method_missing', '$haml_class_name', '$new', '$props_wrapper', '$validator', '$validate', '$+', '$name', '$count', '$default_props', '$build', '$first', '$delete', '$merge!', '$optional', '$requires', '$allow_undefined_props=', '$undefined_props', '$props', '$arity', '$last', '$pop', '$state', '$[]=', '$__send__', '$mutate', '$singleton_class', '$native_mixins', '$static_call_backs', '$split', '$Native', '$to_n', '$add_item_to_tree', '$create_native_react_class', '$reverse', '$import_native_component', '$eval_native_react_component', '$!=', '$class', '$inject']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_6, TMP_7, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15, TMP_16, TMP_17, TMP_20, TMP_21, TMP_24, TMP_28, TMP_29, TMP_30, TMP_31, TMP_32, TMP_34, TMP_36;

        Opal.defn(self, '$deprecation_warning', TMP_1 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self, message);
        }, TMP_1.$$arity = 1);

        Opal.defn(self, '$reactrb_component?', TMP_2 = function() {
          var self = this;

          return true;
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$backtrace', TMP_3 = function $$backtrace($a_rest) {
          var $b, self = this, args;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          self.dont_catch_exceptions = (args['$[]'](0)['$==']("none"));
          return self.backtrace_off = ((($b = self.dont_catch_exceptions) !== false && $b !== nil && $b != null) ? $b : (args['$[]'](0)['$==']("off")));
        }, TMP_3.$$arity = -1);

        Opal.defn(self, '$process_exception', TMP_4 = function $$process_exception(e, component, reraise) {
          var $a, $b, $c, self = this, message = nil;
          if (self.dont_catch_exceptions == null) self.dont_catch_exceptions = nil;
          if (self.backtrace_off == null) self.backtrace_off = nil;

          if (reraise == null) {
            reraise = self.dont_catch_exceptions;
          }
          if ((($a = self.dont_catch_exceptions) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            } else {
            message = ["Exception raised while rendering " + (component) + ": " + (e.$message())];
            if ((($a = ($b = ($c = e.$backtrace(), $c !== false && $c !== nil && $c != null ?$rb_gt(e.$backtrace().$length(), 1) : $c), $b !== false && $b !== nil && $b != null ?self.backtrace_off['$!']() : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              self.$append_backtrace(message, e.$backtrace())};
            console.error(message.$join("\n"));
          };
          if (reraise !== false && reraise !== nil && reraise != null) {
            return self.$raise(e)
            } else {
            return nil
          };
        }, TMP_4.$$arity = -3);

        Opal.defn(self, '$append_backtrace', TMP_6 = function $$append_backtrace(message_array, backtrace) {
          var $a, $b, TMP_5, self = this;

          message_array['$<<']("    " + (backtrace['$[]'](0)));
          return ($a = ($b = backtrace['$[]']($range(1, -1, false))).$each, $a.$$p = (TMP_5 = function(line){var self = TMP_5.$$s || this;
if (line == null) line = nil;
          return message_array['$<<'](line)}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($b);
        }, TMP_6.$$arity = 2);

        Opal.defn(self, '$render', TMP_7 = function $$render(container, params) {
          var $a, $b, TMP_8, $c, TMP_10, self = this, $iter = TMP_7.$$p, block = $iter || nil;

          if (container == null) {
            container = nil;
          }
          if (params == null) {
            params = $hash2([], {});
          }
          TMP_7.$$p = null;
          if (container !== false && container !== nil && container != null) {
            if ((($a = container['$is_a?']((($scope.get('React')).$$scope.get('Element')))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              container = container.$type()};
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9;

            return ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $e, $f;

              if (block !== false && block !== nil && block != null) {
                  return ($e = ($f = self).$instance_eval, $e.$$p = block.$to_proc(), $e).call($f)
                  } else {
                  return nil
                }}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($d, container, params)}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b, "render");
            } else {
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_10 = function(){var self = TMP_10.$$s || this, $d, $e;

            return ($d = ($e = self).$instance_eval, $d.$$p = block.$to_proc(), $d).call($e)}, TMP_10.$$s = self, TMP_10.$$arity = 0, TMP_10), $a).call($c, "render")
          };
        }, TMP_7.$$arity = -1);

        Opal.defn(self, '$method_missing', TMP_11 = function $$method_missing(name, $a_rest) {
          var $b, $c, $d, self = this, args, $iter = TMP_11.$$p, children = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_11.$$p = null;
          if ((($b = args['$empty?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            ($b = ($c = $scope.get('Object')).$method_missing, $b.$$p = children.$to_proc(), $b).apply($c, [name].concat(Opal.to_a(args)))
          };
          return ($b = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = children.$to_proc(), $b).call($d, self, $hash2(["class"], {"class": (($scope.get('React')).$$scope.get('Element')).$haml_class_name(name)}));
        }, TMP_11.$$arity = -2);

        Opal.defn(self, '$validator', TMP_12 = function $$validator() {
          var $a, self = this;
          if (self.validator == null) self.validator = nil;

          return ((($a = self.validator) !== false && $a !== nil && $a != null) ? $a : self.validator = $scope.get('Validator').$new(self.$props_wrapper()));
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$prop_types', TMP_13 = function $$prop_types() {
          var $a, self = this;

          if ((($a = self.$validator()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return $hash2(["_componentValidator"], {"_componentValidator": 
              function(props, propName, componentName) {
                var errors = self.$validator().$validate($scope.get('Hash').$new(props));
                var error = new Error($rb_plus("In component `" + (self.$name()) + "`\n", (errors).$join("\n")));
                return (function() {if ((($a = $rb_gt((errors).$count(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              return error;
              } else {
              return undefined;
            }; return nil; })();
              }
            })
            } else {
            return $hash2([], {})
          };
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$default_props', TMP_14 = function $$default_props() {
          var self = this;

          return self.$validator().$default_props();
        }, TMP_14.$$arity = 0);

        Opal.defn(self, '$params', TMP_15 = function $$params() {
          var $a, $b, self = this, $iter = TMP_15.$$p, block = $iter || nil;

          TMP_15.$$p = null;
          return ($a = ($b = self.$validator()).$build, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_15.$$arity = 0);

        Opal.defn(self, '$props_wrapper', TMP_16 = function $$props_wrapper() {
          var $a, self = this;
          if (self.props_wrapper == null) self.props_wrapper = nil;

          return ((($a = self.props_wrapper) !== false && $a !== nil && $a != null) ? $a : self.props_wrapper = $scope.get('Class').$new($scope.get('PropsWrapper')));
        }, TMP_16.$$arity = 0);

        Opal.defn(self, '$param', TMP_17 = function $$param($a_rest) {
          var $b, self = this, args, options = nil, name = nil, default$ = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = args['$[]'](0)['$is_a?']($scope.get('Hash'))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            options = args['$[]'](0);
            name = options.$first()['$[]'](0);
            default$ = options.$first()['$[]'](1);
            options.$delete(name);
            options['$merge!']($hash2(["default"], {"default": default$}));
            } else {
            name = args['$[]'](0);
            options = ((($b = args['$[]'](1)) !== false && $b !== nil && $b != null) ? $b : $hash2([], {}));
          };
          if ((($b = options['$[]']("default")) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return self.$validator().$optional(name, options)
            } else {
            return self.$validator().$requires(name, options)
          };
        }, TMP_17.$$arity = -1);

        Opal.defn(self, '$collect_other_params_as', TMP_20 = function $$collect_other_params_as(name) {
          var $a, $b, TMP_18, $c, TMP_19, self = this, validator_in_lexical_scope = nil, validator_in_lexial_scope = nil;

          (($a = [true]), $b = self.$validator(), $b['$allow_undefined_props='].apply($b, $a), $a[$a.length-1]);
          validator_in_lexical_scope = self.$validator();
          ($a = ($b = self.$props_wrapper()).$define_method, $a.$$p = (TMP_18 = function(){var self = TMP_18.$$s || this, $c;
            if (self._all_others == null) self._all_others = nil;

          return ((($c = self._all_others) !== false && $c !== nil && $c != null) ? $c : self._all_others = validator_in_lexical_scope.$undefined_props(self.$props()))}, TMP_18.$$s = self, TMP_18.$$arity = 0, TMP_18), $a).call($b, name);
          validator_in_lexial_scope = self.$validator();
          return ($a = ($c = self.$props_wrapper()).$define_method, $a.$$p = (TMP_19 = function(){var self = TMP_19.$$s || this, $d;
            if (self._all_others == null) self._all_others = nil;

          return ((($d = self._all_others) !== false && $d !== nil && $d != null) ? $d : self._all_others = validator_in_lexial_scope.$undefined_props(self.$props()))}, TMP_19.$$s = self, TMP_19.$$arity = 0, TMP_19), $a).call($c, name);
        }, TMP_20.$$arity = 1);

        Opal.defn(self, '$define_state', TMP_21 = function $$define_state($a_rest) {
          var $b, $c, TMP_22, $d, TMP_23, self = this, states, $iter = TMP_21.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_21.$$p = null;
          self.$deprecation_warning("'define_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_22 = function(name){var self = TMP_22.$$s || this;
if (name == null) name = nil;
          return self.$state($hash(name, default_initial_value))}, TMP_22.$$s = self, TMP_22.$$arity = 1, TMP_22), $b).call($c);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_23 = function(name, value){var self = TMP_23.$$s || this;
if (name == null) name = nil;if (value == null) value = nil;
          return self.$state($hash(name, value))}, TMP_23.$$s = self, TMP_23.$$arity = 2, TMP_23), $b).call($d);
        }, TMP_21.$$arity = -1);

        Opal.defn(self, '$export_state', TMP_24 = function $$export_state($a_rest) {
          var $b, $c, TMP_25, $d, TMP_26, self = this, states, $iter = TMP_24.$$p, block = $iter || nil, default_initial_value = nil, states_hash = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          states = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            states[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_24.$$p = null;
          self.$deprecation_warning("'export_state' is deprecated. Use the 'state' macro to declare states.");
          default_initial_value = (function() {if ((($b = ((($c = block !== false && block !== nil && block != null) ? block.$arity()['$=='](0) : block))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return Opal.yieldX(block, []);
            } else {
            return nil
          }; return nil; })();
          states_hash = (function() {if ((($b = (states.$last()['$is_a?']($scope.get('Hash')))) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            return states.$pop()
            } else {
            return $hash2([], {})
          }; return nil; })();
          ($b = ($c = states).$each, $b.$$p = (TMP_25 = function(name){var self = TMP_25.$$s || this;
if (name == null) name = nil;
          return states_hash['$[]='](name, default_initial_value)}, TMP_25.$$s = self, TMP_25.$$arity = 1, TMP_25), $b).call($c);
          return ($b = ($d = states_hash).$each, $b.$$p = (TMP_26 = function(name, value){var self = TMP_26.$$s || this, $a, $e, TMP_27;
if (name == null) name = nil;if (value == null) value = nil;
          self.$state($hash(name, value, "scope", "class", "reader", true));
            return ($a = ($e = self.$singleton_class()).$define_method, $a.$$p = (TMP_27 = function($f_rest){var self = TMP_27.$$s || this, args, $g;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($g = self.$mutate()).$__send__.apply($g, [name].concat(Opal.to_a(args)))}, TMP_27.$$s = self, TMP_27.$$arity = -1, TMP_27), $a).call($e, "" + (name) + "!");}, TMP_26.$$s = self, TMP_26.$$arity = 2, TMP_26), $b).call($d);
        }, TMP_24.$$arity = -1);

        Opal.defn(self, '$native_mixin', TMP_28 = function $$native_mixin(item) {
          var self = this;

          return self.$native_mixins()['$<<'](item);
        }, TMP_28.$$arity = 1);

        Opal.defn(self, '$native_mixins', TMP_29 = function $$native_mixins() {
          var $a, self = this;
          if (self.native_mixins == null) self.native_mixins = nil;

          return ((($a = self.native_mixins) !== false && $a !== nil && $a != null) ? $a : self.native_mixins = []);
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$static_call_back', TMP_30 = function $$static_call_back(name) {
          var self = this, $iter = TMP_30.$$p, block = $iter || nil;

          TMP_30.$$p = null;
          return self.$static_call_backs()['$[]='](name, block);
        }, TMP_30.$$arity = 1);

        Opal.defn(self, '$static_call_backs', TMP_31 = function $$static_call_backs() {
          var $a, self = this;
          if (self.static_call_backs == null) self.static_call_backs = nil;

          return ((($a = self.static_call_backs) !== false && $a !== nil && $a != null) ? $a : self.static_call_backs = $hash2([], {}));
        }, TMP_31.$$arity = 0);

        Opal.defn(self, '$export_component', TMP_32 = function $$export_component(opts) {
          var $a, self = this, export_name = nil, first_name = nil;

          if (opts == null) {
            opts = $hash2([], {});
          }
          export_name = (((($a = opts['$[]']("as")) !== false && $a !== nil && $a != null) ? $a : self.$name())).$split("::");
          first_name = export_name.$first();
          return self.$Native(Opal.global)['$[]='](first_name, self.$add_item_to_tree(self.$Native(Opal.global)['$[]'](first_name), $rb_plus([(($scope.get('React')).$$scope.get('API')).$create_native_react_class(self)], export_name['$[]']($range(1, -1, false)).$reverse())).$to_n());
        }, TMP_32.$$arity = -1);

        Opal.defn(self, '$imports', TMP_34 = function $$imports(component_name) {
          var $a, $b, TMP_33, self = this, e = nil;

          try {
          try {
            (($scope.get('React')).$$scope.get('API')).$import_native_component(self, (($scope.get('React')).$$scope.get('API')).$eval_native_react_component(component_name));
            return ($a = ($b = self).$define_method, $a.$$p = (TMP_33 = function(){var self = TMP_33.$$s || this;

            return nil}, TMP_33.$$s = self, TMP_33.$$arity = 0, TMP_33), $a).call($b, "render");
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$raise("" + (self) + " cannot import '" + (component_name) + "': " + (e.$message()) + ".")
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }
          } finally {
            self
          };
        }, TMP_34.$$arity = 1);

        Opal.defn(self, '$add_item_to_tree', TMP_36 = function $$add_item_to_tree(current_tree, new_item) {
          var $a, $b, TMP_35, self = this;

          if ((($a = ((($b = self.$Native(current_tree).$class()['$!=']((($scope.get('Native')).$$scope.get('Object')))) !== false && $b !== nil && $b != null) ? $b : new_item.$length()['$=='](1))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return ($a = ($b = new_item).$inject, $a.$$p = (TMP_35 = function(a, e){var self = TMP_35.$$s || this;
if (a == null) a = nil;if (e == null) e = nil;
            return $hash(e, a)}, TMP_35.$$s = self, TMP_35.$$arity = 2, TMP_35), $a).call($b)
            } else {
            self.$Native(current_tree)['$[]='](new_item.$last(), self.$add_item_to_tree(self.$Native(current_tree)['$[]'](new_item.$last()), new_item['$[]']($range(0, -2, false))));
            return current_tree;
          };
        }, TMP_36.$$arity = 2);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/props_wrapper"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$attr_reader', '$==', '$define_method', '$value_for', '$>', '$count', '$call', '$[]', '$props', '$to_proc', '$fetch_from_cache', '$respond_to?', '$_react_param_conversion', '$is_a?', '$collect', '$private', '$cache', '$equal?', '$tap', '$[]=', '$new', '$component', '$instance_variable_get']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $PropsWrapper(){};
        var self = $PropsWrapper = $klass($base, $super, 'PropsWrapper', $PropsWrapper);

        var def = self.$$proto, $scope = self.$$scope, TMP_7, TMP_8, TMP_9, TMP_11, TMP_13, TMP_14, TMP_15;

        def.cache = nil;
        self.$attr_reader("component");

        Opal.defs(self, '$define_param', TMP_7 = function $$define_param(name, param_type) {
          var $a, $b, TMP_1, $c, TMP_2, $d, TMP_3, $e, TMP_4, self = this;

          if (param_type['$==']($scope.get('Observable'))) {
            ($a = ($b = self).$define_method, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

            return self.$value_for(name)}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, "" + (name));
            return ($a = ($c = self).$define_method, $a.$$p = (TMP_2 = function($d_rest){var self = TMP_2.$$s || this, args, $e, current_value = nil;
              if (self.dont_update_state == null) self.dont_update_state = nil;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            current_value = self.$value_for(name);
              if ((($e = $rb_gt(args.$count(), 0)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                self.$props()['$[]'](name).$call(args['$[]'](0));
                return current_value;
                } else {
                
                try {(function() {if ((($e = self.dont_update_state) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
                  return nil
                  } else {
                  return self.$props()['$[]'](name).$call(current_value)
                }; return nil; })() } catch ($err) { 
                  if (Opal.rescue($err, [$scope.get('StandardError')])) {
                  nil
                  } else { throw $err; } };
                return self.$props()['$[]'](name);
              };}, TMP_2.$$s = self, TMP_2.$$arity = -1, TMP_2), $a).call($c, "" + (name) + "!");
          } else if (param_type['$==']($scope.get('Proc'))) {
            return ($a = ($d = self).$define_method, $a.$$p = (TMP_3 = function($e_rest){var self = TMP_3.$$s || this, block, args, $f, $g;

              block = TMP_3.$$p || nil, TMP_3.$$p = null;
              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            if ((($f = self.$props()['$[]'](name)) !== nil && $f != null && (!$f.$$is_boolean || $f == true))) {
                return ($f = ($g = self.$props()['$[]'](name)).$call, $f.$$p = block.$to_proc(), $f).apply($g, Opal.to_a(args))
                } else {
                return nil
              }}, TMP_3.$$s = self, TMP_3.$$arity = -1, TMP_3), $a).call($d, "" + (name))
            } else {
            return ($a = ($e = self).$define_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this, $f, $g, TMP_5;

            return ($f = ($g = self).$fetch_from_cache, $f.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $h, $i, TMP_6;

              if ((($h = param_type['$respond_to?']("_react_param_conversion")) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return param_type.$_react_param_conversion(self.$props()['$[]'](name), nil)
                } else if ((($h = ($i = param_type['$is_a?']($scope.get('Array')), $i !== false && $i !== nil && $i != null ?param_type['$[]'](0)['$respond_to?']("_react_param_conversion") : $i)) !== nil && $h != null && (!$h.$$is_boolean || $h == true))) {
                  return ($h = ($i = self.$props()['$[]'](name)).$collect, $h.$$p = (TMP_6 = function(param){var self = TMP_6.$$s || this;
if (param == null) param = nil;
                  return param_type['$[]'](0).$_react_param_conversion(param, nil)}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $h).call($i)
                  } else {
                  return self.$props()['$[]'](name)
                }}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $f).call($g, name)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($e, "" + (name))
          };
        }, TMP_7.$$arity = 2);

        Opal.defn(self, '$initialize', TMP_8 = function $$initialize(component) {
          var self = this;

          return self.component = component;
        }, TMP_8.$$arity = 1);

        Opal.defn(self, '$[]', TMP_9 = function(prop) {
          var self = this;

          return self.$props()['$[]'](prop);
        }, TMP_9.$$arity = 1);

        self.$private();

        Opal.defn(self, '$fetch_from_cache', TMP_11 = function $$fetch_from_cache(name) {
          var $a, $b, TMP_10, self = this, $iter = TMP_11.$$p, $yield = $iter || nil, last = nil, value = nil;

          TMP_11.$$p = null;
          $b = self.$cache()['$[]'](name), $a = Opal.to_ary($b), last = ($a[0] == null ? nil : $a[0]), value = ($a[1] == null ? nil : $a[1]), $b;
          if ((($a = last['$equal?'](self.$props()['$[]'](name))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return value};
          return ($a = ($b = Opal.yieldX($yield, [])).$tap, $a.$$p = (TMP_10 = function(value){var self = TMP_10.$$s || this;
if (value == null) value = nil;
          return self.$cache()['$[]='](name, [self.$props()['$[]'](name), value])}, TMP_10.$$s = self, TMP_10.$$arity = 1, TMP_10), $a).call($b);
        }, TMP_11.$$arity = 1);

        Opal.defn(self, '$cache', TMP_13 = function $$cache() {
          var $a, $b, $c, TMP_12, self = this;

          return ((($a = self.cache) !== false && $a !== nil && $a != null) ? $a : self.cache = ($b = ($c = $scope.get('Hash')).$new, $b.$$p = (TMP_12 = function(h, k){var self = TMP_12.$$s || this;
if (h == null) h = nil;if (k == null) k = nil;
          return h['$[]='](k, [])}, TMP_12.$$s = self, TMP_12.$$arity = 2, TMP_12), $b).call($c));
        }, TMP_13.$$arity = 0);

        Opal.defn(self, '$props', TMP_14 = function $$props() {
          var self = this;

          return self.$component().$props();
        }, TMP_14.$$arity = 0);

        return (Opal.defn(self, '$value_for', TMP_15 = function $$value_for(name) {
          var $a, self = this;

          if ((($a = self['$[]'](name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self['$[]'](name).$instance_variable_get("@value")
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1), nil) && 'value_for';
      })($scope.base, null)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$class_eval', '$class_attribute', '$define_callback', '$extend', '$deprecation_warning', '$name', '$class', '$init_store', '$call', '$[]', '$params', '$event_camelize', '$to_s', '$on_opal_client?', '$load_context', '$set_state_context_to', '$run_callback', '$process_exception', '$update_states_to_observe', '$new', '$remove', '$attr_reader', '$==', '$set_state', '$to_f', '$now', '$method_defined?', '$raise', '$render', '$respond_to?', '$waiting_on_resources', '$initialize_states', '$define_state', '$to_proc', '$include?', '$<<', '$log']);
  self.$require("react/ext/string");
  self.$require("react/ext/hash");
  self.$require("active_support/core_ext/class/attribute");
  self.$require("react/callbacks");
  self.$require("react/rendering_context");
  self.$require("hyper-store");
  self.$require("react/state_wrapper");
  self.$require("react/component/api");
  self.$require("react/component/class_methods");
  self.$require("react/component/props_wrapper");
  self.$require("native");
  (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Component(){};
      var self = $Component = $klass($base, $super, 'Component', $Component);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_8, TMP_10, TMP_12, TMP_14, TMP_16, TMP_18, TMP_19, $a, TMP_20, TMP_23, TMP_24, TMP_25;

        Opal.defs(self, '$included', TMP_2 = function $$included(base) {
          var $a, $b, TMP_1, self = this;

          base.$include((($scope.get('Store')).$$scope.get('Mixin')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('API')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Callbacks')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('DslInstanceMethods')));
          base.$include((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('ShouldComponentUpdate')));
          ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this;

          self.$class_attribute("initial_state");
            self.$define_callback("before_mount");
            self.$define_callback("after_mount");
            self.$define_callback("before_receive_props");
            self.$define_callback("before_update");
            self.$define_callback("after_update");
            return self.$define_callback("before_unmount");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          return base.$extend((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('ClassMethods')));
        }, TMP_2.$$arity = 1);

        Opal.defs(self, '$deprecation_warning', TMP_3 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$name(), message);
        }, TMP_3.$$arity = 1);

        Opal.defn(self, '$deprecation_warning', TMP_4 = function $$deprecation_warning(message) {
          var self = this;

          return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$class().$name(), message);
        }, TMP_4.$$arity = 1);

        Opal.defn(self, '$initialize', TMP_5 = function $$initialize(native_element) {
          var self = this;

          self["native"] = native_element;
          return self.$init_store();
        }, TMP_5.$$arity = 1);

        Opal.defn(self, '$emit', TMP_6 = function $$emit(event_name, $a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          return ($b = self.$params()['$[]']("_on" + (event_name.$to_s().$event_camelize()))).$call.apply($b, Opal.to_a(args));
        }, TMP_6.$$arity = -2);

        Opal.defn(self, '$component_will_mount', TMP_8 = function $$component_will_mount() {
          var $a, $b, TMP_7, self = this, e = nil;

          try {
            if ((($a = (($scope.get('React')).$$scope.get('IsomorphicHelpers'))['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$load_context(true)};
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_7 = function(){var self = TMP_7.$$s || this;

            return self.$run_callback("before_mount")}, TMP_7.$$s = self, TMP_7.$$arity = 0, TMP_7), $a).call($b, self);
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_8.$$arity = 0);

        Opal.defn(self, '$component_did_mount', TMP_10 = function $$component_did_mount() {
          var $a, $b, TMP_9, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            self.$run_callback("after_mount");
              return (($scope.get('React')).$$scope.get('State')).$update_states_to_observe();}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_10.$$arity = 0);

        Opal.defn(self, '$component_will_receive_props', TMP_12 = function $$component_will_receive_props(next_props) {
          var $a, $b, TMP_11, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this;

            return self.$run_callback("before_receive_props", $scope.get('Hash').$new(next_props))}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_12.$$arity = 1);

        Opal.defn(self, '$component_will_update', TMP_14 = function $$component_will_update(next_props, next_state) {
          var $a, $b, TMP_13, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this;

            return self.$run_callback("before_update", $scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_14.$$arity = 2);

        Opal.defn(self, '$component_did_update', TMP_16 = function $$component_did_update(prev_props, prev_state) {
          var $a, $b, TMP_15, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_15 = function(){var self = TMP_15.$$s || this;

            self.$run_callback("after_update", $scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state));
              return (($scope.get('React')).$$scope.get('State')).$update_states_to_observe();}, TMP_15.$$s = self, TMP_15.$$arity = 0, TMP_15), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_16.$$arity = 2);

        Opal.defn(self, '$component_will_unmount', TMP_18 = function $$component_will_unmount() {
          var $a, $b, TMP_17, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_17 = function(){var self = TMP_17.$$s || this;

            self.$run_callback("before_unmount");
              return (($scope.get('React')).$$scope.get('State')).$remove();}, TMP_17.$$s = self, TMP_17.$$arity = 0, TMP_17), $a).call($b, self)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_18.$$arity = 0);

        self.$attr_reader("waiting_on_resources");

        Opal.defn(self, '$update_react_js_state', TMP_19 = function $$update_react_js_state(object, name, value) {
          var self = this;

          if (object !== false && object !== nil && object != null) {
            if (object['$=='](self)) {
              } else {
              name = "" + (object.$class()) + "." + (name)
            };
            return self.$set_state($hash("***_state_updated_at-***", $scope.get('Time').$now().$to_f(), name, value));
            } else {
            return self.$set_state($hash(name, value))
          };
        }, TMP_19.$$arity = 3);

        if ((($a = self['$method_defined?']("render")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          Opal.defn(self, '$render', TMP_20 = function $$render() {
            var self = this;

            return self.$raise("no render defined");
          }, TMP_20.$$arity = 0)
        };

        Opal.defn(self, '$_render_wrapper', TMP_23 = function $$_render_wrapper() {
          var $a, $b, TMP_21, self = this, e = nil;

          try {
            return ($a = ($b = (($scope.get('React')).$$scope.get('State'))).$set_state_context_to, $a.$$p = (TMP_21 = function(){var self = TMP_21.$$s || this, $c, $d, TMP_22, element = nil;

            element = ($c = ($d = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $c.$$p = (TMP_22 = function(){var self = TMP_22.$$s || this, $e;

              return ((($e = self.$render()) !== false && $e !== nil && $e != null) ? $e : "")}, TMP_22.$$s = self, TMP_22.$$arity = 0, TMP_22), $c).call($d, nil);
              if ((($c = element['$respond_to?']("waiting_on_resources")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
                self.waiting_on_resources = element.$waiting_on_resources()};
              return element;}, TMP_21.$$s = self, TMP_21.$$arity = 0, TMP_21), $a).call($b, self, true)
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {e = $err;
              try {
                return self.$class().$process_exception(e, self)
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_23.$$arity = 0);

        Opal.defn(self, '$watch', TMP_24 = function $$watch(value) {
          var self = this, $iter = TMP_24.$$p, on_change = $iter || nil;

          TMP_24.$$p = null;
          return $scope.get('Observable').$new(value, on_change);
        }, TMP_24.$$arity = 1);

        Opal.defn(self, '$define_state', TMP_25 = function $$define_state($a_rest) {
          var $b, $c, self = this, args, $iter = TMP_25.$$p, block = $iter || nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          TMP_25.$$p = null;
          return (($scope.get('React')).$$scope.get('State')).$initialize_states(self, ($b = ($c = self.$class()).$define_state, $b.$$p = block.$to_proc(), $b).apply($c, Opal.to_a(args)));
        }, TMP_25.$$arity = -1);
      })($scope.base)
    })($scope.base, null)
  })($scope.base);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope, TMP_26, TMP_27;

      Opal.defs(self, '$included', TMP_26 = function $$included(base) {
        var self = this;

        self.$deprecation_warning(base, "The module name React::Component has been deprecated.  Use Hyperloop::Component::Mixin instead.");
        return base.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
      }, TMP_26.$$arity = 1);

      Opal.defs(self, '$deprecation_warning', TMP_27 = function $$deprecation_warning(name, message) {
        var $a, self = this;
        if (self.deprecation_messages == null) self.deprecation_messages = nil;

        ((($a = self.deprecation_messages) !== false && $a !== nil && $a != null) ? $a : self.deprecation_messages = []);
        message = "Warning: Deprecated feature used in " + (name) + ". " + (message);
        if ((($a = self.deprecation_messages['$include?'](message)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil
          } else {
          self.deprecation_messages['$<<'](message);
          return (($scope.get('React')).$$scope.get('IsomorphicHelpers')).$log(message, "warning");
        };
      }, TMP_27.$$arity = 2);
    })($scope.base);

    (function($base) {
      var $ComponentNoNotice, self = $ComponentNoNotice = $module($base, 'ComponentNoNotice');

      var def = self.$$proto, $scope = self.$$scope, TMP_28;

      Opal.defs(self, '$included', TMP_28 = function $$included(base) {
        var self = this;

        return base.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
      }, TMP_28.$$arity = 1)
    })($scope.base);
  })($scope.base);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    nil
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/children"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$to_enum', '$length', '$>', '$new', '$call', '$<<', '$alias_method']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Children(){};
      var self = $Children = $klass($base, $super, 'Children', $Children);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

      def.children = def.length = nil;
      self.$include($scope.get('Enumerable'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(children) {
        var self = this;

        return self.children = children;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$each', TMP_2 = function $$each() {
        var $a, $b, TMP_3, self = this, $iter = TMP_2.$$p, block = $iter || nil, collection = nil, element = nil;

        TMP_2.$$p = null;
        if ((block !== nil)) {
          } else {
          return ($a = ($b = self).$to_enum, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return self.$length()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "each")
        };
        if ((($a = $rb_gt(self.$length(), 0)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return []
        };
        collection = [];
        
        React.Children.forEach(self.children, function(context){
          element = (($scope.get('React')).$$scope.get('Element')).$new(context)
        block.$call(element)
        collection['$<<'](element)
        })
      ;
        return collection;
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$length', TMP_4 = function $$length() {
        var $a, self = this;

        return ((($a = self.length) !== false && $a !== nil && $a != null) ? $a : self.length = React.Children.count(self.children));
      }, TMP_4.$$arity = 0);

      return self.$alias_method("size", "length");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/dsl_instance_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$require', '$new', '$props_wrapper', '$class']);
  self.$require("react/children");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $DslInstanceMethods, self = $DslInstanceMethods = $module($base, 'DslInstanceMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4;

        Opal.defn(self, '$children', TMP_1 = function $$children() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Children').$new(self["native"].props.children);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$params', TMP_2 = function $$params() {
          var $a, self = this;
          if (self.params == null) self.params = nil;

          return ((($a = self.params) !== false && $a !== nil && $a != null) ? $a : self.params = self.$class().$props_wrapper().$new(self));
        }, TMP_2.$$arity = 0);

        Opal.defn(self, '$props', TMP_3 = function $$props() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].props);
        }, TMP_3.$$arity = 0);

        Opal.defn(self, '$refs', TMP_4 = function $$refs() {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          return $scope.get('Hash').$new(self["native"].refs);
        }, TMP_4.$$arity = 0);
      })($scope.base)
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/component/should_component_update"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$set_state_context_to', '$new', '$respond_to?', '$!', '$call_needs_update', '$props_changed?', '$native_state_changed?', '$define_singleton_method', '$needs_update?', '$!=', '$sort', '$keys', '$props', '$detect']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Component, self = $Component = $module($base, 'Component');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base) {
        var $ShouldComponentUpdate, self = $ShouldComponentUpdate = $module($base, 'ShouldComponentUpdate');

        var def = self.$$proto, $scope = self.$$scope, TMP_2, TMP_5, TMP_6, TMP_8;

        Opal.defn(self, '$should_component_update?', TMP_2 = function(native_next_props, native_next_state) {
          var $a, $b, TMP_1, self = this;

          return ($a = ($b = $scope.get('State')).$set_state_context_to, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, next_params = nil;

          next_params = $scope.get('Hash').$new(native_next_props);
            if ((($c = self['$respond_to?']("needs_update?")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$call_needs_update(next_params, native_next_state)['$!']()['$!']()
              } else {
              return (((($c = self['$props_changed?'](next_params)) !== false && $c !== nil && $c != null) ? $c : self['$native_state_changed?'](native_next_state)))['$!']()['$!']()
            };}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b, self, false);
        }, TMP_2.$$arity = 2);

        Opal.defn(self, '$call_needs_update', TMP_5 = function $$call_needs_update(next_params, native_next_state) {
          var $a, $b, TMP_3, $c, TMP_4, self = this, component = nil, next_state = nil;

          component = self;
          ($a = ($b = next_params).$define_singleton_method, $a.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

          return component['$props_changed?'](self)}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $a).call($b, "changed?");
          next_state = $scope.get('Hash').$new(native_next_state);
          ($a = ($c = next_state).$define_singleton_method, $a.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

          return component['$native_state_changed?'](native_next_state)}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $a).call($c, "changed?");
          return self['$needs_update?'](next_params, next_state);
        }, TMP_5.$$arity = 2);

        Opal.defn(self, '$native_state_changed?', TMP_6 = function(next_state) {
          var self = this;
          if (self["native"] == null) self["native"] = nil;

          
          var current_state = self["native"].state
          var normalized_next_state =
            !next_state || Object.keys(next_state).length === 0 || nil == next_state ?
            false : next_state
          var normalized_current_state =
            !current_state || Object.keys(current_state).length === 0 || nil == current_state ?
            false : current_state
          if (!normalized_current_state != !normalized_next_state) return(true)
          if (!normalized_current_state && !normalized_next_state) return(false)
          if (!normalized_current_state['***_state_updated_at-***'] ||
              !normalized_next_state['***_state_updated_at-***']) return(true)
          return (normalized_current_state['***_state_updated_at-***'] !=
                  normalized_next_state['***_state_updated_at-***'])
        ;
        }, TMP_6.$$arity = 1);

        Opal.defn(self, '$props_changed?', TMP_8 = function(next_params) {
          var $a, $b, $c, TMP_7, self = this;

          return ((($a = (self.$props().$keys().$sort()['$!='](next_params.$keys().$sort()))) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = next_params).$detect, $b.$$p = (TMP_7 = function(k, v){var self = TMP_7.$$s || this;
            if (self["native"] == null) self["native"] = nil;
if (k == null) k = nil;if (v == null) v = nil;
          return v != self["native"].props[k];}, TMP_7.$$s = self, TMP_7.$$arity = 2, TMP_7), $b).call($c));
        }, TMP_8.$$arity = 1);
      })($scope.base)
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/element"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $hash = Opal.hash;

  Opal.add_stubs(['$require', '$include', '$alias_native', '$attr_reader', '$attr_accessor', '$each', '$merge_event_prop!', '$to_proc', '$to_n', '$shallow_to_n', '$properties', '$empty?', '$render', '$convert_props', '$new', '$type', '$merge', '$block', '$delete', '$as_node', '$rendered?', '$method_missing', '$dup', '$replace', '$build', '$build_new_properties', '$gsub', '$private', '$haml_class_name', '$class', '$[]=', '$join', '$uniq', '$split', '$[]', '$merge!', '$=~', '$merge_component_event_prop!', '$include?', '$event_camelize', '$merge_built_in_event_prop!', '$instance_variable_get', '$merge_deprecated_component_event_prop!', '$Array', '$deprecation_warning']);
  self.$require("react/ext/string");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Element(){};
      var self = $Element = $klass($base, $super, 'Element', $Element);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4, TMP_5, TMP_6, TMP_7, TMP_9, TMP_10, TMP_11, TMP_12, TMP_13, TMP_14, TMP_15;

      def.type = def.properties = nil;
      self.$include($scope.get('Native'));

      self.$alias_native("element_type", "type");

      self.$alias_native("props", "props");

      self.$attr_reader("type");

      self.$attr_reader("properties");

      self.$attr_reader("block");

      self.$attr_accessor("waiting_on_resources");

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element, type, properties, block) {
        var $a, $b, self = this;

        if (type == null) {
          type = nil;
        }
        if (properties == null) {
          properties = $hash2([], {});
        }
        if (block == null) {
          block = nil;
        }
        self.type = type;
        self.properties = ((($a = ((function() {if ((($b = typeof properties === 'undefined') !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return nil
          } else {
          return properties
        }; return nil; })())) !== false && $a !== nil && $a != null) ? $a : $hash2([], {}));
        self.block = block;
        return self["native"] = native_element;
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$on', TMP_2 = function $$on($a_rest) {
        var $b, $c, TMP_3, self = this, event_names, $iter = TMP_2.$$p, block = $iter || nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        event_names = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          event_names[$arg_idx - 0] = arguments[$arg_idx];
        }
        TMP_2.$$p = null;
        ($b = ($c = event_names).$each, $b.$$p = (TMP_3 = function(event_name){var self = TMP_3.$$s || this, $a, $d;
if (event_name == null) event_name = nil;
        return ($a = ($d = self)['$merge_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, event_name)}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $b).call($c);
        self["native"] = React.cloneElement(self.$to_n(), self.$properties().$shallow_to_n());
        return self;
      }, TMP_2.$$arity = -1);

      Opal.defn(self, '$render', TMP_4 = function $$render(props) {
        var $a, self = this, $iter = TMP_4.$$p, new_block = $iter || nil;

        if (props == null) {
          props = $hash2([], {});
        }
        TMP_4.$$p = null;
        if ((($a = props['$empty?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render(self)
          } else {
          props = $scope.get('API').$convert_props(props);
          return (($scope.get('React')).$$scope.get('RenderingContext')).$render($scope.get('Element').$new(React.cloneElement(self.$to_n(), props.$shallow_to_n()), self.$type(), self.$properties().$merge(props), self.$block()));
        };
      }, TMP_4.$$arity = -1);

      Opal.defn(self, '$delete', TMP_5 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$delete(self);
      }, TMP_5.$$arity = 0);

      Opal.defn(self, '$as_node', TMP_6 = function $$as_node() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext')).$as_node(self);
      }, TMP_6.$$arity = 0);

      Opal.defn(self, '$method_missing', TMP_7 = function $$method_missing(class_name, args) {
        var $a, $b, $c, TMP_8, self = this, $iter = TMP_7.$$p, new_block = $iter || nil;

        if (args == null) {
          args = $hash2([], {});
        }
        TMP_7.$$p = null;
        if ((($a = self['$rendered?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          return ($a = ($b = self.$dup().$render()).$method_missing, $a.$$p = new_block.$to_proc(), $a).call($b, class_name, args)
        };
        return (($scope.get('React')).$$scope.get('RenderingContext')).$replace(self, ($a = ($c = $scope.get('RenderingContext')).$build, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $d, $e;

        return ($d = ($e = $scope.get('RenderingContext')).$render, $d.$$p = new_block.$to_proc(), $d).call($e, self.$type(), self.$build_new_properties(class_name, args))}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($c));
      }, TMP_7.$$arity = -2);

      Opal.defn(self, '$rendered?', TMP_9 = function() {
        var self = this;

        return (($scope.get('React')).$$scope.get('RenderingContext'))['$rendered?'](self);
      }, TMP_9.$$arity = 0);

      Opal.defs(self, '$haml_class_name', TMP_10 = function $$haml_class_name(class_name) {
        var self = this;

        return class_name.$gsub(/__|_/, $hash2(["__", "_"], {"__": "_", "_": "-"}));
      }, TMP_10.$$arity = 1);

      self.$private();

      Opal.defn(self, '$build_new_properties', TMP_11 = function $$build_new_properties(class_name, args) {
        var self = this, new_props = nil;

        class_name = self.$class().$haml_class_name(class_name);
        new_props = self.$properties().$dup();
        new_props['$[]=']("className", ((((((((("        ") + (class_name)) + " ") + (new_props['$[]']("className"))) + " ") + (args.$delete("class"))) + " ") + (args.$delete("className"))) + "      ").$split(" ").$uniq().$join(" "));
        return new_props['$merge!'](args);
      }, TMP_11.$$arity = 2);

      Opal.defn(self, '$merge_event_prop!', TMP_12 = function(event_name) {
        var $a, $b, $c, $d, $e, $f, self = this, $iter = TMP_12.$$p, block = $iter || nil, name = nil;

        TMP_12.$$p = null;
        if ((($a = event_name['$=~'](/^<(.+)>$/)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($b, event_name.$gsub(/^<(.+)>$/, "\\1"))
        } else if ((($a = (((($scope.get('React')).$$scope.get('Event'))).$$scope.get('BUILT_IN_EVENTS'))['$include?'](name = "on" + (event_name.$event_camelize()))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($c = self)['$merge_built_in_event_prop!'], $a.$$p = block.$to_proc(), $a).call($c, name)
        } else if ((($a = self.type.$instance_variable_get("@native_import")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($d = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($d, name)
          } else {
          ($a = ($e = self)['$merge_deprecated_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($e, event_name);
          return ($a = ($f = self)['$merge_component_event_prop!'], $a.$$p = block.$to_proc(), $a).call($f, "on_" + (event_name));
        };
      }, TMP_12.$$arity = 1);

      Opal.defn(self, '$merge_built_in_event_prop!', TMP_13 = function(prop_name) {
        var self = this, $iter = TMP_13.$$p, $yield = $iter || nil;

        TMP_13.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(event){
            return Opal.yield1($yield, (($scope.get('React')).$$scope.get('Event')).$new(event))
          }
        ));
      }, TMP_13.$$arity = 1);

      Opal.defn(self, '$merge_component_event_prop!', TMP_14 = function(prop_name) {
        var self = this, $iter = TMP_14.$$p, $yield = $iter || nil;

        TMP_14.$$p = null;
        return self.properties['$merge!']($hash(prop_name, 
          function(){
            return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
          }
        ));
      }, TMP_14.$$arity = 1);

      return (Opal.defn(self, '$merge_deprecated_component_event_prop!', TMP_15 = function(event_name) {
        var self = this, $iter = TMP_15.$$p, $yield = $iter || nil, prop_name = nil, fn = nil;

        TMP_15.$$p = null;
        prop_name = "_on" + (event_name.$event_camelize());
        fn = function(){(($scope.get('React')).$$scope.get('Component')).$deprecation_warning(self.$type(), "In future releases React::Element#on('" + (event_name) + "') will no longer respond " + ("to the '" + (prop_name) + "' emitter.\n") + ("Rename your emitter param to 'on_" + (event_name) + "' or use .on('<" + (prop_name) + ">')"))
        return Opal.yieldX($yield, Opal.to_a(self.$Array(arguments)))
      };
        return self.properties['$merge!']($hash(prop_name, fn));
      }, TMP_15.$$arity = 1), nil) && 'merge_deprecated_component_event_prop!';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/event"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Event(){};
      var self = $Event = $klass($base, $super, 'Event', $Event);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      self.$include($scope.get('Native'));

      self.$alias_native("bubbles", "bubbles");

      self.$alias_native("cancelable", "cancelable");

      self.$alias_native("current_target", "currentTarget");

      self.$alias_native("default_prevented", "defaultPrevented");

      self.$alias_native("event_phase", "eventPhase");

      self.$alias_native("is_trusted?", "isTrusted");

      self.$alias_native("native_event", "nativeEvent");

      self.$alias_native("target", "target");

      self.$alias_native("timestamp", "timeStamp");

      self.$alias_native("event_type", "type");

      self.$alias_native("prevent_default", "preventDefault");

      self.$alias_native("stop_propagation", "stopPropagation");

      self.$alias_native("clipboard_data", "clipboardData");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("char_code", "charCode");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("key", "key");

      self.$alias_native("key_code", "keyCode");

      self.$alias_native("locale", "locale");

      self.$alias_native("location", "location");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("repeat", "repeat");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("which", "which");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("button", "button");

      self.$alias_native("buttons", "buttons");

      self.$alias_native("client_x", "clientX");

      self.$alias_native("client_y", "clientY");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("page_x", "pageX");

      self.$alias_native("page_y", "pageY");

      self.$alias_native("related_target", "relatedTarget");

      self.$alias_native("screen_x", "screen_x");

      self.$alias_native("screen_y", "screen_y");

      self.$alias_native("shift_key", "shift_key");

      self.$alias_native("alt_key", "altKey");

      self.$alias_native("changed_touches", "changedTouches");

      self.$alias_native("ctrl_key", "ctrlKey");

      self.$alias_native("get_modifier_state", "getModifierState");

      self.$alias_native("meta_key", "metaKey");

      self.$alias_native("shift_key", "shiftKey");

      self.$alias_native("target_touches", "targetTouches");

      self.$alias_native("touches", "touches");

      self.$alias_native("detail", "detail");

      self.$alias_native("view", "view");

      self.$alias_native("delta_mode", "deltaMode");

      self.$alias_native("delta_x", "deltaX");

      self.$alias_native("delta_y", "deltaY");

      self.$alias_native("delta_z", "deltaZ");

      Opal.cdecl($scope, 'BUILT_IN_EVENTS', ["onCopy", "onCut", "onPaste", "onKeyDown", "onKeyPress", "onKeyUp", "onFocus", "onBlur", "onChange", "onInput", "onSubmit", "onClick", "onDoubleClick", "onDrag", "onDragEnd", "onDragEnter", "onDragExit", "onDragLeave", "onDragOver", "onDragStart", "onDrop", "onMouseDown", "onMouseEnter", "onMouseLeave", "onMouseMove", "onMouseOut", "onMouseOver", "onMouseUp", "onTouchCancel", "onTouchEnd", "onTouchMove", "onTouchStart", "onScroll"]);

      return (Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native_element) {
        var self = this;

        return self["native"] = native_element;
      }, TMP_1.$$arity = 1), nil) && 'initialize';
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/native_library"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $range = Opal.range;

  Opal.add_stubs(['$each', '$lookup_native_name', '$create_component_wrapper', '$create_library_wrapper', '$raise', '$name', '$scope_native_name', '$+', '$downcase', '$[]', '$import_const_from_native', '$const_defined?', '$get_const', '$render', '$to_proc', '$private', '$native_react_component?', '$const_set', '$new', '$class_eval', '$include', '$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NativeLibrary(){};
      var self = $NativeLibrary = $klass($base, $super, 'NativeLibrary', $NativeLibrary);

      var def = self.$$proto, $scope = self.$$scope;

      return (function(self) {
        var $scope = self.$$scope, def = self.$$proto, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10, TMP_11;

        Opal.defn(self, '$imports', TMP_1 = function $$imports(native_name) {
          var self = this;

          self.native_prefix = "" + (native_name) + ".";
          return self;
        }, TMP_1.$$arity = 1);
        Opal.defn(self, '$rename', TMP_3 = function $$rename(rename_list) {
          var $a, $b, TMP_2, self = this;

          return ($a = ($b = rename_list).$each, $a.$$p = (TMP_2 = function(js_name, ruby_name){var self = TMP_2.$$s || this, $c, native_name = nil;
if (js_name == null) js_name = nil;if (ruby_name == null) ruby_name = nil;
          native_name = self.$lookup_native_name(js_name);
            if ((($c = self.$lookup_native_name(js_name)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return ((($c = self.$create_component_wrapper(self, native_name, ruby_name)) !== false && $c !== nil && $c != null) ? $c : self.$create_library_wrapper(self, native_name, ruby_name))
              } else {
              return self.$raise("class " + (self.$name()) + " < React::NativeLibrary could not import " + (js_name) + ". " + ("Native value " + (self.$scope_native_name(js_name)) + " is undefined."))
            };}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b);
        }, TMP_3.$$arity = 1);
        Opal.defn(self, '$import_const_from_native', TMP_4 = function $$import_const_from_native(klass, const_name, create_library) {
          var $a, $b, $c, self = this, native_name = nil;

          native_name = ((($a = self.$lookup_native_name(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$lookup_native_name($rb_plus(const_name['$[]'](0).$downcase(), const_name['$[]']($range(1, -1, false)))));
          return (($a = native_name !== false && native_name !== nil && native_name != null) ? (((($b = self.$create_component_wrapper(klass, native_name, const_name)) !== false && $b !== nil && $b != null) ? $b : ((($c = create_library !== false && create_library !== nil && create_library != null) ? self.$create_library_wrapper(klass, native_name, const_name) : create_library)))) : native_name);
        }, TMP_4.$$arity = 3);
        Opal.defn(self, '$const_missing', TMP_5 = function $$const_missing(const_name) {
          var $a, $b, $c, self = this, $iter = TMP_5.$$p, $yield = $iter || nil, $zuper = nil, $zuper_index = nil, $zuper_length = nil;

          TMP_5.$$p = null;
          $zuper = [];
          
          for($zuper_index = 0; $zuper_index < arguments.length; $zuper_index++) {
            $zuper[$zuper_index] = arguments[$zuper_index];
          }
          return ((($a = self.$import_const_from_native(self, const_name, true)) !== false && $a !== nil && $a != null) ? $a : ($b = ($c = self, Opal.find_super_dispatcher(self, 'const_missing', TMP_5, false)), $b.$$p = $iter, $b).apply($c, $zuper));
        }, TMP_5.$$arity = 1);
        Opal.defn(self, '$method_missing', TMP_6 = function $$method_missing(method, $a_rest) {
          var $b, $c, self = this, args, $iter = TMP_6.$$p, block = $iter || nil, component_class = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          TMP_6.$$p = null;
          if ((($b = self['$const_defined?'](method)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            component_class = self.$get_const(method)};
          ((($b = component_class) !== false && $b !== nil && $b != null) ? $b : component_class = self.$import_const_from_native(self, method, false));
          if (component_class !== false && component_class !== nil && component_class != null) {
            } else {
            self.$raise("could not import a react component named: " + (self.$scope_native_name(method)))
          };
          return ($b = ($c = (($scope.get('React')).$$scope.get('RenderingContext'))).$render, $b.$$p = block.$to_proc(), $b).apply($c, [component_class].concat(Opal.to_a(args)));
        }, TMP_6.$$arity = -2);
        self.$private();
        Opal.defn(self, '$lookup_native_name', TMP_7 = function $$lookup_native_name(js_name) {
          var self = this, native_name = nil;

          try {
            native_name = self.$scope_native_name(js_name);
            return eval(native_name) !== undefined && native_name;
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('Exception')])) {
              try {
                return nil
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          };
        }, TMP_7.$$arity = 1);
        Opal.defn(self, '$scope_native_name', TMP_8 = function $$scope_native_name(js_name) {
          var self = this;
          if (self.native_prefix == null) self.native_prefix = nil;

          return "" + (self.native_prefix) + (js_name);
        }, TMP_8.$$arity = 1);
        Opal.defn(self, '$create_component_wrapper', TMP_10 = function $$create_component_wrapper(klass, native_name, ruby_name) {
          var $a, $b, TMP_9, self = this, new_klass = nil;

          if ((($a = (($scope.get('React')).$$scope.get('API'))['$native_react_component?'](native_name)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            new_klass = klass.$const_set(ruby_name, $scope.get('Class').$new());
            ($a = ($b = new_klass).$class_eval, $a.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this;

            self.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
              return self.$imports(native_name);}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $a).call($b);
            return new_klass;
            } else {
            return nil
          };
        }, TMP_10.$$arity = 3);
        return (Opal.defn(self, '$create_library_wrapper', TMP_11 = function $$create_library_wrapper(klass, native_name, ruby_name) {
          var self = this;

          return klass.$const_set(ruby_name, $scope.get('Class').$new((($scope.get('React')).$$scope.get('NativeLibrary'))).$imports(native_name));
        }, TMP_11.$$arity = 3), nil) && 'create_library_wrapper';
      })(Opal.get_singleton_class(self))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/api"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$require', '$instance_variable_set', '$[]=', '$raise', '$eval_native_react_component', '$!', '$method_defined?', '$[]', '$name', '$respond_to?', '$to_n', '$prop_types', '$default_props', '$native_mixins', '$static_call_backs', '$component_will_mount', '$component_did_mount', '$component_will_receive_props', '$new', '$should_component_update?', '$component_will_update', '$component_did_update', '$component_will_unmount', '$send', '$<<', '$kind_of?', '$create_native_react_class', '$include?', '$is_a?', '$convert_props', '$shallow_to_n', '$each', '$flatten', '$map', '$==', '$lower_camelize', '$const_defined?', '$tr', '$html_attr?', '$private', '$split', '$first', '$concat', '$+', '$upcase', '$join']);
  self.$require("react/native_library");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $API(){};
      var self = $API = $klass($base, $super, 'API', $API);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_7, TMP_10, TMP_12;

      (Opal.cvars['@@component_classes'] = $hash2([], {}));

      Opal.defs(self, '$import_native_component', TMP_1 = function $$import_native_component(opal_class, native_class) {
        var $a, self = this;

        opal_class.$instance_variable_set("@native_import", true);
        return (($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]='](opal_class, native_class);
      }, TMP_1.$$arity = 2);

      Opal.defs(self, '$eval_native_react_component', TMP_2 = function $$eval_native_react_component(name) {
        var $a, $b, $c, self = this, component = nil, is_component_class = nil, is_functional_component = nil, is_not_using_react_v13 = nil;

        component = eval(name);
        if ((($a = component === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("" + (name) + " is not defined")};
        is_component_class = ($a = component.prototype !== undefined, $a !== false && $a !== nil && $a != null ?(((($b = !!component.prototype.isReactComponent) !== false && $b !== nil && $b != null) ? $b : !!component.prototype.render)) : $a);
        is_functional_component = typeof component === "function";
        is_not_using_react_v13 = !Opal.global.React.version.match(/0\.13/);
        if ((($a = ((($b = is_component_class) !== false && $b !== nil && $b != null) ? $b : ((($c = is_not_using_react_v13 !== false && is_not_using_react_v13 !== nil && is_not_using_react_v13 != null) ? is_functional_component : is_not_using_react_v13)))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("does not appear to be a native react component")
        };
        return component;
      }, TMP_2.$$arity = 1);

      Opal.defs(self, '$native_react_component?', TMP_3 = function(name) {
        var self = this;

        if (name == null) {
          name = nil;
        }
        try {
          if (name !== false && name !== nil && name != null) {
            } else {
            return false
          };
          return self.$eval_native_react_component(name);
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {
            try {
              return nil
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_3.$$arity = -1);

      Opal.defs(self, '$create_native_react_class', TMP_4 = function $$create_native_react_class(type) {
        var $a, $b, $c, $d, self = this, render_fn = nil;

        if ((($a = (type['$method_defined?']("render"))['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          self.$raise("Provided class should define `render` method")};
        render_fn = (function() {if ((($a = (type['$method_defined?']("_render_wrapper"))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return "_render_wrapper"
          } else {
          return "render"
        }; return nil; })();
        return ($a = type, $b = (($c = Opal.cvars['@@component_classes']) == null ? nil : $c), ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, 
        React.createClass({
          displayName: type.$name(),
          propTypes: (function() {if ((($d = type['$respond_to?']("prop_types")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$prop_types().$to_n()
          } else {
          return {};
        }; return nil; })(),
          getDefaultProps: function(){
            return (function() {if ((($d = type['$respond_to?']("default_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$default_props().$to_n()
          } else {
          return {};
        }; return nil; })();
          },
          mixins: (function() {if ((($d = type['$respond_to?']("native_mixins")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$native_mixins()
          } else {
          return [];
        }; return nil; })(),
          statics: (function() {if ((($d = type['$respond_to?']("static_call_backs")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return type.$static_call_backs().$to_n()
          } else {
          return {};
        }; return nil; })(),
          componentWillMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentDidMount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_mount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_mount()
          } else {
          return nil
        }; return nil; })();
          },
          componentWillReceiveProps: function(next_props) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_receive_props")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_receive_props($scope.get('Hash').$new(next_props))
          } else {
          return nil
        }; return nil; })();
          },
          shouldComponentUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("should_component_update?")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance)['$should_component_update?']($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUpdate: function(next_props, next_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_update($scope.get('Hash').$new(next_props), $scope.get('Hash').$new(next_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentDidUpdate: function(prev_props, prev_state) {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_did_update")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_did_update($scope.get('Hash').$new(prev_props), $scope.get('Hash').$new(prev_state))
          } else {
          return nil
        }; return nil; })();
          },
          componentWillUnmount: function() {
            var instance = this._getOpalInstance.apply(this);
            return (function() {if ((($d = type['$method_defined?']("component_will_unmount")) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
          return (instance).$component_will_unmount()
          } else {
          return nil
        }; return nil; })();
          },
          _getOpalInstance: function() {
            if (this.__opalInstance == undefined) {
              var instance = type.$new(this);
            } else {
              var instance = this.__opalInstance;
            }
            this.__opalInstance = instance;
            return instance;
          },
          render: function() {
            var instance = this._getOpalInstance.apply(this);
            return (instance).$send(render_fn).$to_n();
          }
        })
      )));
      }, TMP_4.$$arity = 1);

      Opal.defs(self, '$create_element', TMP_5 = function $$create_element(type, properties) {
        var $a, $b, TMP_6, self = this, $iter = TMP_5.$$p, block = $iter || nil, params = nil;

        if (properties == null) {
          properties = $hash2([], {});
        }
        TMP_5.$$p = null;
        params = [];
        if ((($a = (($b = Opal.cvars['@@component_classes']) == null ? nil : $b)['$[]'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<']((($a = Opal.cvars['@@component_classes']) == null ? nil : $a)['$[]'](type))
        } else if ((($a = type['$kind_of?']($scope.get('Class'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](self.$create_native_react_class(type))
        } else if ((($a = (((((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags'))).$$scope.get('HTML_TAGS'))['$include?'](type)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          params['$<<'](type)
        } else if ((($a = type['$is_a?']($scope.get('String'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return (($scope.get('React')).$$scope.get('Element')).$new(type)
          } else {
          self.$raise("" + (type) + " not implemented")
        };
        properties = self.$convert_props(properties);
        params['$<<'](properties.$shallow_to_n());
        if ((block !== nil)) {
          ($a = ($b = [Opal.yieldX(block, [])].$flatten()).$each, $a.$$p = (TMP_6 = function(ele){var self = TMP_6.$$s || this;
if (ele == null) ele = nil;
          return params['$<<'](ele.$to_n())}, TMP_6.$$s = self, TMP_6.$$arity = 1, TMP_6), $a).call($b)};
        return (($scope.get('React')).$$scope.get('Element')).$new(React.createElement.apply(null, params), type, properties, block);
      }, TMP_5.$$arity = -2);

      Opal.defs(self, '$clear_component_class_cache', TMP_7 = function $$clear_component_class_cache() {
        var self = this;

        return (Opal.cvars['@@component_classes'] = $hash2([], {}));
      }, TMP_7.$$arity = 0);

      Opal.defs(self, '$convert_props', TMP_10 = function $$convert_props(properties) {
        var $a, $b, TMP_8, self = this, props = nil;

        if ((($a = properties['$is_a?']($scope.get('Hash'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$raise("Component parameters must be a hash. Instead you sent " + (properties))
        };
        props = $hash2([], {});
        ($a = ($b = properties).$map, $a.$$p = (TMP_8 = function(key, value){var self = TMP_8.$$s || this, $c, $d, TMP_9;
if (key == null) key = nil;if (value == null) value = nil;
        if ((($c = (($d = key['$==']("class_name")) ? value['$is_a?']($scope.get('Hash')) : key['$==']("class_name"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), React.addons.classSet(value.$to_n()))
          } else if (key['$==']("class")) {
            return props['$[]=']("className", value)
          } else if ((($c = ["style", "dangerously_set_inner_HTML"]['$include?'](key)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return props['$[]='](self.$lower_camelize(key), value.$to_n())
          } else if ((($c = (($d = key['$==']("ref")) ? value['$is_a?']($scope.get('Proc')) : key['$==']("ref"))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            if ((($c = $scope.get('React')['$const_defined?']("RefsCallbackExtension")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              } else {
              
                console.error(
                  "Warning: Using deprecated behavior of ref callback,",
                  "require \"react/ref_callback\" to get the correct behavior."
                );
            
            };
            return props['$[]='](key, value);
          } else if ((($c = ($d = (($scope.get('React')).$$scope.get('HASH_ATTRIBUTES'))['$include?'](key), $d !== false && $d !== nil && $d != null ?value['$is_a?']($scope.get('Hash')) : $d)) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ($c = ($d = value).$each, $c.$$p = (TMP_9 = function(k, v){var self = TMP_9.$$s || this;
if (k == null) k = nil;if (v == null) v = nil;
            return props['$[]=']("" + (key) + "-" + (k.$tr("_", "-")), v.$to_n())}, TMP_9.$$s = self, TMP_9.$$arity = 2, TMP_9), $c).call($d)
            } else {
            return props['$[]=']((function() {if ((($c = $scope.get('React')['$html_attr?'](self.$lower_camelize(key))) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
              return self.$lower_camelize(key)
              } else {
              return key
            }; return nil; })(), value)
          }}, TMP_8.$$s = self, TMP_8.$$arity = 2, TMP_8), $a).call($b);
        return props;
      }, TMP_10.$$arity = 1);

      self.$private();

      return (Opal.defs(self, '$lower_camelize', TMP_12 = function $$lower_camelize(snake_cased_word) {
        var $a, $b, TMP_11, self = this, words = nil, result = nil;

        words = snake_cased_word.$split("_");
        result = [words.$first()];
        result.$concat(($a = ($b = words['$[]']($range(1, -1, false))).$map, $a.$$p = (TMP_11 = function(word){var self = TMP_11.$$s || this;
if (word == null) word = nil;
        return $rb_plus(word['$[]'](0).$upcase(), word['$[]']($range(1, -1, false)))}, TMP_11.$$s = self, TMP_11.$$arity = 1, TMP_11), $a).call($b));
        return result.$join("");
      }, TMP_12.$$arity = 1), nil) && 'lower_camelize';
    })($scope.base, null)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/object"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $klass = Opal.klass;

  Opal.add_stubs(['$_reactrb_tag_original_const_missing', '$html_tag_class_for', '$raise']);
  return (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope;

    return (function(self) {
      var $scope = self.$$scope, def = self.$$proto, TMP_1;

      Opal.alias(self, '_reactrb_tag_original_const_missing', 'const_missing');
      return (Opal.defn(self, '$const_missing', TMP_1 = function $$const_missing(const_name) {
        var $a, self = this, e = nil;

        try {
          return self.$_reactrb_tag_original_const_missing(const_name)
        } catch ($err) {
          if (Opal.rescue($err, [$scope.get('StandardError')])) {e = $err;
            try {
              return ((($a = (((($scope.get('React')).$$scope.get('Component'))).$$scope.get('Tags')).$html_tag_class_for(const_name)) !== false && $a !== nil && $a != null) ? $a : self.$raise(e))
            } finally { Opal.pop_exception() }
          } else { throw $err; }
        };
      }, TMP_1.$$arity = 1), nil) && 'const_missing';
    })(Opal.get_singleton_class(self))
  })($scope.base, null)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/ext/opal-jquery/element"] = function(Opal) {
  var $a, $b, TMP_1, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2;

  Opal.add_stubs(['$const_defined?', '$instance_eval', '$dom_node', '$find', '$define_method', '$to_n', '$new', '$class_eval', '$render', '$to_proc', '$create_element']);
  if ((($a = $scope.get('Object')['$const_defined?']("Element")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    return ($a = ($b = $scope.get('Element')).$instance_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, TMP_2, TMP_3, $c, $d, TMP_4;

    Opal.defs(self, '$find', TMP_2 = function $$find(selector) {
        var $a, self = this;

        if ((($a = selector.$dom_node !== undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          selector = (function() { try {
            return selector.$dom_node()
          } catch ($err) {
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
              try {
                return selector
              } finally { Opal.pop_exception() }
            } else { throw $err; }
          }})()};
        return $(selector);
      }, TMP_2.$$arity = 1);
      Opal.defs(self, '$[]', TMP_3 = function(selector) {
        var self = this;

        return self.$find(selector);
      }, TMP_3.$$arity = 1);
      return ($c = ($d = self).$define_method, $c.$$p = (TMP_4 = function(container, params){var self = TMP_4.$$s || this, block, $e, $f, TMP_5, klass = nil;

        block = TMP_4.$$p || nil, TMP_4.$$p = null;
        if (container == null) {
          container = nil;
        }
        if (params == null) {
          params = $hash2([], {});
        }
      if ((($e = self.$to_n()._reactrb_component_class === undefined) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
          self.$to_n()._reactrb_component_class = $scope.get('Class').$new((($scope.get('Hyperloop')).$$scope.get('Component')));};
        klass = self.$to_n()._reactrb_component_class;
        ($e = ($f = klass).$class_eval, $e.$$p = (TMP_5 = function(){var self = TMP_5.$$s || this, $g, $h;

        return ($g = ($h = self).$render, $g.$$p = block.$to_proc(), $g).call($h, container, params)}, TMP_5.$$s = self, TMP_5.$$arity = 0, TMP_5), $e).call($f);
        return $scope.get('React').$render($scope.get('React').$create_element(self.$to_n()._reactrb_component_class), self);}, TMP_4.$$s = self, TMP_4.$$arity = -1, TMP_4), $c).call($d, "render");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b)
    } else {
    return nil
  }
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/config/client"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$extend', '$[]=', '$config', '$default_config']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $Config, self = $Config = $module($base, 'Config');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      self.$extend(self);

      Opal.defn(self, '$environment=', TMP_1 = function(value) {
        var self = this;

        return self.$config()['$[]=']("environment", value);
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$config', TMP_2 = function $$config() {
        var $a, self = this;
        if (self.config == null) self.config = nil;

        return ((($a = self.config) !== false && $a !== nil && $a != null) ? $a : self.config = self.$default_config());
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$default_config', TMP_3 = function $$default_config() {
        var self = this;

        return $hash2(["environment"], {"environment": "express"});
      }, TMP_3.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/config"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice;

  Opal.add_stubs(['$!=', '$require']);
  if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
    } else {
    return self.$require("react/config/client")
  }
};

/* Generated by Opal 0.10.5 */
Opal.modules["json"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2, $klass = Opal.klass;

  Opal.add_stubs(['$new', '$push', '$[]=', '$[]', '$create_id', '$json_create', '$attr_accessor', '$create_id=', '$===', '$parse', '$generate', '$from_object', '$merge', '$to_json', '$responds_to?', '$to_io', '$write', '$to_s', '$to_a', '$strftime']);
  (function($base) {
    var $JSON, self = $JSON = $module($base, 'JSON');

    var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7;

    
    var $parse  = JSON.parse,
        $hasOwn = Opal.hasOwnProperty;

    function to_opal(value, options) {
      var klass, arr, hash, i, ii, k;

      switch (typeof value) {
        case 'string':
          return value;

        case 'number':
          return value;

        case 'boolean':
          return !!value;

        case 'null':
          return nil;

        case 'object':
          if (!value) return nil;

          if (value.$$is_array) {
            arr = (options.array_class).$new();

            for (i = 0, ii = value.length; i < ii; i++) {
              (arr).$push(to_opal(value[i], options));
            }

            return arr;
          }
          else {
            hash = (options.object_class).$new();

            for (k in value) {
              if ($hasOwn.call(value, k)) {
                (hash)['$[]='](k, to_opal(value[k], options));
              }
            }

            if (!options.parse && (klass = (hash)['$[]']($scope.get('JSON').$create_id())) != nil) {
              klass = Opal.get(klass);
              return (klass).$json_create(hash);
            }
            else {
              return hash;
            }
          }
        }
    };
  

    (function(self) {
      var $scope = self.$$scope, def = self.$$proto;

      return self.$attr_accessor("create_id")
    })(Opal.get_singleton_class(self));

    (($a = ["json_class"]), $b = self, $b['$create_id='].apply($b, $a), $a[$a.length-1]);

    Opal.defs(self, '$[]', TMP_1 = function(value, options) {
      var $a, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      if ((($a = $scope.get('String')['$==='](value)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return self.$parse(value, options)
        } else {
        return self.$generate(value, options)
      };
    }, TMP_1.$$arity = -2);

    Opal.defs(self, '$parse', TMP_2 = function $$parse(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options.$merge($hash2(["parse"], {"parse": true})));
    }, TMP_2.$$arity = -2);

    Opal.defs(self, '$parse!', TMP_3 = function(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$parse(source, options);
    }, TMP_3.$$arity = -2);

    Opal.defs(self, '$load', TMP_4 = function $$load(source, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return self.$from_object($parse(source), options);
    }, TMP_4.$$arity = -2);

    Opal.defs(self, '$from_object', TMP_5 = function $$from_object(js_object, options) {
      var $a, $b, $c, self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      ($a = "object_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Hash'))));
      ($a = "array_class", $b = options, ((($c = $b['$[]']($a)) !== false && $c !== nil && $c != null) ? $c : $b['$[]=']($a, $scope.get('Array'))));
      return to_opal(js_object, options.$$smap);
    }, TMP_5.$$arity = -2);

    Opal.defs(self, '$generate', TMP_6 = function $$generate(obj, options) {
      var self = this;

      if (options == null) {
        options = $hash2([], {});
      }
      return obj.$to_json(options);
    }, TMP_6.$$arity = -2);

    Opal.defs(self, '$dump', TMP_7 = function $$dump(obj, io, limit) {
      var $a, self = this, string = nil;

      if (io == null) {
        io = nil;
      }
      if (limit == null) {
        limit = nil;
      }
      string = self.$generate(obj);
      if (io !== false && io !== nil && io != null) {
        if ((($a = io['$responds_to?']("to_io")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          io = io.$to_io()};
        io.$write(string);
        return io;
        } else {
        return string
      };
    }, TMP_7.$$arity = -2);
  })($scope.base);
  (function($base, $super) {
    function $Object(){};
    var self = $Object = $klass($base, $super, 'Object', $Object);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$to_json', TMP_8 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_8.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base) {
    var $Enumerable, self = $Enumerable = $module($base, 'Enumerable');

    var def = self.$$proto, $scope = self.$$scope, TMP_9;

    Opal.defn(self, '$to_json', TMP_9 = function $$to_json() {
      var self = this;

      return self.$to_a().$to_json();
    }, TMP_9.$$arity = 0)
  })($scope.base);
  (function($base, $super) {
    function $Array(){};
    var self = $Array = $klass($base, $super, 'Array', $Array);

    var def = self.$$proto, $scope = self.$$scope, TMP_10;

    return (Opal.defn(self, '$to_json', TMP_10 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, length = self.length; i < length; i++) {
        result.push((self[i]).$to_json());
      }

      return '[' + result.join(', ') + ']';
    
    }, TMP_10.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Boolean(){};
    var self = $Boolean = $klass($base, $super, 'Boolean', $Boolean);

    var def = self.$$proto, $scope = self.$$scope, TMP_11;

    return (Opal.defn(self, '$to_json', TMP_11 = function $$to_json() {
      var self = this;

      return (self == true) ? 'true' : 'false';
    }, TMP_11.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Hash(){};
    var self = $Hash = $klass($base, $super, 'Hash', $Hash);

    var def = self.$$proto, $scope = self.$$scope, TMP_12;

    return (Opal.defn(self, '$to_json', TMP_12 = function $$to_json() {
      var self = this;

      
      var result = [];

      for (var i = 0, keys = self.$$keys, length = keys.length, key, value; i < length; i++) {
        key = keys[i];

        if (key.$$is_string) {
          value = self.$$smap[key];
        } else {
          value = key.value;
          key = key.key;
        }

        result.push((key).$to_s().$to_json() + ':' + (value).$to_json());
      }

      return '{' + result.join(', ') + '}';
    ;
    }, TMP_12.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $NilClass(){};
    var self = $NilClass = $klass($base, $super, 'NilClass', $NilClass);

    var def = self.$$proto, $scope = self.$$scope, TMP_13;

    return (Opal.defn(self, '$to_json', TMP_13 = function $$to_json() {
      var self = this;

      return "null";
    }, TMP_13.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $Numeric(){};
    var self = $Numeric = $klass($base, $super, 'Numeric', $Numeric);

    var def = self.$$proto, $scope = self.$$scope, TMP_14;

    return (Opal.defn(self, '$to_json', TMP_14 = function $$to_json() {
      var self = this;

      return self.toString();
    }, TMP_14.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  (function($base, $super) {
    function $String(){};
    var self = $String = $klass($base, $super, 'String', $String);

    var def = self.$$proto, $scope = self.$$scope;

    return Opal.alias(self, 'to_json', 'inspect')
  })($scope.base, null);
  (function($base, $super) {
    function $Time(){};
    var self = $Time = $klass($base, $super, 'Time', $Time);

    var def = self.$$proto, $scope = self.$$scope, TMP_15;

    return (Opal.defn(self, '$to_json', TMP_15 = function $$to_json() {
      var self = this;

      return self.$strftime("%FT%T%z").$to_json();
    }, TMP_15.$$arity = 0), nil) && 'to_json'
  })($scope.base, null);
  return (function($base, $super) {
    function $Date(){};
    var self = $Date = $klass($base, $super, 'Date', $Date);

    var def = self.$$proto, $scope = self.$$scope, TMP_16, TMP_17;

    Opal.defn(self, '$to_json', TMP_16 = function $$to_json() {
      var self = this;

      return self.$to_s().$to_json();
    }, TMP_16.$$arity = 0);

    return (Opal.defn(self, '$as_json', TMP_17 = function $$as_json() {
      var self = this;

      return self.$to_s();
    }, TMP_17.$$arity = 0), nil) && 'as_json';
  })($scope.base, null);
};

/* Generated by Opal 0.10.5 */
Opal.modules["reactive-ruby/isomorphic_helpers"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $range = Opal.range, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$require', '$extend', '$!=', '$!', '$unique_id', '$on_opal_server?', '$log', '$new', '$is_a?', '$==', '$[]', '$config', '$+', '$class', '$on_opal_client?', '$join', '$collect', '$call', '$prerender_footer_blocks', '$attr_reader', '$run', '$each', '$before_first_mount_blocks', '$eval', '$length', '$load!', '$<<', '$first', '$send_to_server', '$to_json', '$parse', '$controller', '$context', '$register_before_first_mount_block', '$to_proc', '$register_prerender_footer_block', '$send', '$result']);
  self.$require("react/config");
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $IsomorphicHelpers, self = $IsomorphicHelpers = $module($base, 'IsomorphicHelpers');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, $a, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_8, TMP_10;

      Opal.defs(self, '$included', TMP_1 = function $$included(base) {
        var self = this;

        return base.$extend($scope.get('ClassMethods'));
      }, TMP_1.$$arity = 1);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$load_context', TMP_2 = function $$load_context(unique_id, name) {
          var $a, $b, $c, self = this, message = nil;
          if (self.context == null) self.context = nil;

          if (unique_id == null) {
            unique_id = nil;
          }
          if (name == null) {
            name = nil;
          }
          if ((($a = ((($b = ((($c = unique_id['$!']()) !== false && $c !== nil && $c != null) ? $c : self.context['$!']())) !== false && $b !== nil && $b != null) ? $b : self.context.$unique_id()['$!='](unique_id))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
              
              try {console.history = [] } catch ($err) { 
                if (Opal.rescue($err, [$scope.get('StandardError')])) {
                nil
                } else { throw $err; } };
              message = "************************ React Prerendering Context Initialized " + (name) + " ***********************";
              } else {
              message = "************************ React Browser Context Initialized ****************************"
            };
            self.$log(message);
            self.context = $scope.get('Context').$new(unique_id);};
          return self.context;
        }, TMP_2.$$arity = -1)
      };

      Opal.defs(self, '$log', TMP_3 = function $$log(message, message_type) {
        var $a, $b, $c, self = this, is_production = nil, style = nil;

        if (message_type == null) {
          message_type = "info";
        }
        if ((($a = message['$is_a?']($scope.get('Array'))) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          message = [message]
        };
        is_production = (($scope.get('React')).$$scope.get('Config')).$config()['$[]']("environment")['$==']("production");
        if ((($a = ($b = (((($c = message_type['$==']("info")) !== false && $c !== nil && $c != null) ? $c : message_type['$==']("warning"))), $b !== false && $b !== nil && $b != null ?is_production : $b)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return nil};
        if (message_type['$==']("info")) {
          if ((($a = self['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            style = "background: #00FFFF; color: red"
            } else {
            style = "background: #222; color: #bada55"
          };
          message = $rb_plus([$rb_plus("%c", message['$[]'](0)), style], message['$[]']($range(1, -1, false)));
          return console.log.apply(console, message);
        } else if (message_type['$==']("warning")) {
          return console.warn.apply(console, message);
          } else {
          return console.error.apply(console, message);
        };
      }, TMP_3.$$arity = -2);

      if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        } else {
        Opal.defs(self, '$on_opal_server?', TMP_4 = function() {
          var self = this;

          return typeof Opal.global.document === 'undefined';
        }, TMP_4.$$arity = 0);

        Opal.defs(self, '$on_opal_client?', TMP_5 = function() {
          var self = this;

          return self['$on_opal_server?']()['$!']();
        }, TMP_5.$$arity = 0);
      };

      Opal.defn(self, '$log', TMP_6 = function $$log($a_rest) {
        var $b, self = this, args;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$on_opal_server?', TMP_7 = function() {
        var self = this;

        return self.$class()['$on_opal_server?']();
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$on_opal_client?', TMP_8 = function() {
        var self = this;

        return self.$class()['$on_opal_client?']();
      }, TMP_8.$$arity = 0);

      Opal.defs(self, '$prerender_footers', TMP_10 = function $$prerender_footers(controller) {
        var $a, $b, TMP_9, self = this, footer = nil;

        if (controller == null) {
          controller = nil;
        }
        footer = ($a = ($b = $scope.get('Context').$prerender_footer_blocks()).$collect, $a.$$p = (TMP_9 = function(block){var self = TMP_9.$$s || this;
if (block == null) block = nil;
        return block.$call(controller)}, TMP_9.$$s = self, TMP_9.$$arity = 1, TMP_9), $a).call($b).$join("\n");
        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
        return footer;
      }, TMP_10.$$arity = -1);

      (function($base, $super) {
        function $Context(){};
        var self = $Context = $klass($base, $super, 'Context', $Context);

        var def = self.$$proto, $scope = self.$$scope, TMP_11, TMP_12, TMP_14, TMP_15, TMP_17, TMP_18, TMP_19;

        def.ctx = nil;
        self.$attr_reader("controller");

        self.$attr_reader("unique_id");

        Opal.defs(self, '$before_first_mount_blocks', TMP_11 = function $$before_first_mount_blocks() {
          var $a, self = this;
          if (self.before_first_mount_blocks == null) self.before_first_mount_blocks = nil;

          return ((($a = self.before_first_mount_blocks) !== false && $a !== nil && $a != null) ? $a : self.before_first_mount_blocks = []);
        }, TMP_11.$$arity = 0);

        Opal.defs(self, '$prerender_footer_blocks', TMP_12 = function $$prerender_footer_blocks() {
          var $a, self = this;
          if (self.prerender_footer_blocks == null) self.prerender_footer_blocks = nil;

          return ((($a = self.prerender_footer_blocks) !== false && $a !== nil && $a != null) ? $a : self.prerender_footer_blocks = []);
        }, TMP_12.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_14 = function $$initialize(unique_id, ctx, controller, name) {
          var $a, $b, TMP_13, self = this;

          if (ctx == null) {
            ctx = nil;
          }
          if (controller == null) {
            controller = nil;
          }
          if (name == null) {
            name = nil;
          }
          self.unique_id = unique_id;
          if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {};
          (((($scope.get('Hyperloop')).$$scope.get('Application'))).$$scope.get('Boot')).$run($hash2(["context"], {"context": self}));
          return ($a = ($b = self.$class().$before_first_mount_blocks()).$each, $a.$$p = (TMP_13 = function(block){var self = TMP_13.$$s || this;
if (block == null) block = nil;
          return block.$call(self)}, TMP_13.$$s = self, TMP_13.$$arity = 1, TMP_13), $a).call($b);
        }, TMP_14.$$arity = -2);

        Opal.defn(self, '$eval', TMP_15 = function(js) {
          var $a, self = this;

          if ((($a = self.ctx) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.ctx.$eval(js)
            } else {
            return nil
          };
        }, TMP_15.$$arity = 1);

        Opal.defn(self, '$send_to_opal', TMP_17 = function $$send_to_opal(method, $a_rest) {
          var $b, $c, TMP_16, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 1;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 1; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 1] = arguments[$arg_idx];
          }
          if ((($b = self.ctx) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            } else {
            return nil
          };
          if (args.$length()['$=='](0)) {
            args = [1]};
          ((Opal.get('ReactiveRuby')).$$scope.get('ComponentLoader')).$new(self.ctx)['$load!']();
          return self.ctx.$eval("Opal.React.$const_get('IsomorphicHelpers').$" + (method) + "(" + (($b = ($c = args).$collect, $b.$$p = (TMP_16 = function(arg){var self = TMP_16.$$s || this;
if (arg == null) arg = nil;
          return "'" + (arg) + "'"}, TMP_16.$$s = self, TMP_16.$$arity = 1, TMP_16), $b).call($c).$join(", ")) + ")");
        }, TMP_17.$$arity = -2);

        Opal.defs(self, '$register_before_first_mount_block', TMP_18 = function $$register_before_first_mount_block() {
          var self = this, $iter = TMP_18.$$p, block = $iter || nil;

          TMP_18.$$p = null;
          return self.$before_first_mount_blocks()['$<<'](block);
        }, TMP_18.$$arity = 0);

        return (Opal.defs(self, '$register_prerender_footer_block', TMP_19 = function $$register_prerender_footer_block() {
          var self = this, $iter = TMP_19.$$p, block = $iter || nil;

          TMP_19.$$p = null;
          return self.$prerender_footer_blocks()['$<<'](block);
        }, TMP_19.$$arity = 0), nil) && 'register_prerender_footer_block';
      })($scope.base, null);

      (function($base, $super) {
        function $IsomorphicProcCall(){};
        var self = $IsomorphicProcCall = $klass($base, $super, 'IsomorphicProcCall', $IsomorphicProcCall);

        var def = self.$$proto, $scope = self.$$scope, TMP_20, TMP_21, TMP_22, TMP_23, TMP_24;

        def.result = def.name = nil;
        self.$attr_reader("context");

        Opal.defn(self, '$result', TMP_20 = function $$result() {
          var $a, self = this;

          if ((($a = self.result) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result.$first()
            } else {
            return nil
          };
        }, TMP_20.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_21 = function $$initialize(name, block, context, $a_rest) {
          var $b, $c, $d, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 3;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 3; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 3] = arguments[$arg_idx];
          }
          self.name = name;
          self.context = context;
          ($b = block).$call.apply($b, [self].concat(Opal.to_a(args)));
          if ((($c = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return ((($c = self.result) !== false && $c !== nil && $c != null) ? $c : self.result = ($d = self).$send_to_server.apply($d, Opal.to_a(args)))
            } else {
            return nil
          };
        }, TMP_21.$$arity = -4);

        Opal.defn(self, '$when_on_client', TMP_22 = function $$when_on_client() {
          var $a, self = this, $iter = TMP_22.$$p, block = $iter || nil;

          TMP_22.$$p = null;
          if ((($a = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.result = [block.$call()]
            } else {
            return nil
          };
        }, TMP_22.$$arity = 0);

        Opal.defn(self, '$send_to_server', TMP_23 = function $$send_to_server($a_rest) {
          var $b, self = this, args, args_as_json = nil;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          if ((($b = $scope.get('IsomorphicHelpers')['$on_opal_server?']()) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
            args_as_json = args.$to_json();
            return self.result = [$scope.get('JSON').$parse(Opal.global.ServerSideIsomorphicMethods[self.name](args_as_json))];
            } else {
            return nil
          };
        }, TMP_23.$$arity = -1);

        return (Opal.defn(self, '$when_on_server', TMP_24 = function $$when_on_server() {
          var $a, $b, self = this, $iter = TMP_24.$$p, block = $iter || nil;

          TMP_24.$$p = null;
          if ((($a = ((($b = $scope.get('IsomorphicHelpers')['$on_opal_client?']()) !== false && $b !== nil && $b != null) ? $b : $scope.get('IsomorphicHelpers')['$on_opal_server?']())) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return nil
            } else {
            return self.result = [block.$call().$to_json()]
          };
        }, TMP_24.$$arity = 0), nil) && 'when_on_server';
      })($scope.base, null);

      (function($base) {
        var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

        var def = self.$$proto, $scope = self.$$scope, TMP_25, TMP_26, TMP_27, TMP_28, TMP_29, TMP_30, $a, TMP_31;

        Opal.defn(self, '$on_opal_server?', TMP_25 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_server?']();
        }, TMP_25.$$arity = 0);

        Opal.defn(self, '$on_opal_client?', TMP_26 = function() {
          var self = this;

          return $scope.get('IsomorphicHelpers')['$on_opal_client?']();
        }, TMP_26.$$arity = 0);

        Opal.defn(self, '$log', TMP_27 = function $$log($a_rest) {
          var $b, self = this, args;

          var $args_len = arguments.length, $rest_len = $args_len - 0;
          if ($rest_len < 0) { $rest_len = 0; }
          args = new Array($rest_len);
          for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
            args[$arg_idx - 0] = arguments[$arg_idx];
          }
          return ($b = $scope.get('IsomorphicHelpers')).$log.apply($b, Opal.to_a(args));
        }, TMP_27.$$arity = -1);

        Opal.defn(self, '$controller', TMP_28 = function $$controller() {
          var self = this;

          return $scope.get('IsomorphicHelpers').$context().$controller();
        }, TMP_28.$$arity = 0);

        Opal.defn(self, '$before_first_mount', TMP_29 = function $$before_first_mount() {
          var $a, $b, self = this, $iter = TMP_29.$$p, block = $iter || nil;

          TMP_29.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_before_first_mount_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_29.$$arity = 0);

        Opal.defn(self, '$prerender_footer', TMP_30 = function $$prerender_footer() {
          var $a, $b, self = this, $iter = TMP_30.$$p, block = $iter || nil;

          TMP_30.$$p = null;
          return ($a = ($b = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('Context'))).$register_prerender_footer_block, $a.$$p = block.$to_proc(), $a).call($b);
        }, TMP_30.$$arity = 0);

        if ((($a = $scope.get('RUBY_ENGINE')['$!=']("opal")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          } else {
          self.$require("json");

          Opal.defn(self, '$isomorphic_method', TMP_31 = function $$isomorphic_method(name) {
            var $a, $b, TMP_32, self = this, $iter = TMP_31.$$p, block = $iter || nil;

            TMP_31.$$p = null;
            return ($a = ($b = self.$class()).$send, $a.$$p = (TMP_32 = function($c_rest){var self = TMP_32.$$s || this, args, $d;

              var $args_len = arguments.length, $rest_len = $args_len - 0;
              if ($rest_len < 0) { $rest_len = 0; }
              args = new Array($rest_len);
              for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
                args[$arg_idx - 0] = arguments[$arg_idx];
              }
            return ($d = (((($scope.get('React')).$$scope.get('IsomorphicHelpers'))).$$scope.get('IsomorphicProcCall'))).$new.apply($d, [name, block, self].concat(Opal.to_a(args))).$result()}, TMP_32.$$s = self, TMP_32.$$arity = -1, TMP_32), $a).call($b, "define_method", name);
          }, TMP_31.$$arity = 1);
        };
      })($scope.base);
    })($scope.base)
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["rails-helpers/top_level_rails_component"] = function(Opal) {
  function $rb_plus(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs + rhs : lhs['$+'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$export_component', '$param', '$backtrace', '$start_with?', '$component_name', '$params', '$<<', '$gsub', '$inject', '$const_get', '$split', '$method_defined?', '$present', '$render_params', '$each', '$==', '$+', '$name', '$controller', '$search_path', '$class', '$raise', '$join', '$search_path=', '$!', '$include?', '$add_to_react_search_path']);
  (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $TopLevelRailsComponent(){};
      var self = $TopLevelRailsComponent = $klass($base, $super, 'TopLevelRailsComponent', $TopLevelRailsComponent);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_7;

      self.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));

      Opal.defs(self, '$search_path', TMP_1 = function $$search_path() {
        var $a, self = this;
        if (self.search_path == null) self.search_path = nil;

        return ((($a = self.search_path) !== false && $a !== nil && $a != null) ? $a : self.search_path = [$scope.get('Module')]);
      }, TMP_1.$$arity = 0);

      self.$export_component();

      self.$param("component_name");

      self.$param("controller");

      self.$param("render_params");

      self.$backtrace("off");

      return (Opal.defn(self, '$render', TMP_7 = function $$render() {try {

        var $a, $b, TMP_2, $c, TMP_3, $d, TMP_5, self = this, paths_searched = nil, component = nil;

        paths_searched = [];
        if ((($a = self.$params().$component_name()['$start_with?']("::")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          paths_searched['$<<'](self.$params().$component_name().$gsub(/^\:\:/, ""));
          component = (function() {
          try {return ($a = ($b = self.$params().$component_name().$gsub(/^\:\:/, "").$split("::")).$inject, $a.$$p = (TMP_2 = function(scope, next_const){var self = TMP_2.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
          return scope.$const_get(next_const, false)}, TMP_2.$$s = self, TMP_2.$$arity = 2, TMP_2), $a).call($b, $scope.get('Module')) } catch ($err) { 
            if (Opal.rescue($err, [$scope.get('StandardError')])) {
            return nil
            } else { throw $err; } }})();
          if ((($a = (($c = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
            return self.$present(component, self.$params().$render_params())};
          } else {
          ($a = ($c = self.$class().$search_path()).$each, $a.$$p = (TMP_3 = function(path){var self = TMP_3.$$s || this, $d, $e, TMP_4, $f;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$controller()) + "::" + (self.$params().$component_name()));
            component = (function() {
            try {return ($d = ($e = (((("") + (self.$params().$controller())) + "::") + (self.$params().$component_name())).$split("::")).$inject, $d.$$p = (TMP_4 = function(scope, next_const){var self = TMP_4.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_4.$$s = self, TMP_4.$$arity = 2, TMP_4), $d).call($e, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($d = (($f = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $d != null && (!$d.$$is_boolean || $d == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($c);
          ($a = ($d = self.$class().$search_path()).$each, $a.$$p = (TMP_5 = function(path){var self = TMP_5.$$s || this, $e, $f, TMP_6, $g;
if (path == null) path = nil;
          paths_searched['$<<']("" + ((function() {if (path['$==']($scope.get('Module'))) {
              return nil
              } else {
              return $rb_plus(path.$name(), "::")
            }; return nil; })()) + (self.$params().$component_name()));
            component = (function() {
            try {return ($e = ($f = (("") + (self.$params().$component_name())).$split("::")).$inject, $e.$$p = (TMP_6 = function(scope, next_const){var self = TMP_6.$$s || this;
if (scope == null) scope = nil;if (next_const == null) next_const = nil;
            return scope.$const_get(next_const, false)}, TMP_6.$$s = self, TMP_6.$$arity = 2, TMP_6), $e).call($f, path) } catch ($err) { 
              if (Opal.rescue($err, [$scope.get('StandardError')])) {
              return nil
              } else { throw $err; } }})();
            if ((($e = (($g = component !== false && component !== nil && component != null) ? component['$method_defined?']("render") : component)) !== nil && $e != null && (!$e.$$is_boolean || $e == true))) {
              Opal.ret(self.$present(component, self.$params().$render_params()))
              } else {
              return nil
            };}, TMP_5.$$s = self, TMP_5.$$arity = 1, TMP_5), $a).call($d);
        };
        return self.$raise("Could not find component class '" + (self.$params().$component_name()) + "' for params.controller '" + (self.$params().$controller()) + "' in any component directory. Tried [" + (paths_searched.$join(", ")) + "]");
        } catch ($returner) { if ($returner === Opal.returner) { return $returner.$v } throw $returner; }
      }, TMP_7.$$arity = 0), nil) && 'render';
    })($scope.base, null)
  })($scope.base);
  (function($base, $super) {
    function $Module(){};
    var self = $Module = $klass($base, $super, 'Module', $Module);

    var def = self.$$proto, $scope = self.$$scope, TMP_8;

    return (Opal.defn(self, '$add_to_react_search_path', TMP_8 = function $$add_to_react_search_path(replace_search_path) {
      var $a, $b, self = this;

      if (replace_search_path == null) {
        replace_search_path = nil;
      }
      if (replace_search_path !== false && replace_search_path !== nil && replace_search_path != null) {
        return (($a = [[self]]), $b = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')), $b['$search_path='].apply($b, $a), $a[$a.length-1])
      } else if ((($a = (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$include?'](self)['$!']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
        return (($scope.get('React')).$$scope.get('TopLevelRailsComponent')).$search_path()['$<<'](self)
        } else {
        return nil
      };
    }, TMP_8.$$arity = -1), nil) && 'add_to_react_search_path'
  })($scope.base, null);
  return (function($base) {
    var $Components, self = $Components = $module($base, 'Components');

    var def = self.$$proto, $scope = self.$$scope;

    self.$add_to_react_search_path()
  })($scope.base);
};

/* Generated by Opal 0.10.5 */
Opal.modules["reactive-ruby/version"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    Opal.cdecl($scope, 'VERSION', "0.12.7")
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-react"] = function(Opal) {
  var $a, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $hash2 = Opal.hash2, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==', '$raise', '$join', '$include', '$deprecation_warning']);
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-store");
  $scope.get('Hyperloop').$import("react/react-source-browser");
  $scope.get('Hyperloop').$import("react/react-source-server", $hash2(["server_only"], {"server_only": true}));
  $scope.get('Hyperloop').$import("opal-jquery", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("browser/delay", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("react_ujs", $hash2(["client_only"], {"client_only": true}));
  $scope.get('Hyperloop').$import("hyper-react");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, null)
    })($scope.base);
    if ((($a = Opal.global.React === undefined || Opal.global.React.version === undefined) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      self.$raise(["No React.js Available", "", "A global `React` must be defined before requiring 'hyper-react'", "", "To USE THE BUILT-IN SOURCE: ", "   add 'require \"react/react-source-browser\"' immediately before the 'require \"hyper-react\" directive.", "IF USING WEBPACK:", "   add 'react' to your webpack manifest."].$join("\n"))};
    self.$require("react/hash");
    self.$require("react/top_level");
    self.$require("react/observable");
    self.$require("react/validator");
    self.$require("react/component");
    self.$require("react/component/dsl_instance_methods");
    self.$require("react/component/should_component_update");
    self.$require("react/component/tags");
    self.$require("react/component/base");
    self.$require("react/element");
    self.$require("react/event");
    self.$require("react/api");
    self.$require("react/rendering_context");
    self.$require("react/state");
    self.$require("react/object");
    self.$require("react/ext/opal-jquery/element");
    self.$require("reactive-ruby/isomorphic_helpers");
    self.$require("rails-helpers/top_level_rails_component");
    self.$require("reactive-ruby/version");
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
          var self = this;

          return child.$include($scope.get('Mixin'));
        }, TMP_1.$$arity = 1), nil) && 'inherited'
      })($scope.base, null)
    })($scope.base);
    if ((($a = (function(){ try { return (((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('VERSION'))) != null ? 'constant' : nil); } catch (err) { if (err.$$class === Opal.NameError) { return nil; } else { throw(err); }}; })()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      return nil
      } else {
      return (($scope.get('React')).$$scope.get('Component')).$deprecation_warning("components.rb", "Requiring 'hyper-react' is deprecated.  Use gem 'hyper-component', and require 'hyper-component' instead.")
    };};
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$require', '$import', '$==']);
  self.$require("hyperloop/component/version");
  self.$require("hyperloop-config");
  $scope.get('Hyperloop').$import("hyper-component");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    (function($base) {
      var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

      var def = self.$$proto, $scope = self.$$scope;

      (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope;

        return nil;
      })($scope.base, null)
    })($scope.base);
    return self.$require("hyper-react");};
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/router"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return self.$imports("ReactRouter")
    })($scope.base, (($scope.get('React')).$$scope.get('NativeLibrary')))
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/router/dom"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$imports']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $DOM(){};
        var self = $DOM = $klass($base, $super, 'DOM', $DOM);

        var def = self.$$proto, $scope = self.$$scope;

        return self.$imports("ReactRouterDOM")
      })($scope.base, (($scope.get('React')).$$scope.get('NativeLibrary')))
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["react/router/history"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$new', '$alias_native']);
  return (function($base) {
    var $React, self = $React = $module($base, 'React');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $History(){};
        var self = $History = $klass($base, $super, 'History', $History);

        var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

        def["native"] = nil;
        self.$include($scope.get('Native'));

        Opal.defs(self, '$current', TMP_1 = function $$current() {
          var self = this;

          return self.$new(History);
        }, TMP_1.$$arity = 0);

        Opal.defn(self, '$initialize', TMP_2 = function $$initialize(native$) {
          var self = this;

          return self["native"] = native$;
        }, TMP_2.$$arity = 1);

        Opal.defn(self, '$to_n', TMP_3 = function $$to_n() {
          var self = this;

          return self["native"];
        }, TMP_3.$$arity = 0);

        self.$alias_native("create_browser_history", "createBrowserHistory");

        self.$alias_native("create_hash_history", "createHashHistory");

        self.$alias_native("create_location", "createLocation");

        self.$alias_native("create_memory_history", "createMemoryHistory");

        return self.$alias_native("create_path", "createPath");
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/isomorphic_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$isomorphic_method', '$when_on_client', '$send_to_server', '$when_on_server', '$fullpath', '$request', '$controller', '$context']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $IsomorphicMethods(){};
      var self = $IsomorphicMethods = $klass($base, $super, 'IsomorphicMethods', $IsomorphicMethods);

      var def = self.$$proto, $scope = self.$$scope, $a, $b, TMP_1;

      self.$include((($scope.get('React')).$$scope.get('IsomorphicHelpers')));

      return ($a = ($b = self).$isomorphic_method, $a.$$p = (TMP_1 = function(f){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3;
if (f == null) f = nil;
      ($c = ($d = f).$when_on_client, $c.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

        return window.location.pathname;}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $c).call($d);
        f.$send_to_server();
        return ($c = ($e = f).$when_on_server, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

        return f.$context().$controller().$request().$fullpath()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($e);}, TMP_1.$$s = self, TMP_1.$$arity = 1, TMP_1), $a).call($b, "request_fullpath");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/history"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$new', '$alias_native']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $History(){};
      var self = $History = $klass($base, $super, 'History', $History);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$) {
        var self = this;

        return self["native"] = native$;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$to_n', TMP_2 = function $$to_n() {
        var self = this;

        return self["native"];
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$location', TMP_3 = function $$location() {
        var self = this;

        return (($scope.get('HyperRouter')).$$scope.get('Location')).$new(self["native"].location);
      }, TMP_3.$$arity = 0);

      self.$alias_native("block");

      self.$alias_native("create_href", "createHref");

      self.$alias_native("go");

      self.$alias_native("go_back", "goBack");

      self.$alias_native("go_forward", "goForward");

      self.$alias_native("push", "push");

      return self.$alias_native("replace", "replace");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/location"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2, $range = Opal.range;

  Opal.add_stubs(['$include', '$blank?', '$search', '$[]', '$map', '$split', '$alias_native']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Location(){};
      var self = $Location = $klass($base, $super, 'Location', $Location);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_4;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$) {
        var self = this;

        return self["native"] = native$;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$to_n', TMP_2 = function $$to_n() {
        var self = this;

        return self["native"];
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$query', TMP_4 = function $$query() {
        var $a, $b, TMP_3, self = this;

        if ((($a = self.$search()['$blank?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return $hash2([], {})};
        return $scope.get('Hash')['$[]'](($a = ($b = self.$search()['$[]']($range(1, -1, false)).$split("&")).$map, $a.$$p = (TMP_3 = function(part){var self = TMP_3.$$s || this, $c, $d, name = nil, value = nil;
if (part == null) part = nil;
        $d = part.$split("="), $c = Opal.to_ary($d), name = ($c[0] == null ? nil : $c[0]), value = ($c[1] == null ? nil : $c[1]), $d;
          return [decodeURIComponent(name), decodeURIComponent(value)];}, TMP_3.$$s = self, TMP_3.$$arity = 1, TMP_3), $a).call($b));
      }, TMP_4.$$arity = 0);

      self.$alias_native("pathname");

      self.$alias_native("search");

      self.$alias_native("hash");

      self.$alias_native("state");

      return self.$alias_native("key");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/match"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include', '$alias_native']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Match(){};
      var self = $Match = $klass($base, $super, 'Match', $Match);

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      def["native"] = nil;
      self.$include($scope.get('Native'));

      Opal.defn(self, '$initialize', TMP_1 = function $$initialize(native$) {
        var self = this;

        return self["native"] = native$;
      }, TMP_1.$$arity = 1);

      Opal.defn(self, '$to_n', TMP_2 = function $$to_n() {
        var self = this;

        return self["native"];
      }, TMP_2.$$arity = 0);

      self.$alias_native("params");

      self.$alias_native("is_exact", "isExact");

      self.$alias_native("path");

      return self.$alias_native("url");
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/class_methods"] = function(Opal) {
  function $rb_gt(lhs, rhs) {
    return (typeof(lhs) === 'number' && typeof(rhs) === 'number') ? lhs > rhs : lhs['$>'](rhs);
  }
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$>', '$count', '$first', '$send', '$to_s', '$new', '$to_n', '$history', '$on_opal_server?', '$prerender_router', '$to_proc', '$render_router', '$private', '$create_browser_history', '$current', '$create_hash_history', '$create_memory_history', '$define_method', '$raise', '$Router', '$instance_eval', '$tap', '$split', '$request_fullpath', '$[]=', '$StaticRouter']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $NoHistoryError(){};
      var self = $NoHistoryError = $klass($base, $super, 'NoHistoryError', $NoHistoryError);

      var def = self.$$proto, $scope = self.$$scope;

      return nil;
    })($scope.base, $scope.get('StandardError'));

    (function($base) {
      var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2, TMP_3, TMP_4, TMP_5, TMP_6, TMP_7, TMP_10;

      Opal.defn(self, '$history', TMP_1 = function $$history($a_rest) {
        var $b, self = this, args;
        if (self.__history_type == null) self.__history_type = nil;
        if (self.__history == null) self.__history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        if ((($b = $rb_gt(args.$count(), 0)) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return self.__history_type = args.$first()
        } else if ((($b = self.__history_type) !== nil && $b != null && (!$b.$$is_boolean || $b == true))) {
          return ((($b = self.__history) !== false && $b !== nil && $b != null) ? $b : self.__history = self.$send(("" + self.__history_type.$to_s() + "_history")))
          } else {
          return nil
        };
      }, TMP_1.$$arity = -1);

      Opal.defn(self, '$location', TMP_2 = function $$location() {
        var $a, self = this;
        if (self.__location == null) self.__location = nil;

        return ((($a = self.__location) !== false && $a !== nil && $a != null) ? $a : self.__location = $scope.get('Location').$new(self.$history().$to_n().location));
      }, TMP_2.$$arity = 0);

      Opal.defn(self, '$route', TMP_3 = function $$route() {
        var $a, $b, $c, self = this, $iter = TMP_3.$$p, block = $iter || nil;

        TMP_3.$$p = null;
        if ((($a = (($scope.get('React')).$$scope.get('IsomorphicHelpers'))['$on_opal_server?']()) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          return ($a = ($b = self).$prerender_router, $a.$$p = block.$to_proc(), $a).call($b)
          } else {
          return ($a = ($c = self).$render_router, $a.$$p = block.$to_proc(), $a).call($c)
        };
      }, TMP_3.$$arity = 0);

      self.$private();

      Opal.defn(self, '$browser_history', TMP_4 = function $$browser_history() {
        var $a, self = this;
        if (self.__browser_history == null) self.__browser_history = nil;

        return ((($a = self.__browser_history) !== false && $a !== nil && $a != null) ? $a : self.__browser_history = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('History')).$current().$create_browser_history());
      }, TMP_4.$$arity = 0);

      Opal.defn(self, '$hash_history', TMP_5 = function $$hash_history($a_rest) {
        var $b, $c, self = this, args;
        if (self.__hash_history == null) self.__hash_history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ((($b = self.__hash_history) !== false && $b !== nil && $b != null) ? $b : self.__hash_history = ($c = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('History')).$current()).$create_hash_history.apply($c, Opal.to_a(args)));
      }, TMP_5.$$arity = -1);

      Opal.defn(self, '$memory_history', TMP_6 = function $$memory_history($a_rest) {
        var $b, $c, self = this, args;
        if (self.__memory_history == null) self.__memory_history = nil;

        var $args_len = arguments.length, $rest_len = $args_len - 0;
        if ($rest_len < 0) { $rest_len = 0; }
        args = new Array($rest_len);
        for (var $arg_idx = 0; $arg_idx < $args_len; $arg_idx++) {
          args[$arg_idx - 0] = arguments[$arg_idx];
        }
        return ((($b = self.__memory_history) !== false && $b !== nil && $b != null) ? $b : self.__memory_history = ($c = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('History')).$current()).$create_memory_history.apply($c, Opal.to_a(args)));
      }, TMP_6.$$arity = -1);

      Opal.defn(self, '$render_router', TMP_7 = function $$render_router() {
        var $a, $b, TMP_8, self = this, $iter = TMP_7.$$p, block = $iter || nil;

        TMP_7.$$p = null;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_8 = function(){var self = TMP_8.$$s || this, $c, $d, TMP_9;

        if ((($c = self.$history()) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            } else {
            self.$raise((($scope.get('HyperRouter')).$$scope.get('NoHistoryError')), "A history must be defined")
          };
          return ($c = ($d = (($scope.get('React')).$$scope.get('Router'))).$Router, $c.$$p = (TMP_9 = function(){var self = TMP_9.$$s || this, $e, $f;

          return ($e = ($f = self).$instance_eval, $e.$$p = block.$to_proc(), $e).call($f)}, TMP_9.$$s = self, TMP_9.$$arity = 0, TMP_9), $c).call($d, $hash2(["history"], {"history": self.$history().$to_n()}));}, TMP_8.$$s = self, TMP_8.$$arity = 0, TMP_8), $a).call($b, "render");
      }, TMP_7.$$arity = 0);

      Opal.defn(self, '$prerender_router', TMP_10 = function $$prerender_router() {
        var $a, $b, TMP_11, self = this, $iter = TMP_10.$$p, block = $iter || nil;

        TMP_10.$$p = null;
        return ($a = ($b = self).$define_method, $a.$$p = (TMP_11 = function(){var self = TMP_11.$$s || this, $c, $d, TMP_12, $e, TMP_13, location = nil;

        location = ($c = ($d = $hash2([], {})).$tap, $c.$$p = (TMP_12 = function(hash){var self = TMP_12.$$s || this, $e, $f, pathname = nil, search = nil;
if (hash == null) hash = nil;
          $f = $scope.get('IsomorphicMethods').$request_fullpath().$split("?", 2), $e = Opal.to_ary($f), pathname = ($e[0] == null ? nil : $e[0]), search = ($e[1] == null ? nil : $e[1]), $f;
            hash['$[]=']("pathname", pathname);
            return hash['$[]=']("search", (function() {if (search !== false && search !== nil && search != null) {
              return "?" + (search)
              } else {
              return ""
            }; return nil; })());}, TMP_12.$$s = self, TMP_12.$$arity = 1, TMP_12), $c).call($d);
          return ($c = ($e = (($scope.get('React')).$$scope.get('Router'))).$StaticRouter, $c.$$p = (TMP_13 = function(){var self = TMP_13.$$s || this, $f, $g;

          return ($f = ($g = self).$instance_eval, $f.$$p = block.$to_proc(), $f).call($g)}, TMP_13.$$s = self, TMP_13.$$arity = 0, TMP_13), $c).call($e, $hash2(["location", "context"], {"location": location.$to_n(), "context": $hash2([], {}).$to_n()}));}, TMP_11.$$s = self, TMP_11.$$arity = 0, TMP_11), $a).call($b, "render");
      }, TMP_10.$$arity = 0);
    })($scope.base);
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/component_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $hash2 = Opal.hash2;

  Opal.add_stubs(['$[]=', '$to_n', '$tap', '$[]', '$delete', '$Link', '$to_proc', '$NavLink', '$Redirect', '$new', '$lambda', '$format_params', '$create_element', '$values', '$Route', '$Switch']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $ComponentMethods, self = $ComponentMethods = $module($base, 'ComponentMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_3, TMP_4, TMP_5, TMP_6, TMP_9;

      Opal.defn(self, '$Link', TMP_1 = function $$Link(to, opts) {
        var $a, $b, TMP_2, $c, self = this, $iter = TMP_1.$$p, children = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_1.$$p = null;
        opts['$[]=']("to", ($a = ($b = $hash2([], {})).$tap, $a.$$p = (TMP_2 = function(hash){var self = TMP_2.$$s || this, $c;
if (hash == null) hash = nil;
        hash['$[]=']("pathname", to);
          if ((($c = opts['$[]']("search")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            hash['$[]=']("search", opts.$delete("search"))};
          if ((($c = opts['$[]']("hash")) !== nil && $c != null && (!$c.$$is_boolean || $c == true))) {
            return hash['$[]=']("hash", opts.$delete("hash"))
            } else {
            return nil
          };}, TMP_2.$$s = self, TMP_2.$$arity = 1, TMP_2), $a).call($b).$to_n());
        return ($a = ($c = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DOM'))).$Link, $a.$$p = children.$to_proc(), $a).call($c, opts);
      }, TMP_1.$$arity = -2);

      Opal.defn(self, '$NavLink', TMP_3 = function $$NavLink(to, opts) {
        var $a, $b, self = this, $iter = TMP_3.$$p, children = $iter || nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_3.$$p = null;
        opts['$[]=']("to", to.$to_n());
        if ((($a = opts['$[]']("active_class")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("activeClassName", opts.$delete("active_class").$to_n())};
        if ((($a = opts['$[]']("active_style")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("activeStyle", opts.$delete("active_style").$to_n())};
        if ((($a = opts['$[]']("active")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          opts['$[]=']("isActive", opts.$delete("active").$to_n())};
        return ($a = ($b = (((($scope.get('React')).$$scope.get('Router'))).$$scope.get('DOM'))).$NavLink, $a.$$p = children.$to_proc(), $a).call($b, opts);
      }, TMP_3.$$arity = -2);

      Opal.defn(self, '$Redirect', TMP_4 = function $$Redirect(to, opts) {
        var self = this;

        if (opts == null) {
          opts = $hash2([], {});
        }
        opts['$[]=']("to", to.$to_n());
        return (($scope.get('React')).$$scope.get('Router')).$Redirect(opts);
      }, TMP_4.$$arity = -2);

      Opal.defn(self, '$format_params', TMP_5 = function $$format_params(e) {
        var self = this;

        return $hash2(["match", "location", "history"], {"match": (($scope.get('HyperRouter')).$$scope.get('Match')).$new(e.match), "location": (($scope.get('HyperRouter')).$$scope.get('Location')).$new(e.location), "history": (($scope.get('HyperRouter')).$$scope.get('History')).$new(e.history)});
      }, TMP_5.$$arity = 1);

      Opal.defn(self, '$Route', TMP_6 = function $$Route(to, opts) {
        var $a, $b, TMP_7, $c, TMP_8, self = this, $iter = TMP_6.$$p, block = $iter || nil, component = nil;

        if (opts == null) {
          opts = $hash2([], {});
        }
        TMP_6.$$p = null;
        opts['$[]=']("path", to.$to_n());
        if ((($a = opts['$[]']("mounts")) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
          component = opts.$delete("mounts");
          opts['$[]=']("component", ($a = ($b = self).$lambda, $a.$$p = (TMP_7 = function(e){var self = TMP_7.$$s || this, route_params = nil;
if (e == null) e = nil;
          route_params = self.$format_params(e);
            return $scope.get('React').$create_element(component, route_params).$to_n();}, TMP_7.$$s = self, TMP_7.$$arity = 1, TMP_7), $a).call($b));};
        if (block !== false && block !== nil && block != null) {
          opts['$[]=']("render", ($a = ($c = self).$lambda, $a.$$p = (TMP_8 = function(e){var self = TMP_8.$$s || this, route_params = nil;
if (e == null) e = nil;
          route_params = self.$format_params(e);
            return Opal.yield1(block, route_params.$values()).$to_n();}, TMP_8.$$s = self, TMP_8.$$arity = 1, TMP_8), $a).call($c))};
        return (($scope.get('React')).$$scope.get('Router')).$Route(opts);
      }, TMP_6.$$arity = -2);

      Opal.defn(self, '$Switch', TMP_9 = function $$Switch() {
        var $a, $b, self = this, $iter = TMP_9.$$p, children = $iter || nil;

        TMP_9.$$p = null;
        return ($a = ($b = (($scope.get('React')).$$scope.get('Router'))).$Switch, $a.$$p = children.$to_proc(), $a).call($b);
      }, TMP_9.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyper-router/instance_methods"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module;

  Opal.add_stubs(['$history', '$class', '$location']);
  return (function($base) {
    var $HyperRouter, self = $HyperRouter = $module($base, 'HyperRouter');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base) {
      var $InstanceMethods, self = $InstanceMethods = $module($base, 'InstanceMethods');

      var def = self.$$proto, $scope = self.$$scope, TMP_1, TMP_2;

      Opal.defn(self, '$history', TMP_1 = function $$history() {
        var self = this;

        return self.$class().$history();
      }, TMP_1.$$arity = 0);

      Opal.defn(self, '$location', TMP_2 = function $$location() {
        var self = this;

        return self.$class().$location();
      }, TMP_2.$$arity = 0);
    })($scope.base)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/base"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Base, self = $Base = $module($base, 'Base');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defs(self, '$included', TMP_1 = function $$included(base) {
          var self = this;

          base.$extend((($scope.get('HyperRouter')).$$scope.get('ClassMethods')));
          base.$include((($scope.get('HyperRouter')).$$scope.get('InstanceMethods')));
          return base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
        }, TMP_1.$$arity = 1)
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/browser"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Browser, self = $Browser = $module($base, 'Browser');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defs(self, '$included', TMP_1 = function $$included(base) {
          var self = this;

          base.$extend((($scope.get('HyperRouter')).$$scope.get('ClassMethods')));
          base.$history("browser");
          base.$include((($scope.get('HyperRouter')).$$scope.get('InstanceMethods')));
          return base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
        }, TMP_1.$$arity = 1)
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/mixin"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass, $hash2 = Opal.hash2;

  Opal.add_stubs(['$include', '$class_eval', '$param', '$define_method', '$match', '$params', '$location', '$history']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Mixin, self = $Mixin = $module($base, 'Mixin');

        var def = self.$$proto, $scope = self.$$scope;

        (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_5;

          return (Opal.defn(self, '$included', TMP_5 = function $$included(base) {
            var $a, $b, TMP_1, self = this;

            base.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
            base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
            return ($a = ($b = base).$class_eval, $a.$$p = (TMP_1 = function(){var self = TMP_1.$$s || this, $c, $d, TMP_2, $e, TMP_3, $f, TMP_4;

            self.$param("match", $hash2(["default"], {"default": nil}));
              self.$param("location", $hash2(["default"], {"default": nil}));
              self.$param("history", $hash2(["default"], {"default": nil}));
              ($c = ($d = self).$define_method, $c.$$p = (TMP_2 = function(){var self = TMP_2.$$s || this;

              return self.$params().$match()}, TMP_2.$$s = self, TMP_2.$$arity = 0, TMP_2), $c).call($d, "match");
              ($c = ($e = self).$define_method, $c.$$p = (TMP_3 = function(){var self = TMP_3.$$s || this;

              return self.$params().$location()}, TMP_3.$$s = self, TMP_3.$$arity = 0, TMP_3), $c).call($e, "location");
              return ($c = ($f = self).$define_method, $c.$$p = (TMP_4 = function(){var self = TMP_4.$$s || this;

              return self.$params().$history()}, TMP_4.$$s = self, TMP_4.$$arity = 0, TMP_4), $c).call($f, "history");}, TMP_1.$$s = self, TMP_1.$$arity = 0, TMP_1), $a).call($b);
          }, TMP_5.$$arity = 1), nil) && 'included'
        })(Opal.get_singleton_class(self))
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/component"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base, $super) {
        function $Component(){};
        var self = $Component = $klass($base, $super, 'Component', $Component);

        var def = self.$$proto, $scope = self.$$scope;

        return (function(self) {
          var $scope = self.$$scope, def = self.$$proto, TMP_1;

          return (Opal.defn(self, '$inherited', TMP_1 = function $$inherited(base) {
            var self = this;

            return base.$include($scope.get('Mixin'));
          }, TMP_1.$$arity = 1), nil) && 'inherited'
        })(Opal.get_singleton_class(self))
      })($scope.base, null)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/hash"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Hash, self = $Hash = $module($base, 'Hash');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defs(self, '$included', TMP_1 = function $$included(base) {
          var self = this;

          base.$extend((($scope.get('HyperRouter')).$$scope.get('ClassMethods')));
          base.$history("hash");
          base.$include((($scope.get('HyperRouter')).$$scope.get('InstanceMethods')));
          return base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
        }, TMP_1.$$arity = 1)
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/memory"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$extend', '$history', '$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Memory, self = $Memory = $module($base, 'Memory');

        var def = self.$$proto, $scope = self.$$scope, TMP_1;

        Opal.defs(self, '$included', TMP_1 = function $$included(base) {
          var self = this;

          base.$extend((($scope.get('HyperRouter')).$$scope.get('ClassMethods')));
          base.$history("memory");
          base.$include((($scope.get('HyperRouter')).$$scope.get('InstanceMethods')));
          return base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
        }, TMP_1.$$arity = 1)
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router/static"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$prerender_router', '$to_proc', '$extend', '$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope;

      return (function($base) {
        var $Static, self = $Static = $module($base, 'Static');

        var def = self.$$proto, $scope = self.$$scope, TMP_2;

        (function($base) {
          var $ClassMethods, self = $ClassMethods = $module($base, 'ClassMethods');

          var def = self.$$proto, $scope = self.$$scope, TMP_1;

          Opal.defn(self, '$route', TMP_1 = function $$route() {
            var $a, $b, self = this, $iter = TMP_1.$$p, block = $iter || nil;

            TMP_1.$$p = null;
            return ($a = ($b = self).$prerender_router, $a.$$p = block.$to_proc(), $a).call($b);
          }, TMP_1.$$arity = 0)
        })($scope.base);

        Opal.defs(self, '$included', TMP_2 = function $$included(base) {
          var self = this;

          base.$extend((($scope.get('HyperRouter')).$$scope.get('ClassMethods')));
          base.$extend($scope.get('ClassMethods'));
          base.$include((($scope.get('HyperRouter')).$$scope.get('InstanceMethods')));
          return base.$include((($scope.get('HyperRouter')).$$scope.get('ComponentMethods')));
        }, TMP_2.$$arity = 1);
      })($scope.base)
    })($scope.base, null)
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
Opal.modules["hyperloop/router"] = function(Opal) {
  var self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, $module = Opal.module, $klass = Opal.klass;

  Opal.add_stubs(['$include']);
  return (function($base) {
    var $Hyperloop, self = $Hyperloop = $module($base, 'Hyperloop');

    var def = self.$$proto, $scope = self.$$scope;

    (function($base, $super) {
      function $Router(){};
      var self = $Router = $klass($base, $super, 'Router', $Router);

      var def = self.$$proto, $scope = self.$$scope, TMP_1;

      return (Opal.defs(self, '$inherited', TMP_1 = function $$inherited(child) {
        var self = this;

        child.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
        return child.$include($scope.get('Base'));
      }, TMP_1.$$arity = 1), nil) && 'inherited'
    })($scope.base, null);

    (function($base, $super) {
      function $BrowserRouter(){};
      var self = $BrowserRouter = $klass($base, $super, 'BrowserRouter', $BrowserRouter);

      var def = self.$$proto, $scope = self.$$scope, TMP_2;

      return (Opal.defs(self, '$inherited', TMP_2 = function $$inherited(child) {
        var self = this;

        child.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
        return child.$include((((($scope.get('Hyperloop')).$$scope.get('Router'))).$$scope.get('Browser')));
      }, TMP_2.$$arity = 1), nil) && 'inherited'
    })($scope.base, null);

    (function($base, $super) {
      function $HashRouter(){};
      var self = $HashRouter = $klass($base, $super, 'HashRouter', $HashRouter);

      var def = self.$$proto, $scope = self.$$scope, TMP_3;

      return (Opal.defs(self, '$inherited', TMP_3 = function $$inherited(child) {
        var self = this;

        child.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
        return child.$include((((($scope.get('Hyperloop')).$$scope.get('Router'))).$$scope.get('Hash')));
      }, TMP_3.$$arity = 1), nil) && 'inherited'
    })($scope.base, null);

    (function($base, $super) {
      function $MemoryRouter(){};
      var self = $MemoryRouter = $klass($base, $super, 'MemoryRouter', $MemoryRouter);

      var def = self.$$proto, $scope = self.$$scope, TMP_4;

      return (Opal.defs(self, '$inherited', TMP_4 = function $$inherited(child) {
        var self = this;

        child.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
        return child.$include((((($scope.get('Hyperloop')).$$scope.get('Router'))).$$scope.get('Memory')));
      }, TMP_4.$$arity = 1), nil) && 'inherited'
    })($scope.base, null);

    (function($base, $super) {
      function $StaticRouter(){};
      var self = $StaticRouter = $klass($base, $super, 'StaticRouter', $StaticRouter);

      var def = self.$$proto, $scope = self.$$scope, TMP_5;

      return (Opal.defs(self, '$inherited', TMP_5 = function $$inherited(child) {
        var self = this;

        child.$include((((($scope.get('Hyperloop')).$$scope.get('Component'))).$$scope.get('Mixin')));
        return child.$include((((($scope.get('Hyperloop')).$$scope.get('Router'))).$$scope.get('Static')));
      }, TMP_5.$$arity = 1), nil) && 'inherited'
    })($scope.base, null);
  })($scope.base)
};

/* Generated by Opal 0.10.5 */
(function(Opal) {
  var $a, $b, self = Opal.top, $scope = Opal, nil = Opal.nil, $breaker = Opal.breaker, $slice = Opal.slice, no_router_source = nil, no_router_dom_source = nil, error = nil;

  Opal.add_stubs(['$require', '$import', '$==', '$raise']);
  self.$require("hyper-component");
  $scope.get('Hyperloop').$import("hyper-router/react-router-source");
  $scope.get('Hyperloop').$import("hyper-router");
  if ($scope.get('RUBY_ENGINE')['$==']("opal")) {
    no_router_source = Opal.global.ReactRouter === undefined;
    no_router_dom_source = Opal.global.ReactRouterDOM === undefined;
    if ((($a = ((($b = no_router_source) !== false && $b !== nil && $b != null) ? $b : no_router_dom_source)) !== nil && $a != null && (!$a.$$is_boolean || $a == true))) {
      error = "  No react-router.js or react-router-dom.js Available.\n\n  A global 'ReactRouter' and 'ReactRouterDOM' must be defined before requiring 'hyper-router'.\n\n  To USE THE BUILT-IN SOURCE:\n    add 'require \"hyper-router/react-router-source\"'\n    immediately before the 'require \"hyper-router\" directive.\n\n  IF USING NPM/WEBPACK:\n    add '\"react-router\": \"^4.1.1\"' and '\"react-router-dom\": \"^4.1.1\"' to your package.json.)\n";
      self.$raise(error);};
    self.$require("react/router");
    self.$require("react/router/dom");
    self.$require("react/router/history");
    self.$require("hyper-router/isomorphic_methods");
    self.$require("hyper-router/history");
    self.$require("hyper-router/location");
    self.$require("hyper-router/match");
    self.$require("hyper-router/class_methods");
    self.$require("hyper-router/component_methods");
    self.$require("hyper-router/instance_methods");
    self.$require("hyperloop/router/base");
    self.$require("hyperloop/router/browser");
    self.$require("hyperloop/router/mixin");
    self.$require("hyperloop/router/component");
    self.$require("hyperloop/router/hash");
    self.$require("hyperloop/router/memory");
    self.$require("hyperloop/router/static");
    return self.$require("hyperloop/router");};
})(Opal);
